
Test_katvoer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000420c  0800a690  0800a690  0001a690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e89c  0800e89c  00020890  2**0
                  CONTENTS
  4 .ARM          00000008  0800e89c  0800e89c  0001e89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8a4  0800e8a4  00020890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8a4  0800e8a4  0001e8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8a8  0800e8a8  0001e8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000890  20000000  0800e8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000890  0800f13c  00020890  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c8c  0800f13c  00020c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020890  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d92  00000000  00000000  000208c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd7  00000000  00000000  00037652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0003a630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003b840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018627  00000000  00000000  0003c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171ed  00000000  00000000  00054f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000914b4  00000000  00000000  0006c124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd5d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  000fd62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000890 	.word	0x20000890
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a678 	.word	0x0800a678

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000894 	.word	0x20000894
 80001dc:	0800a678 	.word	0x0800a678

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <menu_draw>:




void menu_draw(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	switch(menu)
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <menu_draw+0x94>)
 80005ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <menu_draw+0x14>
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d016      	beq.n	80005e8 <menu_draw+0x40>
				break;
			}
			break;
	}

}
 80005ba:	e03c      	b.n	8000636 <menu_draw+0x8e>
		draw_main();
 80005bc:	f001 fa3e 	bl	8001a3c <draw_main>
		switch(sub_menu)
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <menu_draw+0x98>)
 80005c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d832      	bhi.n	8000630 <menu_draw+0x88>
 80005ca:	a201      	add	r2, pc, #4	; (adr r2, 80005d0 <menu_draw+0x28>)
 80005cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d0:	080005e5 	.word	0x080005e5
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	080005e5 	.word	0x080005e5
 80005dc:	080005e5 	.word	0x080005e5
 80005e0:	080005e5 	.word	0x080005e5
			break;
 80005e4:	bf00      	nop
		break;
 80005e6:	e023      	b.n	8000630 <menu_draw+0x88>
			switch(sub_menu)
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <menu_draw+0x98>)
 80005ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d81f      	bhi.n	8000634 <menu_draw+0x8c>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <menu_draw+0x54>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000611 	.word	0x08000611
 8000600:	08000617 	.word	0x08000617
 8000604:	0800061d 	.word	0x0800061d
 8000608:	08000623 	.word	0x08000623
 800060c:	08000629 	.word	0x08000629
				draw_options();
 8000610:	f002 fafc 	bl	8002c0c <draw_options>
				break;
 8000614:	e00b      	b.n	800062e <menu_draw+0x86>
				feed_set();
 8000616:	f002 fc7d 	bl	8002f14 <feed_set>
				break;
 800061a:	e008      	b.n	800062e <menu_draw+0x86>
				calibrate_feed();
 800061c:	f003 fa66 	bl	8003aec <calibrate_feed>
				break;
 8000620:	e005      	b.n	800062e <menu_draw+0x86>
				set_time();
 8000622:	f002 ffe5 	bl	80035f0 <set_time>
				break;
 8000626:	e002      	b.n	800062e <menu_draw+0x86>
				draw_extra_options();
 8000628:	f001 fe48 	bl	80022bc <draw_extra_options>
				break;
 800062c:	bf00      	nop
			break;
 800062e:	e001      	b.n	8000634 <menu_draw+0x8c>
		break;
 8000630:	bf00      	nop
 8000632:	e000      	b.n	8000636 <menu_draw+0x8e>
			break;
 8000634:	bf00      	nop
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200008c4 	.word	0x200008c4
 8000640:	2000070a 	.word	0x2000070a

08000644 <selection_action>:

void selection_action(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	if(button_pressed==true)
 8000648:	4bac      	ldr	r3, [pc, #688]	; (80008fc <selection_action+0x2b8>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	f000 8473 	beq.w	8000f38 <selection_action+0x8f4>
	{
		//play_tune();
		switch(menu)
 8000652:	4bab      	ldr	r3, [pc, #684]	; (8000900 <selection_action+0x2bc>)
 8000654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000658:	2b02      	cmp	r3, #2
 800065a:	f000 8467 	beq.w	8000f2c <selection_action+0x8e8>
 800065e:	2b02      	cmp	r3, #2
 8000660:	f300 8467 	bgt.w	8000f32 <selection_action+0x8ee>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <selection_action+0x2c>
 8000668:	2b01      	cmp	r3, #1
 800066a:	d061      	beq.n	8000730 <selection_action+0xec>
 800066c:	f000 bc61 	b.w	8000f32 <selection_action+0x8ee>
		{
		case 0: //main menu
			switch(selection_wheel) // no submenu in main menu
 8000670:	4ba4      	ldr	r3, [pc, #656]	; (8000904 <selection_action+0x2c0>)
 8000672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067a:	d003      	beq.n	8000684 <selection_action+0x40>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d02a      	beq.n	80006d6 <selection_action+0x92>
					}
					update=1;
					selection_wheel=-1;
					break;
			}
			break;
 8000680:	f000 bc57 	b.w	8000f32 <selection_action+0x8ee>
				switch(selection)
 8000684:	4ba0      	ldr	r3, [pc, #640]	; (8000908 <selection_action+0x2c4>)
 8000686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d011      	beq.n	80006b2 <selection_action+0x6e>
 800068e:	2b02      	cmp	r3, #2
 8000690:	dc4b      	bgt.n	800072a <selection_action+0xe6>
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <selection_action+0x58>
 8000696:	2b01      	cmp	r3, #1
 8000698:	d004      	beq.n	80006a4 <selection_action+0x60>
				break;
 800069a:	e046      	b.n	800072a <selection_action+0xe6>
					menu=1; // options menu (it makes more sense from this point onward)
 800069c:	4b98      	ldr	r3, [pc, #608]	; (8000900 <selection_action+0x2bc>)
 800069e:	2201      	movs	r2, #1
 80006a0:	801a      	strh	r2, [r3, #0]
					break;
 80006a2:	e017      	b.n	80006d4 <selection_action+0x90>
					selection_wheel=0;
 80006a4:	4b97      	ldr	r3, [pc, #604]	; (8000904 <selection_action+0x2c0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	801a      	strh	r2, [r3, #0]
					selection=0;
 80006aa:	4b97      	ldr	r3, [pc, #604]	; (8000908 <selection_action+0x2c4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	801a      	strh	r2, [r3, #0]
					break;
 80006b0:	e010      	b.n	80006d4 <selection_action+0x90>
					timeout_old=TIM2->CNT-timeout_time-10;
 80006b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b8:	4a94      	ldr	r2, [pc, #592]	; (800090c <selection_action+0x2c8>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	1a9b      	subs	r3, r3, r2
 80006be:	3b0a      	subs	r3, #10
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b93      	ldr	r3, [pc, #588]	; (8000910 <selection_action+0x2cc>)
 80006c4:	601a      	str	r2, [r3, #0]
					screen_off=1;
 80006c6:	4b93      	ldr	r3, [pc, #588]	; (8000914 <selection_action+0x2d0>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	801a      	strh	r2, [r3, #0]
					HAL_Delay(100);
 80006cc:	2064      	movs	r0, #100	; 0x64
 80006ce:	f005 fff7 	bl	80066c0 <HAL_Delay>
					break;
 80006d2:	bf00      	nop
				break;
 80006d4:	e029      	b.n	800072a <selection_action+0xe6>
					if(selection==1) //save settings
 80006d6:	4b8c      	ldr	r3, [pc, #560]	; (8000908 <selection_action+0x2c4>)
 80006d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10d      	bne.n	80006fc <selection_action+0xb8>
						feed_status=1-feed_status;
 80006e0:	4b8d      	ldr	r3, [pc, #564]	; (8000918 <selection_action+0x2d4>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f1c3 0301 	rsb	r3, r3, #1
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf14      	ite	ne
 80006ec:	2301      	movne	r3, #1
 80006ee:	2300      	moveq	r3, #0
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b89      	ldr	r3, [pc, #548]	; (8000918 <selection_action+0x2d4>)
 80006f4:	701a      	strb	r2, [r3, #0]
						write_vars(buffer);
 80006f6:	4889      	ldr	r0, [pc, #548]	; (800091c <selection_action+0x2d8>)
 80006f8:	f000 fe10 	bl	800131c <write_vars>
					if(selection==2) //skip next meal
 80006fc:	4b82      	ldr	r3, [pc, #520]	; (8000908 <selection_action+0x2c4>)
 80006fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d109      	bne.n	800071a <selection_action+0xd6>
						skip_meal=1-skip_meal;
 8000706:	4b86      	ldr	r3, [pc, #536]	; (8000920 <selection_action+0x2dc>)
 8000708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800070c:	b29b      	uxth	r3, r3
 800070e:	f1c3 0301 	rsb	r3, r3, #1
 8000712:	b29b      	uxth	r3, r3
 8000714:	b21a      	sxth	r2, r3
 8000716:	4b82      	ldr	r3, [pc, #520]	; (8000920 <selection_action+0x2dc>)
 8000718:	801a      	strh	r2, [r3, #0]
					update=1;
 800071a:	4b82      	ldr	r3, [pc, #520]	; (8000924 <selection_action+0x2e0>)
 800071c:	2201      	movs	r2, #1
 800071e:	801a      	strh	r2, [r3, #0]
					selection_wheel=-1;
 8000720:	4b78      	ldr	r3, [pc, #480]	; (8000904 <selection_action+0x2c0>)
 8000722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000726:	801a      	strh	r2, [r3, #0]
					break;
 8000728:	e000      	b.n	800072c <selection_action+0xe8>
				break;
 800072a:	bf00      	nop
			break;
 800072c:	f000 bc01 	b.w	8000f32 <selection_action+0x8ee>


			case 1: //options menu
				switch(sub_menu)
 8000730:	4b7d      	ldr	r3, [pc, #500]	; (8000928 <selection_action+0x2e4>)
 8000732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000736:	3301      	adds	r3, #1
 8000738:	2b04      	cmp	r3, #4
 800073a:	f200 83f9 	bhi.w	8000f30 <selection_action+0x8ec>
 800073e:	a201      	add	r2, pc, #4	; (adr r2, 8000744 <selection_action+0x100>)
 8000740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000744:	08000759 	.word	0x08000759
 8000748:	08000817 	.word	0x08000817
 800074c:	08000b47 	.word	0x08000b47
 8000750:	08000c6b 	.word	0x08000c6b
 8000754:	08000d47 	.word	0x08000d47
				{
				case -1: //no sub_menu selected
					switch(selection)
 8000758:	4b6b      	ldr	r3, [pc, #428]	; (8000908 <selection_action+0x2c4>)
 800075a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800075e:	2b05      	cmp	r3, #5
 8000760:	f200 83dc 	bhi.w	8000f1c <selection_action+0x8d8>
 8000764:	a201      	add	r2, pc, #4	; (adr r2, 800076c <selection_action+0x128>)
 8000766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076a:	bf00      	nop
 800076c:	08000785 	.word	0x08000785
 8000770:	0800078d 	.word	0x0800078d
 8000774:	0800079b 	.word	0x0800079b
 8000778:	080007a9 	.word	0x080007a9
 800077c:	080007b7 	.word	0x080007b7
 8000780:	080007ff 	.word	0x080007ff
					{
					case 0:
						//voertijden/hoeveelheden
						sub_menu=0;
 8000784:	4b68      	ldr	r3, [pc, #416]	; (8000928 <selection_action+0x2e4>)
 8000786:	2200      	movs	r2, #0
 8000788:	801a      	strh	r2, [r3, #0]
						break;
 800078a:	e043      	b.n	8000814 <selection_action+0x1d0>

					case 1:
						sub_menu=1;
 800078c:	4b66      	ldr	r3, [pc, #408]	; (8000928 <selection_action+0x2e4>)
 800078e:	2201      	movs	r2, #1
 8000790:	801a      	strh	r2, [r3, #0]
						selection=0;
 8000792:	4b5d      	ldr	r3, [pc, #372]	; (8000908 <selection_action+0x2c4>)
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
						break;
 8000798:	e03c      	b.n	8000814 <selection_action+0x1d0>

					case 2:
						sub_menu=2;
 800079a:	4b63      	ldr	r3, [pc, #396]	; (8000928 <selection_action+0x2e4>)
 800079c:	2202      	movs	r2, #2
 800079e:	801a      	strh	r2, [r3, #0]
						selection=0;
 80007a0:	4b59      	ldr	r3, [pc, #356]	; (8000908 <selection_action+0x2c4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	801a      	strh	r2, [r3, #0]
						break;
 80007a6:	e035      	b.n	8000814 <selection_action+0x1d0>

					case 3:
						sub_menu=3;
 80007a8:	4b5f      	ldr	r3, [pc, #380]	; (8000928 <selection_action+0x2e4>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	801a      	strh	r2, [r3, #0]
						selection=0;
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <selection_action+0x2c4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	801a      	strh	r2, [r3, #0]
						break;
 80007b4:	e02e      	b.n	8000814 <selection_action+0x1d0>

					case 4:
						TFT9341_FillScreen(0x0000);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f004 fb86 	bl	8004ec8 <TFT9341_FillScreen>
						TFT9341_SetTextColor(0xffff);
 80007bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007c0:	f004 fbda 	bl	8004f78 <TFT9341_SetTextColor>
						TFT9341_SetFont(&Font20);
 80007c4:	4859      	ldr	r0, [pc, #356]	; (800092c <selection_action+0x2e8>)
 80007c6:	f004 fbf7 	bl	8004fb8 <TFT9341_SetFont>
						TFT9341_String(74,95, "Opgeslagen!");
 80007ca:	4a59      	ldr	r2, [pc, #356]	; (8000930 <selection_action+0x2ec>)
 80007cc:	215f      	movs	r1, #95	; 0x5f
 80007ce:	204a      	movs	r0, #74	; 0x4a
 80007d0:	f004 fcb0 	bl	8005134 <TFT9341_String>
						write_vars(buffer);
 80007d4:	4851      	ldr	r0, [pc, #324]	; (800091c <selection_action+0x2d8>)
 80007d6:	f000 fda1 	bl	800131c <write_vars>
						HAL_Delay(1000);
 80007da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007de:	f005 ff6f 	bl	80066c0 <HAL_Delay>
						menu=1;
 80007e2:	4b47      	ldr	r3, [pc, #284]	; (8000900 <selection_action+0x2bc>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	801a      	strh	r2, [r3, #0]
						sub_menu=-1;
 80007e8:	4b4f      	ldr	r3, [pc, #316]	; (8000928 <selection_action+0x2e4>)
 80007ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ee:	801a      	strh	r2, [r3, #0]
						selection=4;
 80007f0:	4b45      	ldr	r3, [pc, #276]	; (8000908 <selection_action+0x2c4>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	801a      	strh	r2, [r3, #0]
						update=1;
 80007f6:	4b4b      	ldr	r3, [pc, #300]	; (8000924 <selection_action+0x2e0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	801a      	strh	r2, [r3, #0]
						break;
 80007fc:	e00a      	b.n	8000814 <selection_action+0x1d0>

					case 5:


						menu=0;
 80007fe:	4b40      	ldr	r3, [pc, #256]	; (8000900 <selection_action+0x2bc>)
 8000800:	2200      	movs	r2, #0
 8000802:	801a      	strh	r2, [r3, #0]
						sub_menu=-1;
 8000804:	4b48      	ldr	r3, [pc, #288]	; (8000928 <selection_action+0x2e4>)
 8000806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800080a:	801a      	strh	r2, [r3, #0]
						selection=0;
 800080c:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <selection_action+0x2c4>)
 800080e:	2200      	movs	r2, #0
 8000810:	801a      	strh	r2, [r3, #0]
						break;
 8000812:	bf00      	nop
					}
					break;
 8000814:	e382      	b.n	8000f1c <selection_action+0x8d8>

					case 0: //voertijden/hoeveelheden
						switch(selection_wheel)
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <selection_action+0x2c0>)
 8000818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800081c:	3301      	adds	r3, #1
 800081e:	2b05      	cmp	r3, #5
 8000820:	f200 837e 	bhi.w	8000f20 <selection_action+0x8dc>
 8000824:	a201      	add	r2, pc, #4	; (adr r2, 800082c <selection_action+0x1e8>)
 8000826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082a:	bf00      	nop
 800082c:	08000845 	.word	0x08000845
 8000830:	0800093d 	.word	0x0800093d
 8000834:	08000957 	.word	0x08000957
 8000838:	080009cf 	.word	0x080009cf
 800083c:	08000a47 	.word	0x08000a47
 8000840:	08000abd 	.word	0x08000abd
						{
						case -1: // regular interface selection
							if(selection<=feed_number)
 8000844:	4b30      	ldr	r3, [pc, #192]	; (8000908 <selection_action+0x2c4>)
 8000846:	f9b3 2000 	ldrsh.w	r2, [r3]
 800084a:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <selection_action+0x2f0>)
 800084c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000850:	429a      	cmp	r2, r3
 8000852:	dc3e      	bgt.n	80008d2 <selection_action+0x28e>
							{
								switch(selection)
 8000854:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <selection_action+0x2c4>)
 8000856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800085a:	2b04      	cmp	r3, #4
 800085c:	d83a      	bhi.n	80008d4 <selection_action+0x290>
 800085e:	a201      	add	r2, pc, #4	; (adr r2, 8000864 <selection_action+0x220>)
 8000860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000864:	08000879 	.word	0x08000879
 8000868:	0800088b 	.word	0x0800088b
 800086c:	0800089d 	.word	0x0800089d
 8000870:	080008af 	.word	0x080008af
 8000874:	080008c1 	.word	0x080008c1
								{
								case 0:
									selection_wheel=0;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <selection_action+0x2c0>)
 800087a:	2200      	movs	r2, #0
 800087c:	801a      	strh	r2, [r3, #0]
									selection=feed_number;
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <selection_action+0x2f0>)
 8000880:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <selection_action+0x2c4>)
 8000886:	801a      	strh	r2, [r3, #0]
									break;
 8000888:	e024      	b.n	80008d4 <selection_action+0x290>
								case 1:
									selection_wheel=1;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <selection_action+0x2c0>)
 800088c:	2201      	movs	r2, #1
 800088e:	801a      	strh	r2, [r3, #0]
									selection=feed_time[0][0];
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <selection_action+0x2f4>)
 8000892:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <selection_action+0x2c4>)
 8000898:	801a      	strh	r2, [r3, #0]
									break;
 800089a:	e01b      	b.n	80008d4 <selection_action+0x290>
								case 2:
									selection_wheel=2;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <selection_action+0x2c0>)
 800089e:	2202      	movs	r2, #2
 80008a0:	801a      	strh	r2, [r3, #0]
									selection=feed_time[1][0];
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <selection_action+0x2f4>)
 80008a4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <selection_action+0x2c4>)
 80008aa:	801a      	strh	r2, [r3, #0]
									break;
 80008ac:	e012      	b.n	80008d4 <selection_action+0x290>
								case 3:
									selection_wheel=3;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <selection_action+0x2c0>)
 80008b0:	2203      	movs	r2, #3
 80008b2:	801a      	strh	r2, [r3, #0]
									selection=feed_time[2][0];
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <selection_action+0x2f4>)
 80008b6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <selection_action+0x2c4>)
 80008bc:	801a      	strh	r2, [r3, #0]
									break;
 80008be:	e009      	b.n	80008d4 <selection_action+0x290>
								case 4:
									selection_wheel=4;
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <selection_action+0x2c0>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	801a      	strh	r2, [r3, #0]
									selection=feed_time[3][0];
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <selection_action+0x2f4>)
 80008c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <selection_action+0x2c4>)
 80008ce:	801a      	strh	r2, [r3, #0]
									break;
 80008d0:	e000      	b.n	80008d4 <selection_action+0x290>
								}
							}
 80008d2:	bf00      	nop
							if(selection==feed_number+1) // variable position of return button
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <selection_action+0x2c4>)
 80008d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008da:	461a      	mov	r2, r3
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <selection_action+0x2f0>)
 80008de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e2:	3301      	adds	r3, #1
 80008e4:	429a      	cmp	r2, r3
 80008e6:	f040 8124 	bne.w	8000b32 <selection_action+0x4ee>
							{
								sub_menu=-1;
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <selection_action+0x2e4>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	801a      	strh	r2, [r3, #0]
								selection_wheel=-1;
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <selection_action+0x2c0>)
 80008f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f8:	801a      	strh	r2, [r3, #0]
							}
							break;
 80008fa:	e11a      	b.n	8000b32 <selection_action+0x4ee>
 80008fc:	200008d6 	.word	0x200008d6
 8000900:	200008c4 	.word	0x200008c4
 8000904:	20000714 	.word	0x20000714
 8000908:	20000ab0 	.word	0x20000ab0
 800090c:	200008cc 	.word	0x200008cc
 8000910:	200008c8 	.word	0x200008c8
 8000914:	200008d8 	.word	0x200008d8
 8000918:	20000702 	.word	0x20000702
 800091c:	20000b10 	.word	0x20000b10
 8000920:	200008d4 	.word	0x200008d4
 8000924:	200008bc 	.word	0x200008bc
 8000928:	2000070a 	.word	0x2000070a
 800092c:	20000014 	.word	0x20000014
 8000930:	0800a690 	.word	0x0800a690
 8000934:	20000704 	.word	0x20000704
 8000938:	20000a4c 	.word	0x20000a4c

						case 0:
							feed_number=selection;
 800093c:	4b97      	ldr	r3, [pc, #604]	; (8000b9c <selection_action+0x558>)
 800093e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000942:	4b97      	ldr	r3, [pc, #604]	; (8000ba0 <selection_action+0x55c>)
 8000944:	801a      	strh	r2, [r3, #0]
							selection_wheel=-1;
 8000946:	4b97      	ldr	r3, [pc, #604]	; (8000ba4 <selection_action+0x560>)
 8000948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800094c:	801a      	strh	r2, [r3, #0]
							update=1;
 800094e:	4b96      	ldr	r3, [pc, #600]	; (8000ba8 <selection_action+0x564>)
 8000950:	2201      	movs	r2, #1
 8000952:	801a      	strh	r2, [r3, #0]
							break;
 8000954:	e0f6      	b.n	8000b44 <selection_action+0x500>

						case 1: // adjusting first feed time
							if(skip==0)
 8000956:	4b95      	ldr	r3, [pc, #596]	; (8000bac <selection_action+0x568>)
 8000958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d10e      	bne.n	800097e <selection_action+0x33a>
							{
								skip++;
 8000960:	4b92      	ldr	r3, [pc, #584]	; (8000bac <selection_action+0x568>)
 8000962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000966:	b29b      	uxth	r3, r3
 8000968:	3301      	adds	r3, #1
 800096a:	b29b      	uxth	r3, r3
 800096c:	b21a      	sxth	r2, r3
 800096e:	4b8f      	ldr	r3, [pc, #572]	; (8000bac <selection_action+0x568>)
 8000970:	801a      	strh	r2, [r3, #0]
								selection=feed_time[0][1];
 8000972:	4b8f      	ldr	r3, [pc, #572]	; (8000bb0 <selection_action+0x56c>)
 8000974:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000978:	4b88      	ldr	r3, [pc, #544]	; (8000b9c <selection_action+0x558>)
 800097a:	801a      	strh	r2, [r3, #0]
								selection_wheel=-1;
								selection=1;
								skip=0;
								update=1;
							}
							break;
 800097c:	e0db      	b.n	8000b36 <selection_action+0x4f2>
							else if(skip==1)
 800097e:	4b8b      	ldr	r3, [pc, #556]	; (8000bac <selection_action+0x568>)
 8000980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d10e      	bne.n	80009a6 <selection_action+0x362>
								skip++;
 8000988:	4b88      	ldr	r3, [pc, #544]	; (8000bac <selection_action+0x568>)
 800098a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098e:	b29b      	uxth	r3, r3
 8000990:	3301      	adds	r3, #1
 8000992:	b29b      	uxth	r3, r3
 8000994:	b21a      	sxth	r2, r3
 8000996:	4b85      	ldr	r3, [pc, #532]	; (8000bac <selection_action+0x568>)
 8000998:	801a      	strh	r2, [r3, #0]
								selection=feed_amount[0];
 800099a:	4b86      	ldr	r3, [pc, #536]	; (8000bb4 <selection_action+0x570>)
 800099c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009a0:	4b7e      	ldr	r3, [pc, #504]	; (8000b9c <selection_action+0x558>)
 80009a2:	801a      	strh	r2, [r3, #0]
							break;
 80009a4:	e0c7      	b.n	8000b36 <selection_action+0x4f2>
							else if(skip==2)
 80009a6:	4b81      	ldr	r3, [pc, #516]	; (8000bac <selection_action+0x568>)
 80009a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	f040 80c2 	bne.w	8000b36 <selection_action+0x4f2>
								selection_wheel=-1;
 80009b2:	4b7c      	ldr	r3, [pc, #496]	; (8000ba4 <selection_action+0x560>)
 80009b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b8:	801a      	strh	r2, [r3, #0]
								selection=1;
 80009ba:	4b78      	ldr	r3, [pc, #480]	; (8000b9c <selection_action+0x558>)
 80009bc:	2201      	movs	r2, #1
 80009be:	801a      	strh	r2, [r3, #0]
								skip=0;
 80009c0:	4b7a      	ldr	r3, [pc, #488]	; (8000bac <selection_action+0x568>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	801a      	strh	r2, [r3, #0]
								update=1;
 80009c6:	4b78      	ldr	r3, [pc, #480]	; (8000ba8 <selection_action+0x564>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	801a      	strh	r2, [r3, #0]
							break;
 80009cc:	e0b3      	b.n	8000b36 <selection_action+0x4f2>
						case 2: // adjusting second feed time
							if(skip==0)
 80009ce:	4b77      	ldr	r3, [pc, #476]	; (8000bac <selection_action+0x568>)
 80009d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10e      	bne.n	80009f6 <selection_action+0x3b2>
							{
								skip++;
 80009d8:	4b74      	ldr	r3, [pc, #464]	; (8000bac <selection_action+0x568>)
 80009da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	3301      	adds	r3, #1
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	4b71      	ldr	r3, [pc, #452]	; (8000bac <selection_action+0x568>)
 80009e8:	801a      	strh	r2, [r3, #0]
								selection=feed_time[1][1];
 80009ea:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <selection_action+0x56c>)
 80009ec:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80009f0:	4b6a      	ldr	r3, [pc, #424]	; (8000b9c <selection_action+0x558>)
 80009f2:	801a      	strh	r2, [r3, #0]
								selection_wheel=-1;
								selection=2;
								skip=0;
								update=1;
							}
							break;
 80009f4:	e0a1      	b.n	8000b3a <selection_action+0x4f6>
							else if(skip==1)
 80009f6:	4b6d      	ldr	r3, [pc, #436]	; (8000bac <selection_action+0x568>)
 80009f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d10e      	bne.n	8000a1e <selection_action+0x3da>
								skip++;
 8000a00:	4b6a      	ldr	r3, [pc, #424]	; (8000bac <selection_action+0x568>)
 8000a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	4b67      	ldr	r3, [pc, #412]	; (8000bac <selection_action+0x568>)
 8000a10:	801a      	strh	r2, [r3, #0]
								selection=feed_amount[1];
 8000a12:	4b68      	ldr	r3, [pc, #416]	; (8000bb4 <selection_action+0x570>)
 8000a14:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000a18:	4b60      	ldr	r3, [pc, #384]	; (8000b9c <selection_action+0x558>)
 8000a1a:	801a      	strh	r2, [r3, #0]
							break;
 8000a1c:	e08d      	b.n	8000b3a <selection_action+0x4f6>
							else if(skip==2)
 8000a1e:	4b63      	ldr	r3, [pc, #396]	; (8000bac <selection_action+0x568>)
 8000a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	f040 8088 	bne.w	8000b3a <selection_action+0x4f6>
								selection_wheel=-1;
 8000a2a:	4b5e      	ldr	r3, [pc, #376]	; (8000ba4 <selection_action+0x560>)
 8000a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a30:	801a      	strh	r2, [r3, #0]
								selection=2;
 8000a32:	4b5a      	ldr	r3, [pc, #360]	; (8000b9c <selection_action+0x558>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	801a      	strh	r2, [r3, #0]
								skip=0;
 8000a38:	4b5c      	ldr	r3, [pc, #368]	; (8000bac <selection_action+0x568>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	801a      	strh	r2, [r3, #0]
								update=1;
 8000a3e:	4b5a      	ldr	r3, [pc, #360]	; (8000ba8 <selection_action+0x564>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	801a      	strh	r2, [r3, #0]
							break;
 8000a44:	e079      	b.n	8000b3a <selection_action+0x4f6>
						case 3: // adjusting second feed time
							if(skip==0)
 8000a46:	4b59      	ldr	r3, [pc, #356]	; (8000bac <selection_action+0x568>)
 8000a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d10e      	bne.n	8000a6e <selection_action+0x42a>
							{
								skip++;
 8000a50:	4b56      	ldr	r3, [pc, #344]	; (8000bac <selection_action+0x568>)
 8000a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b21a      	sxth	r2, r3
 8000a5e:	4b53      	ldr	r3, [pc, #332]	; (8000bac <selection_action+0x568>)
 8000a60:	801a      	strh	r2, [r3, #0]
								selection=feed_time[2][1];
 8000a62:	4b53      	ldr	r3, [pc, #332]	; (8000bb0 <selection_action+0x56c>)
 8000a64:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000a68:	4b4c      	ldr	r3, [pc, #304]	; (8000b9c <selection_action+0x558>)
 8000a6a:	801a      	strh	r2, [r3, #0]
								selection_wheel=-1;
								selection=3;
								skip=0;
								update=1;
							}
							break;
 8000a6c:	e067      	b.n	8000b3e <selection_action+0x4fa>
							else if(skip==1)
 8000a6e:	4b4f      	ldr	r3, [pc, #316]	; (8000bac <selection_action+0x568>)
 8000a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d10e      	bne.n	8000a96 <selection_action+0x452>
								skip++;
 8000a78:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <selection_action+0x568>)
 8000a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	3301      	adds	r3, #1
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b21a      	sxth	r2, r3
 8000a86:	4b49      	ldr	r3, [pc, #292]	; (8000bac <selection_action+0x568>)
 8000a88:	801a      	strh	r2, [r3, #0]
								selection=feed_amount[2];
 8000a8a:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <selection_action+0x570>)
 8000a8c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000a90:	4b42      	ldr	r3, [pc, #264]	; (8000b9c <selection_action+0x558>)
 8000a92:	801a      	strh	r2, [r3, #0]
							break;
 8000a94:	e053      	b.n	8000b3e <selection_action+0x4fa>
							else if(skip==2)
 8000a96:	4b45      	ldr	r3, [pc, #276]	; (8000bac <selection_action+0x568>)
 8000a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d14e      	bne.n	8000b3e <selection_action+0x4fa>
								selection_wheel=-1;
 8000aa0:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <selection_action+0x560>)
 8000aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa6:	801a      	strh	r2, [r3, #0]
								selection=3;
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <selection_action+0x558>)
 8000aaa:	2203      	movs	r2, #3
 8000aac:	801a      	strh	r2, [r3, #0]
								skip=0;
 8000aae:	4b3f      	ldr	r3, [pc, #252]	; (8000bac <selection_action+0x568>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	801a      	strh	r2, [r3, #0]
								update=1;
 8000ab4:	4b3c      	ldr	r3, [pc, #240]	; (8000ba8 <selection_action+0x564>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	801a      	strh	r2, [r3, #0]
							break;
 8000aba:	e040      	b.n	8000b3e <selection_action+0x4fa>
						case 4: // adjusting second feed time
							if(skip==0)
 8000abc:	4b3b      	ldr	r3, [pc, #236]	; (8000bac <selection_action+0x568>)
 8000abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10e      	bne.n	8000ae4 <selection_action+0x4a0>
							{
								skip++;
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <selection_action+0x568>)
 8000ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	3301      	adds	r3, #1
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	4b35      	ldr	r3, [pc, #212]	; (8000bac <selection_action+0x568>)
 8000ad6:	801a      	strh	r2, [r3, #0]
								selection=feed_time[3][1];
 8000ad8:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <selection_action+0x56c>)
 8000ada:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000ade:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <selection_action+0x558>)
 8000ae0:	801a      	strh	r2, [r3, #0]
								selection_wheel=-1;
								selection=4;
								skip=0;
								update=1;
							}
							break;
 8000ae2:	e02e      	b.n	8000b42 <selection_action+0x4fe>
							else if(skip==1)
 8000ae4:	4b31      	ldr	r3, [pc, #196]	; (8000bac <selection_action+0x568>)
 8000ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d10e      	bne.n	8000b0c <selection_action+0x4c8>
								skip++;
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <selection_action+0x568>)
 8000af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	3301      	adds	r3, #1
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b21a      	sxth	r2, r3
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <selection_action+0x568>)
 8000afe:	801a      	strh	r2, [r3, #0]
								selection=feed_amount[3];
 8000b00:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <selection_action+0x570>)
 8000b02:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <selection_action+0x558>)
 8000b08:	801a      	strh	r2, [r3, #0]
							break;
 8000b0a:	e01a      	b.n	8000b42 <selection_action+0x4fe>
							else if(skip==2)
 8000b0c:	4b27      	ldr	r3, [pc, #156]	; (8000bac <selection_action+0x568>)
 8000b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d115      	bne.n	8000b42 <selection_action+0x4fe>
								selection_wheel=-1;
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <selection_action+0x560>)
 8000b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1c:	801a      	strh	r2, [r3, #0]
								selection=4;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <selection_action+0x558>)
 8000b20:	2204      	movs	r2, #4
 8000b22:	801a      	strh	r2, [r3, #0]
								skip=0;
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <selection_action+0x568>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	801a      	strh	r2, [r3, #0]
								update=1;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <selection_action+0x564>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	801a      	strh	r2, [r3, #0]
							break;
 8000b30:	e007      	b.n	8000b42 <selection_action+0x4fe>
							break;
 8000b32:	bf00      	nop
 8000b34:	e1f4      	b.n	8000f20 <selection_action+0x8dc>
							break;
 8000b36:	bf00      	nop
 8000b38:	e1f2      	b.n	8000f20 <selection_action+0x8dc>
							break;
 8000b3a:	bf00      	nop
 8000b3c:	e1f0      	b.n	8000f20 <selection_action+0x8dc>
							break;
 8000b3e:	bf00      	nop
 8000b40:	e1ee      	b.n	8000f20 <selection_action+0x8dc>
							break;
 8000b42:	bf00      	nop
						}
						break;
 8000b44:	e1ec      	b.n	8000f20 <selection_action+0x8dc>

						case 1: //voer calibreren
							if(skip==4)
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <selection_action+0x568>)
 8000b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d10b      	bne.n	8000b68 <selection_action+0x524>
							{
								skip++;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <selection_action+0x568>)
 8000b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <selection_action+0x568>)
 8000b60:	801a      	strh	r2, [r3, #0]
								update=1;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <selection_action+0x564>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	801a      	strh	r2, [r3, #0]
							}
							switch(selection)
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <selection_action+0x558>)
 8000b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <selection_action+0x534>
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d06f      	beq.n	8000c56 <selection_action+0x612>
								sub_menu=-1;
								skip=0;
								break;
							}

							break;
 8000b76:	e1d8      	b.n	8000f2a <selection_action+0x8e6>
								if(skip==0)
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <selection_action+0x568>)
 8000b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d11a      	bne.n	8000bb8 <selection_action+0x574>
									skip++;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <selection_action+0x568>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <selection_action+0x568>)
 8000b92:	801a      	strh	r2, [r3, #0]
									update=1;
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <selection_action+0x564>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	801a      	strh	r2, [r3, #0]
								break;
 8000b9a:	e064      	b.n	8000c66 <selection_action+0x622>
 8000b9c:	20000ab0 	.word	0x20000ab0
 8000ba0:	20000704 	.word	0x20000704
 8000ba4:	20000714 	.word	0x20000714
 8000ba8:	200008bc 	.word	0x200008bc
 8000bac:	200008ac 	.word	0x200008ac
 8000bb0:	20000a4c 	.word	0x20000a4c
 8000bb4:	20000b28 	.word	0x20000b28
								else if(skip==1)
 8000bb8:	4ba4      	ldr	r3, [pc, #656]	; (8000e4c <selection_action+0x808>)
 8000bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10c      	bne.n	8000bdc <selection_action+0x598>
									skip++;
 8000bc2:	4ba2      	ldr	r3, [pc, #648]	; (8000e4c <selection_action+0x808>)
 8000bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	4b9e      	ldr	r3, [pc, #632]	; (8000e4c <selection_action+0x808>)
 8000bd2:	801a      	strh	r2, [r3, #0]
									update=1;
 8000bd4:	4b9e      	ldr	r3, [pc, #632]	; (8000e50 <selection_action+0x80c>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	801a      	strh	r2, [r3, #0]
								break;
 8000bda:	e044      	b.n	8000c66 <selection_action+0x622>
								else if(skip==2)
 8000bdc:	4b9b      	ldr	r3, [pc, #620]	; (8000e4c <selection_action+0x808>)
 8000bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d10c      	bne.n	8000c00 <selection_action+0x5bc>
									skip++;
 8000be6:	4b99      	ldr	r3, [pc, #612]	; (8000e4c <selection_action+0x808>)
 8000be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	4b95      	ldr	r3, [pc, #596]	; (8000e4c <selection_action+0x808>)
 8000bf6:	801a      	strh	r2, [r3, #0]
									update=1;
 8000bf8:	4b95      	ldr	r3, [pc, #596]	; (8000e50 <selection_action+0x80c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	801a      	strh	r2, [r3, #0]
								break;
 8000bfe:	e032      	b.n	8000c66 <selection_action+0x622>
								else if(skip==3)
 8000c00:	4b92      	ldr	r3, [pc, #584]	; (8000e4c <selection_action+0x808>)
 8000c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d115      	bne.n	8000c36 <selection_action+0x5f2>
									skip++;
 8000c0a:	4b90      	ldr	r3, [pc, #576]	; (8000e4c <selection_action+0x808>)
 8000c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	3301      	adds	r3, #1
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b21a      	sxth	r2, r3
 8000c18:	4b8c      	ldr	r3, [pc, #560]	; (8000e4c <selection_action+0x808>)
 8000c1a:	801a      	strh	r2, [r3, #0]
									update=1;
 8000c1c:	4b8c      	ldr	r3, [pc, #560]	; (8000e50 <selection_action+0x80c>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	801a      	strh	r2, [r3, #0]
									selection=feed_cal;
 8000c22:	4b8c      	ldr	r3, [pc, #560]	; (8000e54 <selection_action+0x810>)
 8000c24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c28:	4b8b      	ldr	r3, [pc, #556]	; (8000e58 <selection_action+0x814>)
 8000c2a:	801a      	strh	r2, [r3, #0]
									feed_cat(20000);
 8000c2c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000c30:	f000 face 	bl	80011d0 <feed_cat>
								break;
 8000c34:	e017      	b.n	8000c66 <selection_action+0x622>
								else if(skip==5)
 8000c36:	4b85      	ldr	r3, [pc, #532]	; (8000e4c <selection_action+0x808>)
 8000c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3c:	2b05      	cmp	r3, #5
 8000c3e:	d112      	bne.n	8000c66 <selection_action+0x622>
									update=1;
 8000c40:	4b83      	ldr	r3, [pc, #524]	; (8000e50 <selection_action+0x80c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	801a      	strh	r2, [r3, #0]
									skip=0;
 8000c46:	4b81      	ldr	r3, [pc, #516]	; (8000e4c <selection_action+0x808>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
									sub_menu=-1;
 8000c4c:	4b83      	ldr	r3, [pc, #524]	; (8000e5c <selection_action+0x818>)
 8000c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c52:	801a      	strh	r2, [r3, #0]
								break;
 8000c54:	e007      	b.n	8000c66 <selection_action+0x622>
								sub_menu=-1;
 8000c56:	4b81      	ldr	r3, [pc, #516]	; (8000e5c <selection_action+0x818>)
 8000c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c5c:	801a      	strh	r2, [r3, #0]
								skip=0;
 8000c5e:	4b7b      	ldr	r3, [pc, #492]	; (8000e4c <selection_action+0x808>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	801a      	strh	r2, [r3, #0]
								break;
 8000c64:	e000      	b.n	8000c68 <selection_action+0x624>
								break;
 8000c66:	bf00      	nop
							break;
 8000c68:	e15f      	b.n	8000f2a <selection_action+0x8e6>


							case 2: //tijd instellen
								switch(selection_wheel)
 8000c6a:	4b7d      	ldr	r3, [pc, #500]	; (8000e60 <selection_action+0x81c>)
 8000c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d056      	beq.n	8000d22 <selection_action+0x6de>
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	f300 8155 	bgt.w	8000f24 <selection_action+0x8e0>
 8000c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7e:	d002      	beq.n	8000c86 <selection_action+0x642>
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d024      	beq.n	8000cce <selection_action+0x68a>
										update=1;
										DS3231_SetTime(&rtc);
										break;

								}
								break; // tijd instellen break
 8000c84:	e14e      	b.n	8000f24 <selection_action+0x8e0>
									switch(selection)
 8000c86:	4b74      	ldr	r3, [pc, #464]	; (8000e58 <selection_action+0x814>)
 8000c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d018      	beq.n	8000cc2 <selection_action+0x67e>
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	dc54      	bgt.n	8000d3e <selection_action+0x6fa>
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <selection_action+0x65a>
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d009      	beq.n	8000cb0 <selection_action+0x66c>
									break;
 8000c9c:	e04f      	b.n	8000d3e <selection_action+0x6fa>
										selection_wheel=0;
 8000c9e:	4b70      	ldr	r3, [pc, #448]	; (8000e60 <selection_action+0x81c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	801a      	strh	r2, [r3, #0]
										selection=rtc.Hour;
 8000ca4:	4b6f      	ldr	r3, [pc, #444]	; (8000e64 <selection_action+0x820>)
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	4b6b      	ldr	r3, [pc, #428]	; (8000e58 <selection_action+0x814>)
 8000cac:	801a      	strh	r2, [r3, #0]
										break;
 8000cae:	e00d      	b.n	8000ccc <selection_action+0x688>
										selection_wheel=1;
 8000cb0:	4b6b      	ldr	r3, [pc, #428]	; (8000e60 <selection_action+0x81c>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	801a      	strh	r2, [r3, #0]
										selection=rtc.DaysOfWeek;
 8000cb6:	4b6b      	ldr	r3, [pc, #428]	; (8000e64 <selection_action+0x820>)
 8000cb8:	78db      	ldrb	r3, [r3, #3]
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	4b66      	ldr	r3, [pc, #408]	; (8000e58 <selection_action+0x814>)
 8000cbe:	801a      	strh	r2, [r3, #0]
										break;
 8000cc0:	e004      	b.n	8000ccc <selection_action+0x688>
										sub_menu=-1;
 8000cc2:	4b66      	ldr	r3, [pc, #408]	; (8000e5c <selection_action+0x818>)
 8000cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc8:	801a      	strh	r2, [r3, #0]
										break;
 8000cca:	bf00      	nop
									break;
 8000ccc:	e037      	b.n	8000d3e <selection_action+0x6fa>
										if(skip==0)
 8000cce:	4b5f      	ldr	r3, [pc, #380]	; (8000e4c <selection_action+0x808>)
 8000cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10e      	bne.n	8000cf6 <selection_action+0x6b2>
											skip++;
 8000cd8:	4b5c      	ldr	r3, [pc, #368]	; (8000e4c <selection_action+0x808>)
 8000cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	4b59      	ldr	r3, [pc, #356]	; (8000e4c <selection_action+0x808>)
 8000ce8:	801a      	strh	r2, [r3, #0]
											selection=rtc.Min;
 8000cea:	4b5e      	ldr	r3, [pc, #376]	; (8000e64 <selection_action+0x820>)
 8000cec:	795b      	ldrb	r3, [r3, #5]
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	4b59      	ldr	r3, [pc, #356]	; (8000e58 <selection_action+0x814>)
 8000cf2:	801a      	strh	r2, [r3, #0]
										break;
 8000cf4:	e025      	b.n	8000d42 <selection_action+0x6fe>
										else if(skip==1)
 8000cf6:	4b55      	ldr	r3, [pc, #340]	; (8000e4c <selection_action+0x808>)
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d120      	bne.n	8000d42 <selection_action+0x6fe>
											skip=0;
 8000d00:	4b52      	ldr	r3, [pc, #328]	; (8000e4c <selection_action+0x808>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	801a      	strh	r2, [r3, #0]
											selection=0;
 8000d06:	4b54      	ldr	r3, [pc, #336]	; (8000e58 <selection_action+0x814>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	801a      	strh	r2, [r3, #0]
											selection_wheel=-1;
 8000d0c:	4b54      	ldr	r3, [pc, #336]	; (8000e60 <selection_action+0x81c>)
 8000d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d12:	801a      	strh	r2, [r3, #0]
											update=1;
 8000d14:	4b4e      	ldr	r3, [pc, #312]	; (8000e50 <selection_action+0x80c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	801a      	strh	r2, [r3, #0]
											DS3231_SetTime(&rtc);
 8000d1a:	4852      	ldr	r0, [pc, #328]	; (8000e64 <selection_action+0x820>)
 8000d1c:	f004 fc98 	bl	8005650 <DS3231_SetTime>
										break;
 8000d20:	e00f      	b.n	8000d42 <selection_action+0x6fe>
										selection=1;
 8000d22:	4b4d      	ldr	r3, [pc, #308]	; (8000e58 <selection_action+0x814>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	801a      	strh	r2, [r3, #0]
										selection_wheel=-1;
 8000d28:	4b4d      	ldr	r3, [pc, #308]	; (8000e60 <selection_action+0x81c>)
 8000d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2e:	801a      	strh	r2, [r3, #0]
										update=1;
 8000d30:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <selection_action+0x80c>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	801a      	strh	r2, [r3, #0]
										DS3231_SetTime(&rtc);
 8000d36:	484b      	ldr	r0, [pc, #300]	; (8000e64 <selection_action+0x820>)
 8000d38:	f004 fc8a 	bl	8005650 <DS3231_SetTime>
										break;
 8000d3c:	e002      	b.n	8000d44 <selection_action+0x700>
									break;
 8000d3e:	bf00      	nop
 8000d40:	e0f0      	b.n	8000f24 <selection_action+0x8e0>
										break;
 8000d42:	bf00      	nop
								break; // tijd instellen break
 8000d44:	e0ee      	b.n	8000f24 <selection_action+0x8e0>

								case 3: //submenu overige instellingen
									switch(selection_wheel)
 8000d46:	4b46      	ldr	r3, [pc, #280]	; (8000e60 <selection_action+0x81c>)
 8000d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	f200 80ea 	bhi.w	8000f28 <selection_action+0x8e4>
 8000d54:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <selection_action+0x718>)
 8000d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5a:	bf00      	nop
 8000d5c:	08000d75 	.word	0x08000d75
 8000d60:	08000e1d 	.word	0x08000e1d
 8000d64:	08000ec1 	.word	0x08000ec1
 8000d68:	08000ed7 	.word	0x08000ed7
 8000d6c:	08000eed 	.word	0x08000eed
 8000d70:	08000f03 	.word	0x08000f03
									{
									case-1: //no selection made
										switch(selection)
 8000d74:	4b38      	ldr	r3, [pc, #224]	; (8000e58 <selection_action+0x814>)
 8000d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	f200 80cc 	bhi.w	8000f18 <selection_action+0x8d4>
 8000d80:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <selection_action+0x744>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000da1 	.word	0x08000da1
 8000d8c:	08000db3 	.word	0x08000db3
 8000d90:	08000ddb 	.word	0x08000ddb
 8000d94:	08000ded 	.word	0x08000ded
 8000d98:	08000dff 	.word	0x08000dff
 8000d9c:	08000e11 	.word	0x08000e11
										{
										case 0:
											selection_wheel=0;
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <selection_action+0x81c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	801a      	strh	r2, [r3, #0]
											selection=time_out;
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <selection_action+0x824>)
 8000da8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <selection_action+0x814>)
 8000dae:	801a      	strh	r2, [r3, #0]
											//refresh=1;
											break;
 8000db0:	e033      	b.n	8000e1a <selection_action+0x7d6>
										case 1:
											selection_wheel=1;
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <selection_action+0x81c>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	801a      	strh	r2, [r3, #0]
											selection=(screen_brightness/65500)*20;
 8000db8:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <selection_action+0x828>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	4a2c      	ldr	r2, [pc, #176]	; (8000e70 <selection_action+0x82c>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	0b1b      	lsrs	r3, r3, #12
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	461a      	mov	r2, r3
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <selection_action+0x814>)
 8000dd6:	801a      	strh	r2, [r3, #0]
											//refresh=1;
											break;
 8000dd8:	e01f      	b.n	8000e1a <selection_action+0x7d6>
										case 2:
											selection_wheel=2;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <selection_action+0x81c>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	801a      	strh	r2, [r3, #0]
											selection=sound_feed;
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <selection_action+0x830>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b21a      	sxth	r2, r3
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <selection_action+0x814>)
 8000de8:	801a      	strh	r2, [r3, #0]
											//refresh=1;
											break;
 8000dea:	e016      	b.n	8000e1a <selection_action+0x7d6>
										case 3:
											selection_wheel=3;
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <selection_action+0x81c>)
 8000dee:	2203      	movs	r2, #3
 8000df0:	801a      	strh	r2, [r3, #0]
											selection=food_shake;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <selection_action+0x834>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b21a      	sxth	r2, r3
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <selection_action+0x814>)
 8000dfa:	801a      	strh	r2, [r3, #0]
											//refresh=1;
											break;
 8000dfc:	e00d      	b.n	8000e1a <selection_action+0x7d6>
										case 4:
											selection_wheel=4;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <selection_action+0x81c>)
 8000e00:	2204      	movs	r2, #4
 8000e02:	801a      	strh	r2, [r3, #0]
											selection=sound_intensity;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <selection_action+0x838>)
 8000e06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <selection_action+0x814>)
 8000e0c:	801a      	strh	r2, [r3, #0]
											//refresh=1;
											break;
 8000e0e:	e004      	b.n	8000e1a <selection_action+0x7d6>
										case 5:
											sub_menu=-1;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <selection_action+0x818>)
 8000e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e16:	801a      	strh	r2, [r3, #0]
											break;
 8000e18:	bf00      	nop
										}
										break;
 8000e1a:	e07d      	b.n	8000f18 <selection_action+0x8d4>
										case 0:
											//0=10s, 1=20s, 2=30s, 3=1min, 4=5min, 5=inf
											switch(time_out)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <selection_action+0x824>)
 8000e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d841      	bhi.n	8000eaa <selection_action+0x866>
 8000e26:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <selection_action+0x7e8>)
 8000e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e85 	.word	0x08000e85
 8000e34:	08000e8f 	.word	0x08000e8f
 8000e38:	08000e99 	.word	0x08000e99
 8000e3c:	08000ea3 	.word	0x08000ea3
											{
											case 0:
												timeout_time=10000; // in ms
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <selection_action+0x83c>)
 8000e42:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e46:	601a      	str	r2, [r3, #0]
												break;
 8000e48:	e02f      	b.n	8000eaa <selection_action+0x866>
 8000e4a:	bf00      	nop
 8000e4c:	200008ac 	.word	0x200008ac
 8000e50:	200008bc 	.word	0x200008bc
 8000e54:	2000071c 	.word	0x2000071c
 8000e58:	20000ab0 	.word	0x20000ab0
 8000e5c:	2000070a 	.word	0x2000070a
 8000e60:	20000714 	.word	0x20000714
 8000e64:	20000720 	.word	0x20000720
 8000e68:	2000071a 	.word	0x2000071a
 8000e6c:	2000070e 	.word	0x2000070e
 8000e70:	40090145 	.word	0x40090145
 8000e74:	20000716 	.word	0x20000716
 8000e78:	20000717 	.word	0x20000717
 8000e7c:	20000718 	.word	0x20000718
 8000e80:	200008cc 	.word	0x200008cc
											case 1:
												timeout_time=20000; // in ms
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <selection_action+0x8f8>)
 8000e86:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e8a:	601a      	str	r2, [r3, #0]
												break;
 8000e8c:	e00d      	b.n	8000eaa <selection_action+0x866>
											case 2:
												timeout_time=30000; // in ms
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <selection_action+0x8f8>)
 8000e90:	f247 5230 	movw	r2, #30000	; 0x7530
 8000e94:	601a      	str	r2, [r3, #0]
												break;
 8000e96:	e008      	b.n	8000eaa <selection_action+0x866>
											case 3:
												timeout_time=60000; // in ms
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <selection_action+0x8f8>)
 8000e9a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000e9e:	601a      	str	r2, [r3, #0]
												break;
 8000ea0:	e003      	b.n	8000eaa <selection_action+0x866>
											case 4:
												timeout_time=300000; // in ms
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <selection_action+0x8f8>)
 8000ea4:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <selection_action+0x8fc>)
 8000ea6:	601a      	str	r2, [r3, #0]
												break;
 8000ea8:	bf00      	nop
											}

											selection_wheel=-1;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <selection_action+0x900>)
 8000eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb0:	801a      	strh	r2, [r3, #0]
											selection=0;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <selection_action+0x904>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	801a      	strh	r2, [r3, #0]
											update=1;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <selection_action+0x908>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	801a      	strh	r2, [r3, #0]
											break;
 8000ebe:	e02c      	b.n	8000f1a <selection_action+0x8d6>
											case 1: //after setting brightness
												selection_wheel=-1;
 8000ec0:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <selection_action+0x900>)
 8000ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec6:	801a      	strh	r2, [r3, #0]
												selection=1;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <selection_action+0x904>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	801a      	strh	r2, [r3, #0]
												update=1;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <selection_action+0x908>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	801a      	strh	r2, [r3, #0]
												break;
 8000ed4:	e021      	b.n	8000f1a <selection_action+0x8d6>
											case 2:
												selection_wheel=-1;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <selection_action+0x900>)
 8000ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000edc:	801a      	strh	r2, [r3, #0]
												selection=2;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <selection_action+0x904>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	801a      	strh	r2, [r3, #0]
												update=1;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <selection_action+0x908>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	801a      	strh	r2, [r3, #0]
												break;
 8000eea:	e016      	b.n	8000f1a <selection_action+0x8d6>
											case 3:
												selection_wheel=-1;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <selection_action+0x900>)
 8000eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef2:	801a      	strh	r2, [r3, #0]
												selection=3;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <selection_action+0x904>)
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	801a      	strh	r2, [r3, #0]
												update=1;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <selection_action+0x908>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	801a      	strh	r2, [r3, #0]
												break;
 8000f00:	e00b      	b.n	8000f1a <selection_action+0x8d6>
											case 4:
												selection=4;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <selection_action+0x904>)
 8000f04:	2204      	movs	r2, #4
 8000f06:	801a      	strh	r2, [r3, #0]
												selection_wheel=-1;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <selection_action+0x900>)
 8000f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0e:	801a      	strh	r2, [r3, #0]
												update=1;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <selection_action+0x908>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	801a      	strh	r2, [r3, #0]
												break;
 8000f16:	e000      	b.n	8000f1a <selection_action+0x8d6>
										break;
 8000f18:	bf00      	nop
									}
									break;
 8000f1a:	e005      	b.n	8000f28 <selection_action+0x8e4>
					break;
 8000f1c:	bf00      	nop
 8000f1e:	e007      	b.n	8000f30 <selection_action+0x8ec>
						break;
 8000f20:	bf00      	nop
 8000f22:	e005      	b.n	8000f30 <selection_action+0x8ec>
								break; // tijd instellen break
 8000f24:	bf00      	nop
 8000f26:	e003      	b.n	8000f30 <selection_action+0x8ec>
									break;
 8000f28:	bf00      	nop

				}
				break;
 8000f2a:	e001      	b.n	8000f30 <selection_action+0x8ec>

				case 2: // lock the device

					break;
 8000f2c:	bf00      	nop
 8000f2e:	e000      	b.n	8000f32 <selection_action+0x8ee>
				break;
 8000f30:	bf00      	nop


		}
		button_pressed=false;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <selection_action+0x90c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
	}

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200008cc 	.word	0x200008cc
 8000f40:	000493e0 	.word	0x000493e0
 8000f44:	20000714 	.word	0x20000714
 8000f48:	20000ab0 	.word	0x20000ab0
 8000f4c:	200008bc 	.word	0x200008bc
 8000f50:	200008d6 	.word	0x200008d6

08000f54 <time_text>:

char* time_text(short Hour,short Min,bool dots)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	80bb      	strh	r3, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	70fb      	strb	r3, [r7, #3]
	if(Hour<10 || Min<10)
 8000f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f6a:	2b09      	cmp	r3, #9
 8000f6c:	dd03      	ble.n	8000f76 <time_text+0x22>
 8000f6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f72:	2b09      	cmp	r3, #9
 8000f74:	dc68      	bgt.n	8001048 <time_text+0xf4>
	{
		if(Hour<10 && Min<10)
 8000f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7a:	2b09      	cmp	r3, #9
 8000f7c:	dc26      	bgt.n	8000fcc <time_text+0x78>
 8000f7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f82:	2b09      	cmp	r3, #9
 8000f84:	dc22      	bgt.n	8000fcc <time_text+0x78>
		{
			curr_time[0]=Hour;
 8000f86:	4a3e      	ldr	r2, [pc, #248]	; (8001080 <time_text+0x12c>)
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	8013      	strh	r3, [r2, #0]
			if(dots==1)
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00d      	beq.n	8000fae <time_text+0x5a>
			{
				sprintf(str,"%d%d:%d%d",0,Hour,0,Min);
 8000f92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4937      	ldr	r1, [pc, #220]	; (8001084 <time_text+0x130>)
 8000fa6:	4838      	ldr	r0, [pc, #224]	; (8001088 <time_text+0x134>)
 8000fa8:	f008 ff38 	bl	8009e1c <siprintf>
 8000fac:	e00c      	b.n	8000fc8 <time_text+0x74>
			}
			else
			{
				sprintf(str,"%d%d %d%d",0,Hour,0,Min);
 8000fae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4932      	ldr	r1, [pc, #200]	; (800108c <time_text+0x138>)
 8000fc2:	4831      	ldr	r0, [pc, #196]	; (8001088 <time_text+0x134>)
 8000fc4:	f008 ff2a 	bl	8009e1c <siprintf>
			}
			return str;
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <time_text+0x134>)
 8000fca:	e054      	b.n	8001076 <time_text+0x122>

		}
		if(Hour>=10)
 8000fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd0:	2b09      	cmp	r3, #9
 8000fd2:	dd19      	ble.n	8001008 <time_text+0xb4>
		{
			if(dots==1)
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00a      	beq.n	8000ff0 <time_text+0x9c>
			{
				sprintf(str,"%d:%d%d",Hour,0,Min);
 8000fda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	492a      	ldr	r1, [pc, #168]	; (8001090 <time_text+0x13c>)
 8000fe8:	4827      	ldr	r0, [pc, #156]	; (8001088 <time_text+0x134>)
 8000fea:	f008 ff17 	bl	8009e1c <siprintf>
 8000fee:	e009      	b.n	8001004 <time_text+0xb0>
			}
			else
			{
				sprintf(str,"%d %d%d",Hour,0,Min);
 8000ff0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ff4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	4925      	ldr	r1, [pc, #148]	; (8001094 <time_text+0x140>)
 8000ffe:	4822      	ldr	r0, [pc, #136]	; (8001088 <time_text+0x134>)
 8001000:	f008 ff0c 	bl	8009e1c <siprintf>
			}
			return str;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <time_text+0x134>)
 8001006:	e036      	b.n	8001076 <time_text+0x122>
		}
		if(Min>=10)
 8001008:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800100c:	2b09      	cmp	r3, #9
 800100e:	dd31      	ble.n	8001074 <time_text+0x120>
		{
			if(dots==1)
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00b      	beq.n	800102e <time_text+0xda>
			{
				sprintf(str,"%d%d:%d",0,Hour,Min);
 8001016:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800101a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	4613      	mov	r3, r2
 8001022:	2200      	movs	r2, #0
 8001024:	491c      	ldr	r1, [pc, #112]	; (8001098 <time_text+0x144>)
 8001026:	4818      	ldr	r0, [pc, #96]	; (8001088 <time_text+0x134>)
 8001028:	f008 fef8 	bl	8009e1c <siprintf>
 800102c:	e00a      	b.n	8001044 <time_text+0xf0>
			}
			else
			{
				sprintf(str,"%d%d %d",0,Hour,Min);
 800102e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	4613      	mov	r3, r2
 800103a:	2200      	movs	r2, #0
 800103c:	4917      	ldr	r1, [pc, #92]	; (800109c <time_text+0x148>)
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <time_text+0x134>)
 8001040:	f008 feec 	bl	8009e1c <siprintf>
			}
			return str;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <time_text+0x134>)
 8001046:	e016      	b.n	8001076 <time_text+0x122>
		}

	}
	else 
	{
		if(dots==1)
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d008      	beq.n	8001060 <time_text+0x10c>
		{
			sprintf(str,"%d:%d",Hour,Min);
 800104e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001052:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001056:	4912      	ldr	r1, [pc, #72]	; (80010a0 <time_text+0x14c>)
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <time_text+0x134>)
 800105a:	f008 fedf 	bl	8009e1c <siprintf>
 800105e:	e007      	b.n	8001070 <time_text+0x11c>
		}
		else
		{
			sprintf(str,"%d %d",Hour,Min);
 8001060:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001064:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001068:	490e      	ldr	r1, [pc, #56]	; (80010a4 <time_text+0x150>)
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <time_text+0x134>)
 800106c:	f008 fed6 	bl	8009e1c <siprintf>
		}
		return str;
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <time_text+0x134>)
 8001072:	e000      	b.n	8001076 <time_text+0x122>
	}
	return "00:00";
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <time_text+0x154>)
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000ac0 	.word	0x20000ac0
 8001084:	0800a69c 	.word	0x0800a69c
 8001088:	200008ec 	.word	0x200008ec
 800108c:	0800a6a8 	.word	0x0800a6a8
 8001090:	0800a6b4 	.word	0x0800a6b4
 8001094:	0800a6bc 	.word	0x0800a6bc
 8001098:	0800a6c4 	.word	0x0800a6c4
 800109c:	0800a6cc 	.word	0x0800a6cc
 80010a0:	0800a6d4 	.word	0x0800a6d4
 80010a4:	0800a6dc 	.word	0x0800a6dc
 80010a8:	0800a6e4 	.word	0x0800a6e4

080010ac <enum_to_day>:

char* enum_to_day(uint8_t day_num)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	switch(day_num)
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d81e      	bhi.n	80010fc <enum_to_day+0x50>
 80010be:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <enum_to_day+0x18>)
 80010c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c4:	080010e1 	.word	0x080010e1
 80010c8:	080010e5 	.word	0x080010e5
 80010cc:	080010e9 	.word	0x080010e9
 80010d0:	080010ed 	.word	0x080010ed
 80010d4:	080010f1 	.word	0x080010f1
 80010d8:	080010f5 	.word	0x080010f5
 80010dc:	080010f9 	.word	0x080010f9
	{
	case 1:
		return "Zo";
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <enum_to_day+0x60>)
 80010e2:	e00c      	b.n	80010fe <enum_to_day+0x52>
	case 2:
		return "Ma";
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <enum_to_day+0x64>)
 80010e6:	e00a      	b.n	80010fe <enum_to_day+0x52>
	case 3:
		return "Di";
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <enum_to_day+0x68>)
 80010ea:	e008      	b.n	80010fe <enum_to_day+0x52>
	case 4:
		return "Wo";
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <enum_to_day+0x6c>)
 80010ee:	e006      	b.n	80010fe <enum_to_day+0x52>
	case 5:
		return "Do";
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <enum_to_day+0x70>)
 80010f2:	e004      	b.n	80010fe <enum_to_day+0x52>
	case 6:
		return "Vr";
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <enum_to_day+0x74>)
 80010f6:	e002      	b.n	80010fe <enum_to_day+0x52>
	case 7:
		return "Za";
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <enum_to_day+0x78>)
 80010fa:	e000      	b.n	80010fe <enum_to_day+0x52>
	}
	return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	0800a6ec 	.word	0x0800a6ec
 8001110:	0800a6f0 	.word	0x0800a6f0
 8001114:	0800a6f4 	.word	0x0800a6f4
 8001118:	0800a6f8 	.word	0x0800a6f8
 800111c:	0800a6fc 	.word	0x0800a6fc
 8001120:	0800a700 	.word	0x0800a700
 8001124:	0800a704 	.word	0x0800a704

08001128 <limit_selection>:

void limit_selection(short L,short N)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	460a      	mov	r2, r1
 8001132:	80fb      	strh	r3, [r7, #6]
 8001134:	4613      	mov	r3, r2
 8001136:	80bb      	strh	r3, [r7, #4]
	if(selection>N)
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <limit_selection+0x44>)
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001142:	429a      	cmp	r2, r3
 8001144:	da02      	bge.n	800114c <limit_selection+0x24>
	{
		selection=L;
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <limit_selection+0x44>)
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	8013      	strh	r3, [r2, #0]
	}
	if(selection<L)
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <limit_selection+0x44>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001156:	429a      	cmp	r2, r3
 8001158:	dd02      	ble.n	8001160 <limit_selection+0x38>
	{
		selection=N;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <limit_selection+0x44>)
 800115c:	88bb      	ldrh	r3, [r7, #4]
 800115e:	8013      	strh	r3, [r2, #0]
	}
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	20000ab0 	.word	0x20000ab0

08001170 <timeout_vis>:

char* timeout_vis(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	switch(time_out)
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <timeout_vis+0x48>)
 8001176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117a:	2b04      	cmp	r3, #4
 800117c:	d816      	bhi.n	80011ac <timeout_vis+0x3c>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <timeout_vis+0x14>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001199 	.word	0x08001199
 8001188:	0800119d 	.word	0x0800119d
 800118c:	080011a1 	.word	0x080011a1
 8001190:	080011a5 	.word	0x080011a5
 8001194:	080011a9 	.word	0x080011a9
	{
	case 0:
		return "10s ";
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <timeout_vis+0x4c>)
 800119a:	e008      	b.n	80011ae <timeout_vis+0x3e>
		break;
	case 1:
		return "20s ";
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <timeout_vis+0x50>)
 800119e:	e006      	b.n	80011ae <timeout_vis+0x3e>
		break;
	case 2:
		return "30s ";
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <timeout_vis+0x54>)
 80011a2:	e004      	b.n	80011ae <timeout_vis+0x3e>
		break;
	case 3:
		return "1min";
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <timeout_vis+0x58>)
 80011a6:	e002      	b.n	80011ae <timeout_vis+0x3e>
		break;
	case 4:
		return "5min";
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <timeout_vis+0x5c>)
 80011aa:	e000      	b.n	80011ae <timeout_vis+0x3e>
		break;
	}
	return 0;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	2000071a 	.word	0x2000071a
 80011bc:	0800a708 	.word	0x0800a708
 80011c0:	0800a710 	.word	0x0800a710
 80011c4:	0800a718 	.word	0x0800a718
 80011c8:	0800a720 	.word	0x0800a720
 80011cc:	0800a728 	.word	0x0800a728

080011d0 <feed_cat>:

void feed_cat(short time)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
	//char str[10];
	motor_intensity(0);
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 fac2 	bl	8001764 <motor_intensity>
	if(first_time==0)
 80011e0:	4b42      	ldr	r3, [pc, #264]	; (80012ec <feed_cat+0x11c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d03e      	beq.n	800126c <feed_cat+0x9c>
	{
		HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2108      	movs	r1, #8
 80011f2:	483f      	ldr	r0, [pc, #252]	; (80012f0 <feed_cat+0x120>)
 80011f4:	f005 fd36 	bl	8006c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fe:	483d      	ldr	r0, [pc, #244]	; (80012f4 <feed_cat+0x124>)
 8001200:	f005 fd30 	bl	8006c64 <HAL_GPIO_WritePin>
		first_time=1;
 8001204:	4b39      	ldr	r3, [pc, #228]	; (80012ec <feed_cat+0x11c>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
		feed_time_old=TIM2->CNT;
 800120a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	461a      	mov	r2, r3
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <feed_cat+0x128>)
 8001214:	601a      	str	r2, [r3, #0]
		feed_time_diff=(TIM2->CNT-feed_time_old);
 8001216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	4a36      	ldr	r2, [pc, #216]	; (80012f8 <feed_cat+0x128>)
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	461a      	mov	r2, r3
 8001224:	4b35      	ldr	r3, [pc, #212]	; (80012fc <feed_cat+0x12c>)
 8001226:	601a      	str	r2, [r3, #0]
		TIM3->CNT=0;
 8001228:	4b35      	ldr	r3, [pc, #212]	; (8001300 <feed_cat+0x130>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2120      	movs	r1, #32
 8001232:	482f      	ldr	r0, [pc, #188]	; (80012f0 <feed_cat+0x120>)
 8001234:	f005 fd16 	bl	8006c64 <HAL_GPIO_WritePin>
		//TFT9341_FillScreen(0xFD90);
	}
	while(feed_time_diff<time) //
 8001238:	e018      	b.n	800126c <feed_cat+0x9c>
	{
		feed_time_diff=(TIM2->CNT-feed_time_old);
 800123a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	4a2d      	ldr	r2, [pc, #180]	; (80012f8 <feed_cat+0x128>)
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	461a      	mov	r2, r3
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <feed_cat+0x12c>)
 800124a:	601a      	str	r2, [r3, #0]
		if(TIM3->CNT>speed)
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <feed_cat+0x130>)
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <feed_cat+0x134>)
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	4293      	cmp	r3, r2
 8001256:	d906      	bls.n	8001266 <feed_cat+0x96>
		{
			TIM3->CNT=0;
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <feed_cat+0x130>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_GPIO_TogglePin(STEP_GPIO_Port,STEP_Pin);
 800125e:	2110      	movs	r1, #16
 8001260:	4823      	ldr	r0, [pc, #140]	; (80012f0 <feed_cat+0x120>)
 8001262:	f005 fd18 	bl	8006c96 <HAL_GPIO_TogglePin>
		}
		first_time=0;
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <feed_cat+0x11c>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
	while(feed_time_diff<time) //
 800126c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <feed_cat+0x12c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	dce0      	bgt.n	800123a <feed_cat+0x6a>

	}
	if(feed_time_diff>=time)
 8001278:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <feed_cat+0x12c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	dc30      	bgt.n	80012e6 <feed_cat+0x116>
	{
		if(food_shake==1)
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <feed_cat+0x138>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00b      	beq.n	80012a4 <feed_cat+0xd4>
		{
			motor_intensity(2);
 800128c:	2002      	movs	r0, #2
 800128e:	f000 fa69 	bl	8001764 <motor_intensity>
			play_tone("e2",800);
 8001292:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001296:	481d      	ldr	r0, [pc, #116]	; (800130c <feed_cat+0x13c>)
 8001298:	f004 fc98 	bl	8005bcc <play_tone>
			HAL_Delay(1000);
 800129c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a0:	f005 fa0e 	bl	80066c0 <HAL_Delay>
		}
		if(sound_feed==1)
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <feed_cat+0x140>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00a      	beq.n	80012c2 <feed_cat+0xf2>
		{
			motor_intensity(0);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 fa59 	bl	8001764 <motor_intensity>
			play_tone("e4",100);
 80012b2:	2164      	movs	r1, #100	; 0x64
 80012b4:	4817      	ldr	r0, [pc, #92]	; (8001314 <feed_cat+0x144>)
 80012b6:	f004 fc89 	bl	8005bcc <play_tone>
			play_tone("b4",200);
 80012ba:	21c8      	movs	r1, #200	; 0xc8
 80012bc:	4816      	ldr	r0, [pc, #88]	; (8001318 <feed_cat+0x148>)
 80012be:	f004 fc85 	bl	8005bcc <play_tone>
		}
		HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2108      	movs	r1, #8
 80012c6:	480a      	ldr	r0, [pc, #40]	; (80012f0 <feed_cat+0x120>)
 80012c8:	f005 fccc 	bl	8006c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d2:	4808      	ldr	r0, [pc, #32]	; (80012f4 <feed_cat+0x124>)
 80012d4:	f005 fcc6 	bl	8006c64 <HAL_GPIO_WritePin>
		TIM3->CNT=0;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <feed_cat+0x130>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
		first_time=0;
 80012de:	4b03      	ldr	r3, [pc, #12]	; (80012ec <feed_cat+0x11c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
		return;
 80012e4:	bf00      	nop
	}




}
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200008b8 	.word	0x200008b8
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020000 	.word	0x40020000
 80012f8:	200008b0 	.word	0x200008b0
 80012fc:	200008b4 	.word	0x200008b4
 8001300:	40000400 	.word	0x40000400
 8001304:	20000710 	.word	0x20000710
 8001308:	20000717 	.word	0x20000717
 800130c:	0800a730 	.word	0x0800a730
 8001310:	20000716 	.word	0x20000716
 8001314:	0800a734 	.word	0x0800a734
 8001318:	0800a738 	.word	0x0800a738

0800131c <write_vars>:


void write_vars(uint8_t buffer[21])
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(buffer1, 1, 0, 23);
	sector_increment=buffer1[21]|buffer1[22]<<8;
	sector_increment++;
	curr_sector=buffer1[23];
	 */
	buffer[0]=feed_status<<2|sound_feed<<1|food_shake; // first three bits contain these in order 011=3
 8001324:	4b55      	ldr	r3, [pc, #340]	; (800147c <write_vars+0x160>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	b25a      	sxtb	r2, r3
 800132c:	4b54      	ldr	r3, [pc, #336]	; (8001480 <write_vars+0x164>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	b25b      	sxtb	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b25a      	sxtb	r2, r3
 8001338:	4b52      	ldr	r3, [pc, #328]	; (8001484 <write_vars+0x168>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b25b      	sxtb	r3, r3
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	701a      	strb	r2, [r3, #0]
	buffer[1]=feed_time[0][0];
 8001348:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <write_vars+0x16c>)
 800134a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3301      	adds	r3, #1
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]
	buffer[2]=feed_time[0][1];
 8001356:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <write_vars+0x16c>)
 8001358:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3302      	adds	r3, #2
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]
	buffer[3]=feed_time[1][0];
 8001364:	4b48      	ldr	r3, [pc, #288]	; (8001488 <write_vars+0x16c>)
 8001366:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3303      	adds	r3, #3
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
	buffer[4]=feed_time[1][1];
 8001372:	4b45      	ldr	r3, [pc, #276]	; (8001488 <write_vars+0x16c>)
 8001374:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3304      	adds	r3, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	701a      	strb	r2, [r3, #0]
	buffer[5]=feed_time[2][0];
 8001380:	4b41      	ldr	r3, [pc, #260]	; (8001488 <write_vars+0x16c>)
 8001382:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3305      	adds	r3, #5
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	701a      	strb	r2, [r3, #0]
	buffer[6]=feed_time[2][1];
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <write_vars+0x16c>)
 8001390:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3306      	adds	r3, #6
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	701a      	strb	r2, [r3, #0]
	buffer[7]=feed_time[3][0];
 800139c:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <write_vars+0x16c>)
 800139e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3307      	adds	r3, #7
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]
	buffer[8]=feed_time[3][1];
 80013aa:	4b37      	ldr	r3, [pc, #220]	; (8001488 <write_vars+0x16c>)
 80013ac:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3308      	adds	r3, #8
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	701a      	strb	r2, [r3, #0]
	buffer[9]=feed_time[4][0];
 80013b8:	4b33      	ldr	r3, [pc, #204]	; (8001488 <write_vars+0x16c>)
 80013ba:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3309      	adds	r3, #9
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]
	buffer[10]=feed_time[4][1];
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <write_vars+0x16c>)
 80013c8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	330a      	adds	r3, #10
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	701a      	strb	r2, [r3, #0]
	buffer[11]=feed_amount[0];
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <write_vars+0x170>)
 80013d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	330b      	adds	r3, #11
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	701a      	strb	r2, [r3, #0]
	buffer[12]=feed_amount[1];
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <write_vars+0x170>)
 80013e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	330c      	adds	r3, #12
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	701a      	strb	r2, [r3, #0]
	buffer[13]=feed_amount[2];
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <write_vars+0x170>)
 80013f2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	330d      	adds	r3, #13
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]
	buffer[14]=feed_amount[3];
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <write_vars+0x170>)
 8001400:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	330e      	adds	r3, #14
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	701a      	strb	r2, [r3, #0]
	buffer[15]=feed_number;
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <write_vars+0x174>)
 800140e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	330f      	adds	r3, #15
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	701a      	strb	r2, [r3, #0]
	buffer[16]=screen_brightness & 0x00ff; //low byte
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <write_vars+0x178>)
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3310      	adds	r3, #16
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]
	buffer[17]=screen_brightness >> 8; // high byte
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <write_vars+0x178>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29a      	uxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3311      	adds	r3, #17
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]
	buffer[18]=sound_intensity;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <write_vars+0x17c>)
 8001438:	f9b3 2000 	ldrsh.w	r2, [r3]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3312      	adds	r3, #18
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	701a      	strb	r2, [r3, #0]
	buffer[19]=time_out;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <write_vars+0x180>)
 8001446:	f9b3 2000 	ldrsh.w	r2, [r3]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3313      	adds	r3, #19
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]
	buffer[20]=feed_cal;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <write_vars+0x184>)
 8001454:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3314      	adds	r3, #20
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	701a      	strb	r2, [r3, #0]
	buffer[21]=sector_increment & 0x00ff ;//sector_increment low byte
	buffer[22]=sector_increment >>8; // sector_increment high byte
	//curr_sector=1;
	buffer[23]=curr_sector;
	 */
	W25qxx_EraseSector(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f004 fe63 	bl	800612c <W25qxx_EraseSector>
	W25qxx_WriteSector(buffer, 1, 0, 21); // write to sector 1 and write bytes 0-23
 8001466:	2315      	movs	r3, #21
 8001468:	2200      	movs	r2, #0
 800146a:	2101      	movs	r1, #1
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f004 ff4b 	bl	8006308 <W25qxx_WriteSector>

	return;
 8001472:	bf00      	nop

}
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000702 	.word	0x20000702
 8001480:	20000716 	.word	0x20000716
 8001484:	20000717 	.word	0x20000717
 8001488:	20000a4c 	.word	0x20000a4c
 800148c:	20000b28 	.word	0x20000b28
 8001490:	20000704 	.word	0x20000704
 8001494:	2000070e 	.word	0x2000070e
 8001498:	20000718 	.word	0x20000718
 800149c:	2000071a 	.word	0x2000071a
 80014a0:	2000071c 	.word	0x2000071c

080014a4 <read_vars>:

void read_vars(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
	uint8_t buffer[24]={0};
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
	W25qxx_ReadSector(buffer, 1, 0, 23);
	curr_sector=buffer[23];
	//curr_sector=1;
	W25qxx_ReadSector(buffer, curr_sector, 0, 23);
	 */
	W25qxx_ReadSector(buffer, 1, 0, 21);
 80014bc:	4638      	mov	r0, r7
 80014be:	2315      	movs	r3, #21
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	f004 fffe 	bl	80064c4 <W25qxx_ReadSector>
	feed_status=(buffer[0] & 4)>>2; // select third bit
 80014c8:	783b      	ldrb	r3, [r7, #0]
 80014ca:	109b      	asrs	r3, r3, #2
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <read_vars+0x110>)
 80014dc:	701a      	strb	r2, [r3, #0]
	sound_feed=(buffer[0]&2)>>1; // select second bit
 80014de:	783b      	ldrb	r3, [r7, #0]
 80014e0:	105b      	asrs	r3, r3, #1
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bf14      	ite	ne
 80014ea:	2301      	movne	r3, #1
 80014ec:	2300      	moveq	r3, #0
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <read_vars+0x114>)
 80014f2:	701a      	strb	r2, [r3, #0]
	food_shake=buffer[0]&1; // select first bit
 80014f4:	783b      	ldrb	r3, [r7, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf14      	ite	ne
 80014fe:	2301      	movne	r3, #1
 8001500:	2300      	moveq	r3, #0
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <read_vars+0x118>)
 8001506:	701a      	strb	r2, [r3, #0]
	feed_time[0][0]=buffer[1];
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	b21a      	sxth	r2, r3
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <read_vars+0x11c>)
 800150e:	801a      	strh	r2, [r3, #0]
	feed_time[0][1]=buffer[2];
 8001510:	78bb      	ldrb	r3, [r7, #2]
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <read_vars+0x11c>)
 8001516:	805a      	strh	r2, [r3, #2]
	feed_time[1][0]=buffer[3];
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	b21a      	sxth	r2, r3
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <read_vars+0x11c>)
 800151e:	809a      	strh	r2, [r3, #4]
	feed_time[1][1]=buffer[4];
 8001520:	793b      	ldrb	r3, [r7, #4]
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <read_vars+0x11c>)
 8001526:	80da      	strh	r2, [r3, #6]
	feed_time[2][0]=buffer[5];
 8001528:	797b      	ldrb	r3, [r7, #5]
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <read_vars+0x11c>)
 800152e:	811a      	strh	r2, [r3, #8]
	feed_time[2][1]=buffer[6];
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	b21a      	sxth	r2, r3
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <read_vars+0x11c>)
 8001536:	815a      	strh	r2, [r3, #10]
	feed_time[3][0]=buffer[7];
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	b21a      	sxth	r2, r3
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <read_vars+0x11c>)
 800153e:	819a      	strh	r2, [r3, #12]
	feed_time[3][1]=buffer[8];
 8001540:	7a3b      	ldrb	r3, [r7, #8]
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <read_vars+0x11c>)
 8001546:	81da      	strh	r2, [r3, #14]
	feed_time[4][0]=buffer[9];
 8001548:	7a7b      	ldrb	r3, [r7, #9]
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <read_vars+0x11c>)
 800154e:	821a      	strh	r2, [r3, #16]
	feed_time[4][1]=buffer[10];
 8001550:	7abb      	ldrb	r3, [r7, #10]
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <read_vars+0x11c>)
 8001556:	825a      	strh	r2, [r3, #18]
	feed_amount[0]=buffer[11];
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	b21a      	sxth	r2, r3
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <read_vars+0x120>)
 800155e:	801a      	strh	r2, [r3, #0]
	feed_amount[1]=buffer[12];
 8001560:	7b3b      	ldrb	r3, [r7, #12]
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <read_vars+0x120>)
 8001566:	805a      	strh	r2, [r3, #2]
	feed_amount[2]=buffer[13];
 8001568:	7b7b      	ldrb	r3, [r7, #13]
 800156a:	b21a      	sxth	r2, r3
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <read_vars+0x120>)
 800156e:	809a      	strh	r2, [r3, #4]
	feed_amount[3]=buffer[14];
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <read_vars+0x120>)
 8001576:	80da      	strh	r2, [r3, #6]
	feed_number=buffer[15];
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	b21a      	sxth	r2, r3
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <read_vars+0x124>)
 800157e:	801a      	strh	r2, [r3, #0]
	screen_brightness=buffer[16]|buffer[17]<<8;
 8001580:	7c3b      	ldrb	r3, [r7, #16]
 8001582:	b21a      	sxth	r2, r3
 8001584:	7c7b      	ldrb	r3, [r7, #17]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21b      	sxth	r3, r3
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <read_vars+0x128>)
 8001592:	801a      	strh	r2, [r3, #0]
	sound_intensity=buffer[18];
 8001594:	7cbb      	ldrb	r3, [r7, #18]
 8001596:	b21a      	sxth	r2, r3
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <read_vars+0x12c>)
 800159a:	801a      	strh	r2, [r3, #0]
	time_out=buffer[19];
 800159c:	7cfb      	ldrb	r3, [r7, #19]
 800159e:	b21a      	sxth	r2, r3
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <read_vars+0x130>)
 80015a2:	801a      	strh	r2, [r3, #0]
	feed_cal=buffer[20];
 80015a4:	7d3b      	ldrb	r3, [r7, #20]
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <read_vars+0x134>)
 80015aa:	801a      	strh	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000702 	.word	0x20000702
 80015b8:	20000716 	.word	0x20000716
 80015bc:	20000717 	.word	0x20000717
 80015c0:	20000a4c 	.word	0x20000a4c
 80015c4:	20000b28 	.word	0x20000b28
 80015c8:	20000704 	.word	0x20000704
 80015cc:	2000070e 	.word	0x2000070e
 80015d0:	20000718 	.word	0x20000718
 80015d4:	2000071a 	.word	0x2000071a
 80015d8:	2000071c 	.word	0x2000071c

080015dc <feed_cat_time>:

void feed_cat_time(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

	for(int i=0;i<feed_number;i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	e06e      	b.n	80016c6 <feed_cat_time+0xea>
	{
		if(rtc.Hour==feed_time[i][0] && rtc.Min==feed_time[i][1] && feed_once==0)
 80015e8:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <feed_cat_time+0x104>)
 80015ea:	791b      	ldrb	r3, [r3, #4]
 80015ec:	4619      	mov	r1, r3
 80015ee:	4a3d      	ldr	r2, [pc, #244]	; (80016e4 <feed_cat_time+0x108>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 80015f6:	4299      	cmp	r1, r3
 80015f8:	d140      	bne.n	800167c <feed_cat_time+0xa0>
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <feed_cat_time+0x104>)
 80015fc:	795b      	ldrb	r3, [r3, #5]
 80015fe:	4619      	mov	r1, r3
 8001600:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <feed_cat_time+0x108>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800160c:	4299      	cmp	r1, r3
 800160e:	d135      	bne.n	800167c <feed_cat_time+0xa0>
 8001610:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <feed_cat_time+0x10c>)
 8001612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d130      	bne.n	800167c <feed_cat_time+0xa0>
		{
			feeders=i; //remember which feed_number is currently in the time span
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b33      	ldr	r3, [pc, #204]	; (80016ec <feed_cat_time+0x110>)
 8001620:	801a      	strh	r2, [r3, #0]
			feed_once=1;
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <feed_cat_time+0x10c>)
 8001624:	2201      	movs	r2, #1
 8001626:	801a      	strh	r2, [r3, #0]
			if(feed_status==1 && skip_meal==0)
 8001628:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <feed_cat_time+0x114>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d019      	beq.n	8001664 <feed_cat_time+0x88>
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <feed_cat_time+0x118>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d114      	bne.n	8001664 <feed_cat_time+0x88>
			{
				feed_cat(20000/feed_cal*feed_amount[i]);  //20 seconds calibration time
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <feed_cat_time+0x11c>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	461a      	mov	r2, r3
 8001642:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001646:	fb93 f3f2 	sdiv	r3, r3, r2
 800164a:	b29a      	uxth	r2, r3
 800164c:	492b      	ldr	r1, [pc, #172]	; (80016fc <feed_cat_time+0x120>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001654:	b29b      	uxth	r3, r3
 8001656:	fb12 f303 	smulbb	r3, r2, r3
 800165a:	b29b      	uxth	r3, r3
 800165c:	b21b      	sxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fdb6 	bl	80011d0 <feed_cat>
			}
			if(skip_meal==1)
 8001664:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <feed_cat_time+0x118>)
 8001666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d128      	bne.n	80016c0 <feed_cat_time+0xe4>
			{
				skip_meal=0;
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <feed_cat_time+0x118>)
 8001670:	2200      	movs	r2, #0
 8001672:	801a      	strh	r2, [r3, #0]
				update=1;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <feed_cat_time+0x124>)
 8001676:	2201      	movs	r2, #1
 8001678:	801a      	strh	r2, [r3, #0]
			if(skip_meal==1)
 800167a:	e021      	b.n	80016c0 <feed_cat_time+0xe4>
			}
		}
		else if(rtc.Hour!=feed_time[i][0] || rtc.Min!=feed_time[i][1])
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <feed_cat_time+0x104>)
 800167e:	791b      	ldrb	r3, [r3, #4]
 8001680:	4619      	mov	r1, r3
 8001682:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <feed_cat_time+0x108>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 800168a:	4299      	cmp	r1, r3
 800168c:	d10a      	bne.n	80016a4 <feed_cat_time+0xc8>
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <feed_cat_time+0x104>)
 8001690:	795b      	ldrb	r3, [r3, #5]
 8001692:	4619      	mov	r1, r3
 8001694:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <feed_cat_time+0x108>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016a0:	4299      	cmp	r1, r3
 80016a2:	d00d      	beq.n	80016c0 <feed_cat_time+0xe4>
		{

			if(feeders==i)
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <feed_cat_time+0x110>)
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	461a      	mov	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d106      	bne.n	80016c0 <feed_cat_time+0xe4>
			{
				feed_once=0;
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <feed_cat_time+0x10c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	801a      	strh	r2, [r3, #0]
				feeders=-1;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <feed_cat_time+0x110>)
 80016ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016be:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<feed_number;i++)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3301      	adds	r3, #1
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <feed_cat_time+0x128>)
 80016c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4293      	cmp	r3, r2
 80016d2:	db89      	blt.n	80015e8 <feed_cat_time+0xc>
			}
		}


	}
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000720 	.word	0x20000720
 80016e4:	20000a4c 	.word	0x20000a4c
 80016e8:	200008ba 	.word	0x200008ba
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000702 	.word	0x20000702
 80016f4:	200008d4 	.word	0x200008d4
 80016f8:	2000071c 	.word	0x2000071c
 80016fc:	20000b28 	.word	0x20000b28
 8001700:	200008bc 	.word	0x200008bc
 8001704:	20000704 	.word	0x20000704

08001708 <motor_driver>:

void motor_driver(short status)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
	if(status==1)
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d10b      	bne.n	8001732 <motor_driver+0x2a>
	{
		HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	2108      	movs	r1, #8
 800171e:	480f      	ldr	r0, [pc, #60]	; (800175c <motor_driver+0x54>)
 8001720:	f005 faa0 	bl	8006c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <motor_driver+0x58>)
 800172c:	f005 fa9a 	bl	8006c64 <HAL_GPIO_WritePin>
	else if(status==0)
	{
		HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
	}
	return;
 8001730:	e00f      	b.n	8001752 <motor_driver+0x4a>
	else if(status==0)
 8001732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10b      	bne.n	8001752 <motor_driver+0x4a>
		HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2108      	movs	r1, #8
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <motor_driver+0x54>)
 8001740:	f005 fa90 	bl	8006c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <motor_driver+0x58>)
 800174c:	f005 fa8a 	bl	8006c64 <HAL_GPIO_WritePin>
	return;
 8001750:	bf00      	nop
 8001752:	bf00      	nop
}
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40020400 	.word	0x40020400
 8001760:	40020000 	.word	0x40020000

08001764 <motor_intensity>:

void motor_intensity(short sound_intensity)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
	//0 zacht,1 middel, 2 hard
	if(sound_intensity==2)
 800176e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d112      	bne.n	800179c <motor_intensity+0x38>
	{
		HAL_GPIO_WritePin(MS1_GPIO_Port,MS1_Pin,GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800177c:	4820      	ldr	r0, [pc, #128]	; (8001800 <motor_intensity+0x9c>)
 800177e:	f005 fa71 	bl	8006c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port,MS2_Pin,GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001788:	481d      	ldr	r0, [pc, #116]	; (8001800 <motor_intensity+0x9c>)
 800178a:	f005 fa6b 	bl	8006c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port,MS3_Pin,GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001794:	481a      	ldr	r0, [pc, #104]	; (8001800 <motor_intensity+0x9c>)
 8001796:	f005 fa65 	bl	8006c64 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(MS1_GPIO_Port,MS1_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(MS2_GPIO_Port,MS2_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(MS3_GPIO_Port,MS3_Pin,GPIO_PIN_SET);
	}
	return;
 800179a:	e02d      	b.n	80017f8 <motor_intensity+0x94>
	else if(sound_intensity==1)
 800179c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d112      	bne.n	80017ca <motor_intensity+0x66>
		HAL_GPIO_WritePin(MS1_GPIO_Port,MS1_Pin,GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017aa:	4815      	ldr	r0, [pc, #84]	; (8001800 <motor_intensity+0x9c>)
 80017ac:	f005 fa5a 	bl	8006c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port,MS2_Pin,GPIO_PIN_SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b6:	4812      	ldr	r0, [pc, #72]	; (8001800 <motor_intensity+0x9c>)
 80017b8:	f005 fa54 	bl	8006c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port,MS3_Pin,GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c2:	480f      	ldr	r0, [pc, #60]	; (8001800 <motor_intensity+0x9c>)
 80017c4:	f005 fa4e 	bl	8006c64 <HAL_GPIO_WritePin>
	return;
 80017c8:	e016      	b.n	80017f8 <motor_intensity+0x94>
	else if(sound_intensity==0)
 80017ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d112      	bne.n	80017f8 <motor_intensity+0x94>
		HAL_GPIO_WritePin(MS1_GPIO_Port,MS1_Pin,GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <motor_intensity+0x9c>)
 80017da:	f005 fa43 	bl	8006c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port,MS2_Pin,GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <motor_intensity+0x9c>)
 80017e6:	f005 fa3d 	bl	8006c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port,MS3_Pin,GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <motor_intensity+0x9c>)
 80017f2:	f005 fa37 	bl	8006c64 <HAL_GPIO_WritePin>
	return;
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
}
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020000 	.word	0x40020000

08001804 <draw_power>:




void draw_power(short feed_status)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
	int k=15;
 800180e:	230f      	movs	r3, #15
 8001810:	617b      	str	r3, [r7, #20]
	int m=0;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]

	for(int i=0;i<100;i++)
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e041      	b.n	80018a0 <draw_power+0x9c>
	{
		for(int j=0;j<99;j++)
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	e038      	b.n	8001894 <draw_power+0x90>
		{
			TFT9341_DrawPixel(20+j,70+i,(((POWER[m]>>k)&0x0001))*((0x07E0)*(feed_status==1)+(0xf800)*(feed_status==0))); //0xf800 red
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f103 0014 	add.w	r0, r3, #20
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f103 0446 	add.w	r4, r3, #70	; 0x46
 800182e:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <draw_power+0xac>)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001836:	461a      	mov	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa42 f303 	asr.w	r3, r2, r3
 800183e:	b29b      	uxth	r3, r3
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d102      	bne.n	8001854 <draw_power+0x50>
 800184e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001852:	e000      	b.n	8001856 <draw_power+0x52>
 8001854:	2100      	movs	r1, #0
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <draw_power+0x60>
 800185e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001862:	e000      	b.n	8001866 <draw_power+0x62>
 8001864:	2300      	movs	r3, #0
 8001866:	440b      	add	r3, r1
 8001868:	b29b      	uxth	r3, r3
 800186a:	fb12 f303 	smulbb	r3, r2, r3
 800186e:	b29b      	uxth	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4621      	mov	r1, r4
 8001874:	f003 fb44 	bl	8004f00 <TFT9341_DrawPixel>

			if(k==0)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d104      	bne.n	8001888 <draw_power+0x84>
			{
				k=16;
 800187e:	2310      	movs	r3, #16
 8001880:	617b      	str	r3, [r7, #20]
				m++;
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	3301      	adds	r3, #1
 8001886:	613b      	str	r3, [r7, #16]
			}
			k--;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3b01      	subs	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
		for(int j=0;j<99;j++)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3301      	adds	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b62      	cmp	r3, #98	; 0x62
 8001898:	ddc3      	ble.n	8001822 <draw_power+0x1e>
	for(int i=0;i<100;i++)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3301      	adds	r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b63      	cmp	r3, #99	; 0x63
 80018a4:	ddba      	ble.n	800181c <draw_power+0x18>
		}
	}
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	20000038 	.word	0x20000038

080018b4 <draw_lock>:


void draw_lock(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
	int k=15;
 80018ba:	230f      	movs	r3, #15
 80018bc:	60fb      	str	r3, [r7, #12]
	int m=0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<40;i++) // y dimensions
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	e02c      	b.n	8001922 <draw_lock+0x6e>
	{
		for(int j=0;j<30;j++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	e023      	b.n	8001916 <draw_lock+0x62>
		{
			TFT9341_DrawPixel(5+j,192+i,(((LOCK[m]>>k)&0x0001))*(0xffff)); //0xf800 red
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	1d58      	adds	r0, r3, #5
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 80018d8:	4a16      	ldr	r2, [pc, #88]	; (8001934 <draw_lock+0x80>)
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018e0:	461a      	mov	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	fa42 f303 	asr.w	r3, r2, r3
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	425b      	negs	r3, r3
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	f003 fb03 	bl	8004f00 <TFT9341_DrawPixel>

			if(k==0)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <draw_lock+0x56>
			{
				k=16;
 8001900:	2310      	movs	r3, #16
 8001902:	60fb      	str	r3, [r7, #12]
				m++;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	3301      	adds	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
			}
			k--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3b01      	subs	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
		for(int j=0;j<30;j++)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2b1d      	cmp	r3, #29
 800191a:	ddd8      	ble.n	80018ce <draw_lock+0x1a>
	for(int i=0;i<40;i++) // y dimensions
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3301      	adds	r3, #1
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b27      	cmp	r3, #39	; 0x27
 8001926:	ddcf      	ble.n	80018c8 <draw_lock+0x14>
		}
	}
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000510 	.word	0x20000510

08001938 <draw_gear>:

void draw_gear(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
	int k=15;
 800193e:	230f      	movs	r3, #15
 8001940:	60fb      	str	r3, [r7, #12]
	int m=0;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<40;i++) // y dimensions
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	e02b      	b.n	80019a4 <draw_gear+0x6c>
	{
		for(int j=0;j<40;j++)
 800194c:	2300      	movs	r3, #0
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	e022      	b.n	8001998 <draw_gear+0x60>
		{
			TFT9341_DrawPixel(5+j,5+i,(((GEAR[m]>>k)&0x0001))*(0xffff)); //0xf800 red
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	1d58      	adds	r0, r3, #5
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	1d59      	adds	r1, r3, #5
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <draw_gear+0x7c>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	fa42 f303 	asr.w	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	b29b      	uxth	r3, r3
 8001972:	425b      	negs	r3, r3
 8001974:	b29b      	uxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	f003 fac2 	bl	8004f00 <TFT9341_DrawPixel>

			if(k==0)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d104      	bne.n	800198c <draw_gear+0x54>
			{
				k=16;
 8001982:	2310      	movs	r3, #16
 8001984:	60fb      	str	r3, [r7, #12]
				m++;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	3301      	adds	r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
			}
			k--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3b01      	subs	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
		for(int j=0;j<40;j++)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b27      	cmp	r3, #39	; 0x27
 800199c:	ddd9      	ble.n	8001952 <draw_gear+0x1a>
	for(int i=0;i<40;i++) // y dimensions
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3301      	adds	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b27      	cmp	r3, #39	; 0x27
 80019a8:	ddd0      	ble.n	800194c <draw_gear+0x14>
		}
	}
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200005a8 	.word	0x200005a8

080019b8 <draw_back>:

void draw_back()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
	int k=15;
 80019be:	230f      	movs	r3, #15
 80019c0:	60fb      	str	r3, [r7, #12]
	int m=0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<29;i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	e02d      	b.n	8001a28 <draw_back+0x70>
	{
		for(int j=0;j<40;j++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	e024      	b.n	8001a1c <draw_back+0x64>
		{
			TFT9341_DrawPixel(15+j,190+i,(((BACK[m]>>k)&0x0001))*0xffff); //0xf800 red
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f103 000f 	add.w	r0, r3, #15
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f103 01be 	add.w	r1, r3, #190	; 0xbe
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <draw_back+0x80>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	fa42 f303 	asr.w	r3, r2, r3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	425b      	negs	r3, r3
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	f003 fa80 	bl	8004f00 <TFT9341_DrawPixel>

			if(k==0)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d104      	bne.n	8001a10 <draw_back+0x58>
			{
				k=16;
 8001a06:	2310      	movs	r3, #16
 8001a08:	60fb      	str	r3, [r7, #12]
				m++;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
			}
			k--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
		for(int j=0;j<40;j++)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b27      	cmp	r3, #39	; 0x27
 8001a20:	ddd7      	ble.n	80019d2 <draw_back+0x1a>
	for(int i=0;i<29;i++)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3301      	adds	r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b1c      	cmp	r3, #28
 8001a2c:	ddce      	ble.n	80019cc <draw_back+0x14>
		}
	}
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000670 	.word	0x20000670

08001a3c <draw_main>:


void draw_main()
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b08f      	sub	sp, #60	; 0x3c
 8001a40:	af02      	add	r7, sp, #8
	char str[8];
	//char str[4];



	if(prev_day!=curr_day||prev_menu!=menu || update)
 8001a42:	4b95      	ldr	r3, [pc, #596]	; (8001c98 <draw_main+0x25c>)
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4b95      	ldr	r3, [pc, #596]	; (8001c9c <draw_main+0x260>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d10d      	bne.n	8001a6a <draw_main+0x2e>
 8001a4e:	4b94      	ldr	r3, [pc, #592]	; (8001ca0 <draw_main+0x264>)
 8001a50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a54:	4b93      	ldr	r3, [pc, #588]	; (8001ca4 <draw_main+0x268>)
 8001a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d105      	bne.n	8001a6a <draw_main+0x2e>
 8001a5e:	4b92      	ldr	r3, [pc, #584]	; (8001ca8 <draw_main+0x26c>)
 8001a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 81e2 	beq.w	8001e2e <draw_main+0x3f2>
	{
		time_diff_meal=1500;
 8001a6a:	4b90      	ldr	r3, [pc, #576]	; (8001cac <draw_main+0x270>)
 8001a6c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001a70:	601a      	str	r2, [r3, #0]

		count_var++;
 8001a72:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <draw_main+0x274>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	4b8b      	ldr	r3, [pc, #556]	; (8001cb0 <draw_main+0x274>)
 8001a82:	801a      	strh	r2, [r3, #0]
		update=0;
 8001a84:	4b88      	ldr	r3, [pc, #544]	; (8001ca8 <draw_main+0x26c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	801a      	strh	r2, [r3, #0]
		prev_day=curr_day;
 8001a8a:	4b84      	ldr	r3, [pc, #528]	; (8001c9c <draw_main+0x260>)
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	4b82      	ldr	r3, [pc, #520]	; (8001c98 <draw_main+0x25c>)
 8001a90:	701a      	strb	r2, [r3, #0]
		prev_menu=menu;
 8001a92:	4b84      	ldr	r3, [pc, #528]	; (8001ca4 <draw_main+0x268>)
 8001a94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a98:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <draw_main+0x264>)
 8001a9a:	801a      	strh	r2, [r3, #0]
		selection=0;
 8001a9c:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <draw_main+0x278>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	801a      	strh	r2, [r3, #0]
		TFT9341_FillScreen(0x0000);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f003 fa10 	bl	8004ec8 <TFT9341_FillScreen>
		TFT9341_SetFont(&Font20);
 8001aa8:	4883      	ldr	r0, [pc, #524]	; (8001cb8 <draw_main+0x27c>)
 8001aaa:	f003 fa85 	bl	8004fb8 <TFT9341_SetFont>
		//TFT9341_DrawRect(0xffff,8,8,34,34);
		TFT9341_SetTextColor(0xffff);
 8001aae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ab2:	f003 fa61 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_String(60,15,"Voermachine!");
 8001ab6:	4a81      	ldr	r2, [pc, #516]	; (8001cbc <draw_main+0x280>)
 8001ab8:	210f      	movs	r1, #15
 8001aba:	203c      	movs	r0, #60	; 0x3c
 8001abc:	f003 fb3a 	bl	8005134 <TFT9341_String>
		// Draw feed times and amounts:
		TFT9341_SetTextColor(0x0000);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f003 fa59 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font24);
 8001ac6:	487e      	ldr	r0, [pc, #504]	; (8001cc0 <draw_main+0x284>)
 8001ac8:	f003 fa76 	bl	8004fb8 <TFT9341_SetFont>


		if(skip_meal==1)
 8001acc:	4b7d      	ldr	r3, [pc, #500]	; (8001cc4 <draw_main+0x288>)
 8001ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d137      	bne.n	8001b46 <draw_main+0x10a>
		{
			for(int i=0;i<(feed_number);i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ada:	e02d      	b.n	8001b38 <draw_main+0xfc>
			{
				int Alarm_diff=(feed_time[i][0]-rtc.Hour)*60+feed_time[i][1]-rtc.Min;
 8001adc:	4a7a      	ldr	r2, [pc, #488]	; (8001cc8 <draw_main+0x28c>)
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b79      	ldr	r3, [pc, #484]	; (8001ccc <draw_main+0x290>)
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	1ad2      	subs	r2, r2, r3
 8001aec:	4613      	mov	r3, r2
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4619      	mov	r1, r3
 8001af6:	4a74      	ldr	r2, [pc, #464]	; (8001cc8 <draw_main+0x28c>)
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b02:	440b      	add	r3, r1
 8001b04:	4a71      	ldr	r2, [pc, #452]	; (8001ccc <draw_main+0x290>)
 8001b06:	7952      	ldrb	r2, [r2, #5]
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
				if(Alarm_diff<0)
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da03      	bge.n	8001b1a <draw_main+0xde>
				{
					Alarm_diff=Alarm_diff+24*60;
 8001b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b14:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
				}

				if(Alarm_diff<time_diff_meal)
 8001b1a:	4b64      	ldr	r3, [pc, #400]	; (8001cac <draw_main+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b20:	429a      	cmp	r2, r3
 8001b22:	da06      	bge.n	8001b32 <draw_main+0xf6>
				{
					time_diff_meal=Alarm_diff;
 8001b24:	4a61      	ldr	r2, [pc, #388]	; (8001cac <draw_main+0x270>)
 8001b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b28:	6013      	str	r3, [r2, #0]
					meal_index_skip=i;
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <draw_main+0x294>)
 8001b30:	801a      	strh	r2, [r3, #0]
			for(int i=0;i<(feed_number);i++)
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	3301      	adds	r3, #1
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b38:	4b66      	ldr	r3, [pc, #408]	; (8001cd4 <draw_main+0x298>)
 8001b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	4293      	cmp	r3, r2
 8001b44:	dbca      	blt.n	8001adc <draw_main+0xa0>
			TFT9341_String(140,90+i*40+((2-prev_feed_number)*20),str);
			sprintf(str,"%d",prev_feed_amount[i]);
			TFT9341_String(250,90+i*40+((2-prev_feed_number)*20),strcat(str,"g"));
		}
		*/
		TFT9341_SetTextColor(0xFFFF);
 8001b46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b4a:	f003 fa15 	bl	8004f78 <TFT9341_SetTextColor>
		// draw new
		for(int i=0;i<(feed_number);i++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	e088      	b.n	8001c66 <draw_main+0x22a>
		{
			if(meal_index_skip==i && skip_meal==1)
 8001b54:	4b5e      	ldr	r3, [pc, #376]	; (8001cd0 <draw_main+0x294>)
 8001b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d109      	bne.n	8001b76 <draw_main+0x13a>
 8001b62:	4b58      	ldr	r3, [pc, #352]	; (8001cc4 <draw_main+0x288>)
 8001b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d104      	bne.n	8001b76 <draw_main+0x13a>
			{
				TFT9341_SetTextColor(0xF000);
 8001b6c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001b70:	f003 fa02 	bl	8004f78 <TFT9341_SetTextColor>
 8001b74:	e003      	b.n	8001b7e <draw_main+0x142>
			}
			else
			{
				TFT9341_SetTextColor(0xFFFF);
 8001b76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b7a:	f003 f9fd 	bl	8004f78 <TFT9341_SetTextColor>
			}
			sprintf(str,"%d:%d",feed_time[i][0],feed_time[i][1]);
 8001b7e:	4a52      	ldr	r2, [pc, #328]	; (8001cc8 <draw_main+0x28c>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <draw_main+0x28c>)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b94:	1d38      	adds	r0, r7, #4
 8001b96:	460a      	mov	r2, r1
 8001b98:	494f      	ldr	r1, [pc, #316]	; (8001cd8 <draw_main+0x29c>)
 8001b9a:	f008 f93f 	bl	8009e1c <siprintf>

			TFT9341_String(140,90+i*40+((2-feed_number)*20),time_text(feed_time[i][0],feed_time[i][1],1));
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <draw_main+0x298>)
 8001bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb2:	f1c3 0302 	rsb	r3, r3, #2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	0089      	lsls	r1, r1, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	335a      	adds	r3, #90	; 0x5a
 8001bc8:	b29c      	uxth	r4, r3
 8001bca:	4a3f      	ldr	r2, [pc, #252]	; (8001cc8 <draw_main+0x28c>)
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 8001bd2:	4a3d      	ldr	r2, [pc, #244]	; (8001cc8 <draw_main+0x28c>)
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff f9b7 	bl	8000f54 <time_text>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	4621      	mov	r1, r4
 8001bec:	208c      	movs	r0, #140	; 0x8c
 8001bee:	f003 faa1 	bl	8005134 <TFT9341_String>
			sprintf(str,"%d",feed_amount[i]);
 8001bf2:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <draw_main+0x2a0>)
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	4938      	ldr	r1, [pc, #224]	; (8001ce0 <draw_main+0x2a4>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f008 f90b 	bl	8009e1c <siprintf>
			TFT9341_String(250,90+i*40+((2-feed_number)*20),strcat(str,"g"));
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <draw_main+0x298>)
 8001c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1a:	f1c3 0302 	rsb	r3, r3, #2
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	0089      	lsls	r1, r1, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	335a      	adds	r3, #90	; 0x5a
 8001c30:	b29c      	uxth	r4, r3
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fadd 	bl	80001f4 <strlen>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	4413      	add	r3, r2
 8001c42:	4928      	ldr	r1, [pc, #160]	; (8001ce4 <draw_main+0x2a8>)
 8001c44:	461a      	mov	r2, r3
 8001c46:	460b      	mov	r3, r1
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	8013      	strh	r3, [r2, #0]
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4621      	mov	r1, r4
 8001c52:	20fa      	movs	r0, #250	; 0xfa
 8001c54:	f003 fa6e 	bl	8005134 <TFT9341_String>
			TFT9341_SetTextColor(0xFFFF);
 8001c58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c5c:	f003 f98c 	bl	8004f78 <TFT9341_SetTextColor>
		for(int i=0;i<(feed_number);i++)
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	3301      	adds	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <draw_main+0x298>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f6ff af6f 	blt.w	8001b54 <draw_main+0x118>
		}

		draw_lock();
 8001c76:	f7ff fe1d 	bl	80018b4 <draw_lock>
		draw_gear();
 8001c7a:	f7ff fe5d 	bl	8001938 <draw_gear>
		draw_power(feed_status);
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <draw_main+0x2ac>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fdbd 	bl	8001804 <draw_power>

		for(int i=0;i<4;i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
 8001c8e:	e04d      	b.n	8001d2c <draw_main+0x2f0>
		{
			for(int j=0;j<2;j++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	e03c      	b.n	8001d10 <draw_main+0x2d4>
 8001c96:	bf00      	nop
 8001c98:	20000706 	.word	0x20000706
 8001c9c:	200008c2 	.word	0x200008c2
 8001ca0:	20000708 	.word	0x20000708
 8001ca4:	200008c4 	.word	0x200008c4
 8001ca8:	200008bc 	.word	0x200008bc
 8001cac:	20000030 	.word	0x20000030
 8001cb0:	200008c0 	.word	0x200008c0
 8001cb4:	20000ab0 	.word	0x20000ab0
 8001cb8:	20000014 	.word	0x20000014
 8001cbc:	0800a73c 	.word	0x0800a73c
 8001cc0:	2000001c 	.word	0x2000001c
 8001cc4:	200008d4 	.word	0x200008d4
 8001cc8:	20000a4c 	.word	0x20000a4c
 8001ccc:	20000720 	.word	0x20000720
 8001cd0:	20000034 	.word	0x20000034
 8001cd4:	20000704 	.word	0x20000704
 8001cd8:	0800a74c 	.word	0x0800a74c
 8001cdc:	20000b28 	.word	0x20000b28
 8001ce0:	0800a754 	.word	0x0800a754
 8001ce4:	0800a758 	.word	0x0800a758
 8001ce8:	20000702 	.word	0x20000702
			{
				prev_feed_time[i][j]=feed_time[i][j];
 8001cec:	49ac      	ldr	r1, [pc, #688]	; (8001fa0 <draw_main+0x564>)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	005a      	lsls	r2, r3, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
 8001cfa:	49aa      	ldr	r1, [pc, #680]	; (8001fa4 <draw_main+0x568>)
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	005a      	lsls	r2, r3, #1
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	4413      	add	r3, r2
 8001d04:	4602      	mov	r2, r0
 8001d06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j=0;j<2;j++)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	ddea      	ble.n	8001cec <draw_main+0x2b0>

			}
			prev_feed_amount[i]=feed_amount[i];
 8001d16:	4aa4      	ldr	r2, [pc, #656]	; (8001fa8 <draw_main+0x56c>)
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001d1e:	4aa3      	ldr	r2, [pc, #652]	; (8001fac <draw_main+0x570>)
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<4;i++)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	623b      	str	r3, [r7, #32]
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	ddae      	ble.n	8001c90 <draw_main+0x254>
		}

		prev_feed_number=feed_number;
 8001d32:	4b9f      	ldr	r3, [pc, #636]	; (8001fb0 <draw_main+0x574>)
 8001d34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d38:	4b9e      	ldr	r3, [pc, #632]	; (8001fb4 <draw_main+0x578>)
 8001d3a:	801a      	strh	r2, [r3, #0]
		TFT9341_String(140,70,"08:00 10g");
		TFT9341_String(140,110,"13:00 10g");
		TFT9341_String(140,150,"18:00 10g");

		 */
		TFT9341_String(50,210,"Ma");
 8001d3c:	4a9e      	ldr	r2, [pc, #632]	; (8001fb8 <draw_main+0x57c>)
 8001d3e:	21d2      	movs	r1, #210	; 0xd2
 8001d40:	2032      	movs	r0, #50	; 0x32
 8001d42:	f003 f9f7 	bl	8005134 <TFT9341_String>
		TFT9341_String(88,210,"Di");
 8001d46:	4a9d      	ldr	r2, [pc, #628]	; (8001fbc <draw_main+0x580>)
 8001d48:	21d2      	movs	r1, #210	; 0xd2
 8001d4a:	2058      	movs	r0, #88	; 0x58
 8001d4c:	f003 f9f2 	bl	8005134 <TFT9341_String>
		TFT9341_String(126,210,"Wo");
 8001d50:	4a9b      	ldr	r2, [pc, #620]	; (8001fc0 <draw_main+0x584>)
 8001d52:	21d2      	movs	r1, #210	; 0xd2
 8001d54:	207e      	movs	r0, #126	; 0x7e
 8001d56:	f003 f9ed 	bl	8005134 <TFT9341_String>
		TFT9341_String(164,210,"Do");
 8001d5a:	4a9a      	ldr	r2, [pc, #616]	; (8001fc4 <draw_main+0x588>)
 8001d5c:	21d2      	movs	r1, #210	; 0xd2
 8001d5e:	20a4      	movs	r0, #164	; 0xa4
 8001d60:	f003 f9e8 	bl	8005134 <TFT9341_String>
		TFT9341_String(202,210,"Vr");
 8001d64:	4a98      	ldr	r2, [pc, #608]	; (8001fc8 <draw_main+0x58c>)
 8001d66:	21d2      	movs	r1, #210	; 0xd2
 8001d68:	20ca      	movs	r0, #202	; 0xca
 8001d6a:	f003 f9e3 	bl	8005134 <TFT9341_String>
		TFT9341_String(240,210,"Za");
 8001d6e:	4a97      	ldr	r2, [pc, #604]	; (8001fcc <draw_main+0x590>)
 8001d70:	21d2      	movs	r1, #210	; 0xd2
 8001d72:	20f0      	movs	r0, #240	; 0xf0
 8001d74:	f003 f9de 	bl	8005134 <TFT9341_String>
		TFT9341_String(278,210,"Zo");
 8001d78:	4a95      	ldr	r2, [pc, #596]	; (8001fd0 <draw_main+0x594>)
 8001d7a:	21d2      	movs	r1, #210	; 0xd2
 8001d7c:	f44f 708b 	mov.w	r0, #278	; 0x116
 8001d80:	f003 f9d8 	bl	8005134 <TFT9341_String>



		//TFT9341_DrawLine(0x0000,50+38*(0),232,115+38*(6),232);
		int m;
		for(int i=1;i<8;i++)
 8001d84:	2301      	movs	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e04e      	b.n	8001e28 <draw_main+0x3ec>
				{
					m=7;
				}
			 */
			//m=i;
			m=i-1;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	61bb      	str	r3, [r7, #24]
			if(m==0)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <draw_main+0x35e>
			{
				m=7;
 8001d96:	2307      	movs	r3, #7
 8001d98:	61bb      	str	r3, [r7, #24]
			}
			if(curr_day==i)
 8001d9a:	4b8e      	ldr	r3, [pc, #568]	; (8001fd4 <draw_main+0x598>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d11f      	bne.n	8001de6 <draw_main+0x3aa>
			{
				//TFT9341_DrawLine(0xffff,50+38*(m-1),232,80+38*(m-1),232); //115
				TFT9341_FillRect(50+38*(m-1), 232, 80+38*(m-1),234, 0xffff);
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	00d2      	lsls	r2, r2, #3
 8001db0:	441a      	add	r2, r3
 8001db2:	0052      	lsls	r2, r2, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3332      	adds	r3, #50	; 0x32
 8001dbc:	b298      	uxth	r0, r3
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	00d2      	lsls	r2, r2, #3
 8001dc8:	441a      	add	r2, r3
 8001dca:	0052      	lsls	r2, r2, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3350      	adds	r3, #80	; 0x50
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	23ea      	movs	r3, #234	; 0xea
 8001dde:	21e8      	movs	r1, #232	; 0xe8
 8001de0:	f002 fffe 	bl	8004de0 <TFT9341_FillRect>
 8001de4:	e01d      	b.n	8001e22 <draw_main+0x3e6>
			}
			else
			{
				//TFT9341_DrawLine(0x0000,50+38*(m-1),232,80+38*(m-1),232);

				TFT9341_FillRect(50+38*(m-1), 232, 80+38*(m-1),234, 0x0000);
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	00d2      	lsls	r2, r2, #3
 8001df0:	441a      	add	r2, r3
 8001df2:	0052      	lsls	r2, r2, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3332      	adds	r3, #50	; 0x32
 8001dfc:	b298      	uxth	r0, r3
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	00d2      	lsls	r2, r2, #3
 8001e08:	441a      	add	r2, r3
 8001e0a:	0052      	lsls	r2, r2, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3350      	adds	r3, #80	; 0x50
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	2300      	movs	r3, #0
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	23ea      	movs	r3, #234	; 0xea
 8001e1c:	21e8      	movs	r1, #232	; 0xe8
 8001e1e:	f002 ffdf 	bl	8004de0 <TFT9341_FillRect>
		for(int i=1;i<8;i++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b07      	cmp	r3, #7
 8001e2c:	ddad      	ble.n	8001d8a <draw_main+0x34e>
	}




	if(prev_feed_status!=feed_status)
 8001e2e:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <draw_main+0x59c>)
 8001e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b69      	ldr	r3, [pc, #420]	; (8001fdc <draw_main+0x5a0>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d00a      	beq.n	8001e54 <draw_main+0x418>
	{
		draw_power(feed_status);
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <draw_main+0x5a0>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fcdd 	bl	8001804 <draw_power>
		prev_feed_status=feed_status;
 8001e4a:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <draw_main+0x5a0>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <draw_main+0x59c>)
 8001e52:	801a      	strh	r2, [r3, #0]
	}




	if(selection!=prev_selection && selection_wheel==-1)
 8001e54:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <draw_main+0x5a4>)
 8001e56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e5a:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <draw_main+0x5a8>)
 8001e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d068      	beq.n	8001f36 <draw_main+0x4fa>
 8001e64:	4b60      	ldr	r3, [pc, #384]	; (8001fe8 <draw_main+0x5ac>)
 8001e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6e:	d162      	bne.n	8001f36 <draw_main+0x4fa>
	{
		limit_selection(0, 2);
 8001e70:	2102      	movs	r1, #2
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7ff f958 	bl	8001128 <limit_selection>
		prev_selection=selection;
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <draw_main+0x5a4>)
 8001e7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e7e:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <draw_main+0x5a8>)
 8001e80:	801a      	strh	r2, [r3, #0]
		switch(selection)
 8001e82:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <draw_main+0x5a4>)
 8001e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d03a      	beq.n	8001f02 <draw_main+0x4c6>
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	dc53      	bgt.n	8001f38 <draw_main+0x4fc>
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <draw_main+0x45e>
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d01a      	beq.n	8001ece <draw_main+0x492>
 8001e98:	e04e      	b.n	8001f38 <draw_main+0x4fc>
		{
		case 0:
		{
			TFT9341_FillRect(5,50,45,53,0xFD60);
 8001e9a:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2335      	movs	r3, #53	; 0x35
 8001ea2:	222d      	movs	r2, #45	; 0x2d
 8001ea4:	2132      	movs	r1, #50	; 0x32
 8001ea6:	2005      	movs	r0, #5
 8001ea8:	f002 ff9a 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(20,175,120,178,0x0000);
 8001eac:	2300      	movs	r3, #0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	23b2      	movs	r3, #178	; 0xb2
 8001eb2:	2278      	movs	r2, #120	; 0x78
 8001eb4:	21af      	movs	r1, #175	; 0xaf
 8001eb6:	2014      	movs	r0, #20
 8001eb8:	f002 ff92 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(5,235,35,238,0x0000);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	23ee      	movs	r3, #238	; 0xee
 8001ec2:	2223      	movs	r2, #35	; 0x23
 8001ec4:	21eb      	movs	r1, #235	; 0xeb
 8001ec6:	2005      	movs	r0, #5
 8001ec8:	f002 ff8a 	bl	8004de0 <TFT9341_FillRect>
			break;
 8001ecc:	e034      	b.n	8001f38 <draw_main+0x4fc>
		}
		case 1:
		{
			TFT9341_FillRect(5,50,45,53,0x0000);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2335      	movs	r3, #53	; 0x35
 8001ed4:	222d      	movs	r2, #45	; 0x2d
 8001ed6:	2132      	movs	r1, #50	; 0x32
 8001ed8:	2005      	movs	r0, #5
 8001eda:	f002 ff81 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(20,175,120,178,0xFD60);
 8001ede:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	23b2      	movs	r3, #178	; 0xb2
 8001ee6:	2278      	movs	r2, #120	; 0x78
 8001ee8:	21af      	movs	r1, #175	; 0xaf
 8001eea:	2014      	movs	r0, #20
 8001eec:	f002 ff78 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(5,235,35,238,0x0000);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	23ee      	movs	r3, #238	; 0xee
 8001ef6:	2223      	movs	r2, #35	; 0x23
 8001ef8:	21eb      	movs	r1, #235	; 0xeb
 8001efa:	2005      	movs	r0, #5
 8001efc:	f002 ff70 	bl	8004de0 <TFT9341_FillRect>
				feed_status=1-feed_status;
				//draw_main();
				button_pressed=false;
			}
			 */
			break;
 8001f00:	e01a      	b.n	8001f38 <draw_main+0x4fc>
		}
		case 2:
		{
			TFT9341_FillRect(5,50,45,53,0x0000);
 8001f02:	2300      	movs	r3, #0
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2335      	movs	r3, #53	; 0x35
 8001f08:	222d      	movs	r2, #45	; 0x2d
 8001f0a:	2132      	movs	r1, #50	; 0x32
 8001f0c:	2005      	movs	r0, #5
 8001f0e:	f002 ff67 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(20,175,120,178,0x0000);
 8001f12:	2300      	movs	r3, #0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	23b2      	movs	r3, #178	; 0xb2
 8001f18:	2278      	movs	r2, #120	; 0x78
 8001f1a:	21af      	movs	r1, #175	; 0xaf
 8001f1c:	2014      	movs	r0, #20
 8001f1e:	f002 ff5f 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(5,235,35,238,0xFD60);
 8001f22:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	23ee      	movs	r3, #238	; 0xee
 8001f2a:	2223      	movs	r2, #35	; 0x23
 8001f2c:	21eb      	movs	r1, #235	; 0xeb
 8001f2e:	2005      	movs	r0, #5
 8001f30:	f002 ff56 	bl	8004de0 <TFT9341_FillRect>
			break;
 8001f34:	e000      	b.n	8001f38 <draw_main+0x4fc>
		}
		}
	}
 8001f36:	bf00      	nop

	if(selection_wheel==0)
 8001f38:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <draw_main+0x5ac>)
 8001f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 819f 	bne.w	8002282 <draw_main+0x846>
	{
		short offset=48;
 8001f44:	2330      	movs	r3, #48	; 0x30
 8001f46:	827b      	strh	r3, [r7, #18]
		short middle_move=5;
 8001f48:	2305      	movs	r3, #5
 8001f4a:	823b      	strh	r3, [r7, #16]
		short outer_move=10;
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	81fb      	strh	r3, [r7, #14]
		limit_selection(0, 2);
 8001f50:	2102      	movs	r1, #2
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff f8e8 	bl	8001128 <limit_selection>
		if(once==0)
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <draw_main+0x5b0>)
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 80c6 	bne.w	80020f0 <draw_main+0x6b4>
		{
			once=1;
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <draw_main+0x5b0>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	801a      	strh	r2, [r3, #0]
			//TFT9341_FillRect(55, 35, 320-55,40 , 0x00f0);
			TFT9341_FillRect(5, 30, 320-5,160 , 0x0000);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	23a0      	movs	r3, #160	; 0xa0
 8001f70:	f240 123b 	movw	r2, #315	; 0x13b
 8001f74:	211e      	movs	r1, #30
 8001f76:	2005      	movs	r0, #5
 8001f78:	f002 ff32 	bl	8004de0 <TFT9341_FillRect>

			TFT9341_SetTextColor(0xffff);
 8001f7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f80:	f002 fffa 	bl	8004f78 <TFT9341_SetTextColor>
			TFT9341_SetFont(&Font16);
 8001f84:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <draw_main+0x5b4>)
 8001f86:	f003 f817 	bl	8004fb8 <TFT9341_SetFont>

			if(feed_status==1)
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <draw_main+0x5a0>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d032      	beq.n	8001ff8 <draw_main+0x5bc>
			{
				TFT9341_String(12, 40, "Uitzetten? Of volgende");
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <draw_main+0x5b8>)
 8001f94:	2128      	movs	r1, #40	; 0x28
 8001f96:	200c      	movs	r0, #12
 8001f98:	f003 f8cc 	bl	8005134 <TFT9341_String>
 8001f9c:	e031      	b.n	8002002 <draw_main+0x5c6>
 8001f9e:	bf00      	nop
 8001fa0:	20000a4c 	.word	0x20000a4c
 8001fa4:	200008f4 	.word	0x200008f4
 8001fa8:	20000b28 	.word	0x20000b28
 8001fac:	20000904 	.word	0x20000904
 8001fb0:	20000704 	.word	0x20000704
 8001fb4:	2000002c 	.word	0x2000002c
 8001fb8:	0800a75c 	.word	0x0800a75c
 8001fbc:	0800a760 	.word	0x0800a760
 8001fc0:	0800a764 	.word	0x0800a764
 8001fc4:	0800a768 	.word	0x0800a768
 8001fc8:	0800a76c 	.word	0x0800a76c
 8001fcc:	0800a770 	.word	0x0800a770
 8001fd0:	0800a774 	.word	0x0800a774
 8001fd4:	200008c2 	.word	0x200008c2
 8001fd8:	2000002e 	.word	0x2000002e
 8001fdc:	20000702 	.word	0x20000702
 8001fe0:	20000ab0 	.word	0x20000ab0
 8001fe4:	20000b80 	.word	0x20000b80
 8001fe8:	20000714 	.word	0x20000714
 8001fec:	200008be 	.word	0x200008be
 8001ff0:	2000000c 	.word	0x2000000c
 8001ff4:	0800a778 	.word	0x0800a778
			}
			else
			{
				TFT9341_String(12, 40, "Aanzetten? Of volgende");
 8001ff8:	4aa5      	ldr	r2, [pc, #660]	; (8002290 <draw_main+0x854>)
 8001ffa:	2128      	movs	r1, #40	; 0x28
 8001ffc:	200c      	movs	r0, #12
 8001ffe:	f003 f899 	bl	8005134 <TFT9341_String>
			}

			TFT9341_String(12, 60, "voermoment skippen?");
 8002002:	4aa4      	ldr	r2, [pc, #656]	; (8002294 <draw_main+0x858>)
 8002004:	213c      	movs	r1, #60	; 0x3c
 8002006:	200c      	movs	r0, #12
 8002008:	f003 f894 	bl	8005134 <TFT9341_String>

			TFT9341_FillRect(65-offset-outer_move, 85, 150-offset-outer_move, 125, 0x0E3F);
 800200c:	8a7a      	ldrh	r2, [r7, #18]
 800200e:	89fb      	ldrh	r3, [r7, #14]
 8002010:	4413      	add	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8002018:	b298      	uxth	r0, r3
 800201a:	8a7a      	ldrh	r2, [r7, #18]
 800201c:	89fb      	ldrh	r3, [r7, #14]
 800201e:	4413      	add	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002026:	b29a      	uxth	r2, r3
 8002028:	f640 633f 	movw	r3, #3647	; 0xe3f
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	237d      	movs	r3, #125	; 0x7d
 8002030:	2155      	movs	r1, #85	; 0x55
 8002032:	f002 fed5 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(170-offset-10, 85, 255-offset+10, 125, 0x0E3F);
 8002036:	8a7b      	ldrh	r3, [r7, #18]
 8002038:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800203c:	b298      	uxth	r0, r3
 800203e:	8a7b      	ldrh	r3, [r7, #18]
 8002040:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 8002044:	3301      	adds	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	f640 633f 	movw	r3, #3647	; 0xe3f
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	237d      	movs	r3, #125	; 0x7d
 8002050:	2155      	movs	r1, #85	; 0x55
 8002052:	f002 fec5 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(275-offset+outer_move, 85, 360-offset, 125, 0x0E3F);
 8002056:	89fa      	ldrh	r2, [r7, #14]
 8002058:	8a7b      	ldrh	r3, [r7, #18]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	b29b      	uxth	r3, r3
 800205e:	f203 1313 	addw	r3, r3, #275	; 0x113
 8002062:	b298      	uxth	r0, r3
 8002064:	8a7b      	ldrh	r3, [r7, #18]
 8002066:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800206a:	b29a      	uxth	r2, r3
 800206c:	f640 633f 	movw	r3, #3647	; 0xe3f
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	237d      	movs	r3, #125	; 0x7d
 8002074:	2155      	movs	r1, #85	; 0x55
 8002076:	f002 feb3 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_SetFont(&Font20);
 800207a:	4887      	ldr	r0, [pc, #540]	; (8002298 <draw_main+0x85c>)
 800207c:	f002 ff9c 	bl	8004fb8 <TFT9341_SetFont>
			TFT9341_SetTextColor(0xf000);
 8002080:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002084:	f002 ff78 	bl	8004f78 <TFT9341_SetTextColor>
			TFT9341_SetBackColor(0x0E3F);
 8002088:	f640 603f 	movw	r0, #3647	; 0xe3f
 800208c:	f002 ff84 	bl	8004f98 <TFT9341_SetBackColor>
			TFT9341_String(85-offset-12-outer_move,98,"Terug");
 8002090:	8a7a      	ldrh	r2, [r7, #18]
 8002092:	89fb      	ldrh	r3, [r7, #14]
 8002094:	4413      	add	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	f1c3 0349 	rsb	r3, r3, #73	; 0x49
 800209c:	b29b      	uxth	r3, r3
 800209e:	4a7f      	ldr	r2, [pc, #508]	; (800229c <draw_main+0x860>)
 80020a0:	2162      	movs	r1, #98	; 0x62
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 f846 	bl	8005134 <TFT9341_String>
			if (feed_status==1)
 80020a8:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <draw_main+0x864>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <draw_main+0x688>
			{

				TFT9341_String(195-offset-30+20,98,"Uit");
 80020b0:	8a7b      	ldrh	r3, [r7, #18]
 80020b2:	f1c3 03b9 	rsb	r3, r3, #185	; 0xb9
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4a7a      	ldr	r2, [pc, #488]	; (80022a4 <draw_main+0x868>)
 80020ba:	2162      	movs	r1, #98	; 0x62
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 f839 	bl	8005134 <TFT9341_String>
 80020c2:	e008      	b.n	80020d6 <draw_main+0x69a>
			}
			else
			{

				TFT9341_String(195-offset-30+20,98,"Aan");
 80020c4:	8a7b      	ldrh	r3, [r7, #18]
 80020c6:	f1c3 03b9 	rsb	r3, r3, #185	; 0xb9
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4a76      	ldr	r2, [pc, #472]	; (80022a8 <draw_main+0x86c>)
 80020ce:	2162      	movs	r1, #98	; 0x62
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 f82f 	bl	8005134 <TFT9341_String>
			}

			TFT9341_String(305-offset-14,98,"Skip");
 80020d6:	8a7b      	ldrh	r3, [r7, #18]
 80020d8:	f5c3 7391 	rsb	r3, r3, #290	; 0x122
 80020dc:	3301      	adds	r3, #1
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4a72      	ldr	r2, [pc, #456]	; (80022ac <draw_main+0x870>)
 80020e2:	2162      	movs	r1, #98	; 0x62
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 f825 	bl	8005134 <TFT9341_String>
			TFT9341_SetBackColor(0x0000);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f002 ff54 	bl	8004f98 <TFT9341_SetBackColor>

		}

		if(selection!=prev_selection)
 80020f0:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <draw_main+0x874>)
 80020f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020f6:	4b6f      	ldr	r3, [pc, #444]	; (80022b4 <draw_main+0x878>)
 80020f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f000 80c3 	beq.w	8002288 <draw_main+0x84c>
		{

			if(selection==0)
 8002102:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <draw_main+0x874>)
 8002104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d138      	bne.n	800217e <draw_main+0x742>
			{
				TFT9341_FillRect(275-offset+outer_move, 135, 360-offset, 145, 0x0000);
 800210c:	89fa      	ldrh	r2, [r7, #14]
 800210e:	8a7b      	ldrh	r3, [r7, #18]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	b29b      	uxth	r3, r3
 8002114:	f203 1313 	addw	r3, r3, #275	; 0x113
 8002118:	b298      	uxth	r0, r3
 800211a:	8a7b      	ldrh	r3, [r7, #18]
 800211c:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8002120:	b29a      	uxth	r2, r3
 8002122:	2300      	movs	r3, #0
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2391      	movs	r3, #145	; 0x91
 8002128:	2187      	movs	r1, #135	; 0x87
 800212a:	f002 fe59 	bl	8004de0 <TFT9341_FillRect>
				TFT9341_FillRect(170-offset-middle_move, 135, 255-offset+middle_move, 145, 0x0000);
 800212e:	8a7a      	ldrh	r2, [r7, #18]
 8002130:	8a3b      	ldrh	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	b29b      	uxth	r3, r3
 8002136:	f1c3 03aa 	rsb	r3, r3, #170	; 0xaa
 800213a:	b298      	uxth	r0, r3
 800213c:	8a3a      	ldrh	r2, [r7, #16]
 800213e:	8a7b      	ldrh	r3, [r7, #18]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	b29b      	uxth	r3, r3
 8002144:	33ff      	adds	r3, #255	; 0xff
 8002146:	b29a      	uxth	r2, r3
 8002148:	2300      	movs	r3, #0
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2391      	movs	r3, #145	; 0x91
 800214e:	2187      	movs	r1, #135	; 0x87
 8002150:	f002 fe46 	bl	8004de0 <TFT9341_FillRect>
				TFT9341_FillRect(65-offset-outer_move, 135, 150-offset-outer_move, 145, 0xf000);
 8002154:	8a7a      	ldrh	r2, [r7, #18]
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	4413      	add	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8002160:	b298      	uxth	r0, r3
 8002162:	8a7a      	ldrh	r2, [r7, #18]
 8002164:	89fb      	ldrh	r3, [r7, #14]
 8002166:	4413      	add	r3, r2
 8002168:	b29b      	uxth	r3, r3
 800216a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800216e:	b29a      	uxth	r2, r3
 8002170:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2391      	movs	r3, #145	; 0x91
 8002178:	2187      	movs	r1, #135	; 0x87
 800217a:	f002 fe31 	bl	8004de0 <TFT9341_FillRect>
			}
			if(selection==1)
 800217e:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <draw_main+0x874>)
 8002180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d138      	bne.n	80021fa <draw_main+0x7be>
			{
				TFT9341_FillRect(275-offset+outer_move, 135, 360-offset, 145, 0x0000);
 8002188:	89fa      	ldrh	r2, [r7, #14]
 800218a:	8a7b      	ldrh	r3, [r7, #18]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	b29b      	uxth	r3, r3
 8002190:	f203 1313 	addw	r3, r3, #275	; 0x113
 8002194:	b298      	uxth	r0, r3
 8002196:	8a7b      	ldrh	r3, [r7, #18]
 8002198:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800219c:	b29a      	uxth	r2, r3
 800219e:	2300      	movs	r3, #0
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2391      	movs	r3, #145	; 0x91
 80021a4:	2187      	movs	r1, #135	; 0x87
 80021a6:	f002 fe1b 	bl	8004de0 <TFT9341_FillRect>
				TFT9341_FillRect(170-offset-middle_move, 135, 255-offset+middle_move, 145, 0xf000);
 80021aa:	8a7a      	ldrh	r2, [r7, #18]
 80021ac:	8a3b      	ldrh	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f1c3 03aa 	rsb	r3, r3, #170	; 0xaa
 80021b6:	b298      	uxth	r0, r3
 80021b8:	8a3a      	ldrh	r2, [r7, #16]
 80021ba:	8a7b      	ldrh	r3, [r7, #18]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	b29b      	uxth	r3, r3
 80021c0:	33ff      	adds	r3, #255	; 0xff
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2391      	movs	r3, #145	; 0x91
 80021cc:	2187      	movs	r1, #135	; 0x87
 80021ce:	f002 fe07 	bl	8004de0 <TFT9341_FillRect>
				TFT9341_FillRect(65-offset-outer_move, 135, 150-offset-outer_move, 145, 0x0000);
 80021d2:	8a7a      	ldrh	r2, [r7, #18]
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	4413      	add	r3, r2
 80021d8:	b29b      	uxth	r3, r3
 80021da:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 80021de:	b298      	uxth	r0, r3
 80021e0:	8a7a      	ldrh	r2, [r7, #18]
 80021e2:	89fb      	ldrh	r3, [r7, #14]
 80021e4:	4413      	add	r3, r2
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	2300      	movs	r3, #0
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2391      	movs	r3, #145	; 0x91
 80021f4:	2187      	movs	r1, #135	; 0x87
 80021f6:	f002 fdf3 	bl	8004de0 <TFT9341_FillRect>
			}
			if(selection==2)
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <draw_main+0x874>)
 80021fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d138      	bne.n	8002276 <draw_main+0x83a>
			{
				TFT9341_FillRect(275-offset+outer_move, 135, 360-offset, 145, 0xf000);
 8002204:	89fa      	ldrh	r2, [r7, #14]
 8002206:	8a7b      	ldrh	r3, [r7, #18]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	b29b      	uxth	r3, r3
 800220c:	f203 1313 	addw	r3, r3, #275	; 0x113
 8002210:	b298      	uxth	r0, r3
 8002212:	8a7b      	ldrh	r3, [r7, #18]
 8002214:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8002218:	b29a      	uxth	r2, r3
 800221a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2391      	movs	r3, #145	; 0x91
 8002222:	2187      	movs	r1, #135	; 0x87
 8002224:	f002 fddc 	bl	8004de0 <TFT9341_FillRect>
				TFT9341_FillRect(170-offset-middle_move, 135, 255-offset+middle_move, 145, 0x0000);
 8002228:	8a7a      	ldrh	r2, [r7, #18]
 800222a:	8a3b      	ldrh	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	b29b      	uxth	r3, r3
 8002230:	f1c3 03aa 	rsb	r3, r3, #170	; 0xaa
 8002234:	b298      	uxth	r0, r3
 8002236:	8a3a      	ldrh	r2, [r7, #16]
 8002238:	8a7b      	ldrh	r3, [r7, #18]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	b29b      	uxth	r3, r3
 800223e:	33ff      	adds	r3, #255	; 0xff
 8002240:	b29a      	uxth	r2, r3
 8002242:	2300      	movs	r3, #0
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2391      	movs	r3, #145	; 0x91
 8002248:	2187      	movs	r1, #135	; 0x87
 800224a:	f002 fdc9 	bl	8004de0 <TFT9341_FillRect>
				TFT9341_FillRect(65-offset-outer_move, 135, 150-offset-outer_move, 145, 0x0000);
 800224e:	8a7a      	ldrh	r2, [r7, #18]
 8002250:	89fb      	ldrh	r3, [r7, #14]
 8002252:	4413      	add	r3, r2
 8002254:	b29b      	uxth	r3, r3
 8002256:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 800225a:	b298      	uxth	r0, r3
 800225c:	8a7a      	ldrh	r2, [r7, #18]
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	4413      	add	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002268:	b29a      	uxth	r2, r3
 800226a:	2300      	movs	r3, #0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2391      	movs	r3, #145	; 0x91
 8002270:	2187      	movs	r1, #135	; 0x87
 8002272:	f002 fdb5 	bl	8004de0 <TFT9341_FillRect>

			}
			prev_selection=selection;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <draw_main+0x874>)
 8002278:	f9b3 2000 	ldrsh.w	r2, [r3]
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <draw_main+0x878>)
 800227e:	801a      	strh	r2, [r3, #0]
		}
	 */



}
 8002280:	e002      	b.n	8002288 <draw_main+0x84c>
		once=0;
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <draw_main+0x87c>)
 8002284:	2200      	movs	r2, #0
 8002286:	801a      	strh	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	3734      	adds	r7, #52	; 0x34
 800228c:	46bd      	mov	sp, r7
 800228e:	bd90      	pop	{r4, r7, pc}
 8002290:	0800a790 	.word	0x0800a790
 8002294:	0800a7a8 	.word	0x0800a7a8
 8002298:	20000014 	.word	0x20000014
 800229c:	0800a7bc 	.word	0x0800a7bc
 80022a0:	20000702 	.word	0x20000702
 80022a4:	0800a7c4 	.word	0x0800a7c4
 80022a8:	0800a7c8 	.word	0x0800a7c8
 80022ac:	0800a7cc 	.word	0x0800a7cc
 80022b0:	20000ab0 	.word	0x20000ab0
 80022b4:	20000b80 	.word	0x20000b80
 80022b8:	200008be 	.word	0x200008be

080022bc <draw_extra_options>:
		}
	}
}	

void draw_extra_options(void) //overige instellingen
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b09f      	sub	sp, #124	; 0x7c
 80022c0:	af02      	add	r7, sp, #8
	char str[50];
	short x_pos=15;
 80022c2:	230f      	movs	r3, #15
 80022c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	short y_pos[7];
	y_pos[0]=15;
 80022c8:	230f      	movs	r3, #15
 80022ca:	80bb      	strh	r3, [r7, #4]

	if(sub_menu!=prev_sub_menu||update)
 80022cc:	4bbd      	ldr	r3, [pc, #756]	; (80025c4 <draw_extra_options+0x308>)
 80022ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022d2:	4bbd      	ldr	r3, [pc, #756]	; (80025c8 <draw_extra_options+0x30c>)
 80022d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d105      	bne.n	80022e8 <draw_extra_options+0x2c>
 80022dc:	4bbb      	ldr	r3, [pc, #748]	; (80025cc <draw_extra_options+0x310>)
 80022de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8111 	beq.w	800250a <draw_extra_options+0x24e>
	{
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80022e8:	2301      	movs	r3, #1
 80022ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022ec:	e015      	b.n	800231a <draw_extra_options+0x5e>
		{
			y_pos[i]=y_pos[i-1]+30;
 80022ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f0:	3b01      	subs	r3, #1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80022f8:	4413      	add	r3, r2
 80022fa:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	331e      	adds	r3, #30
 8002302:	b29b      	uxth	r3, r3
 8002304:	b21a      	sxth	r2, r3
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800230e:	440b      	add	r3, r1
 8002310:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002316:	3301      	adds	r3, #1
 8002318:	66fb      	str	r3, [r7, #108]	; 0x6c
 800231a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231c:	2b06      	cmp	r3, #6
 800231e:	d9e6      	bls.n	80022ee <draw_extra_options+0x32>
		}
		TFT9341_FillScreen(0x0000);
 8002320:	2000      	movs	r0, #0
 8002322:	f002 fdd1 	bl	8004ec8 <TFT9341_FillScreen>
		TFT9341_SetTextColor(0xffff);
 8002326:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800232a:	f002 fe25 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 800232e:	48a8      	ldr	r0, [pc, #672]	; (80025d0 <draw_extra_options+0x314>)
 8002330:	f002 fe42 	bl	8004fb8 <TFT9341_SetFont>



		//sprintf(str,"Overige instellingen");
		//TFT9341_String(x_pos,y_pos[0],str);
		sprintf(str,"Time-out scherm : %s",timeout_vis());
 8002334:	f7fe ff1c 	bl	8001170 <timeout_vis>
 8002338:	4602      	mov	r2, r0
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	49a5      	ldr	r1, [pc, #660]	; (80025d4 <draw_extra_options+0x318>)
 8002340:	4618      	mov	r0, r3
 8002342:	f007 fd6b 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[0],str);
 8002346:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800234a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800234e:	b291      	uxth	r1, r2
 8002350:	f107 0214 	add.w	r2, r7, #20
 8002354:	4618      	mov	r0, r3
 8002356:	f002 feed 	bl	8005134 <TFT9341_String>
		short percentage=screen_brightness/655;
 800235a:	4b9f      	ldr	r3, [pc, #636]	; (80025d8 <draw_extra_options+0x31c>)
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	4b9f      	ldr	r3, [pc, #636]	; (80025dc <draw_extra_options+0x320>)
 8002360:	fba3 1302 	umull	r1, r3, r3, r2
 8002364:	1ad2      	subs	r2, r2, r3
 8002366:	0852      	lsrs	r2, r2, #1
 8002368:	4413      	add	r3, r2
 800236a:	0a5b      	lsrs	r3, r3, #9
 800236c:	b29b      	uxth	r3, r3
 800236e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		sprintf(str,"Schermhelderheid:%d %%",percentage);
 8002372:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4999      	ldr	r1, [pc, #612]	; (80025e0 <draw_extra_options+0x324>)
 800237c:	4618      	mov	r0, r3
 800237e:	f007 fd4d 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[1],str);
 8002382:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002386:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800238a:	b291      	uxth	r1, r2
 800238c:	f107 0214 	add.w	r2, r7, #20
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fecf 	bl	8005134 <TFT9341_String>
		if(sound_feed==1)
 8002396:	4b93      	ldr	r3, [pc, #588]	; (80025e4 <draw_extra_options+0x328>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d010      	beq.n	80023c0 <draw_extra_options+0x104>
		{
			sprintf(str,"Geluid voeren       : AAN");
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4991      	ldr	r1, [pc, #580]	; (80025e8 <draw_extra_options+0x32c>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f007 fd39 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[2],str);
 80023aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80023b2:	b291      	uxth	r1, r2
 80023b4:	f107 0214 	add.w	r2, r7, #20
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 febb 	bl	8005134 <TFT9341_String>
 80023be:	e00f      	b.n	80023e0 <draw_extra_options+0x124>
		}
		else
		{
			sprintf(str,"Geluid voeren       : UIT");
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4989      	ldr	r1, [pc, #548]	; (80025ec <draw_extra_options+0x330>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	f007 fd28 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[2],str);
 80023cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80023d4:	b291      	uxth	r1, r2
 80023d6:	f107 0214 	add.w	r2, r7, #20
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 feaa 	bl	8005134 <TFT9341_String>
		}

		if(food_shake==1)
 80023e0:	4b83      	ldr	r3, [pc, #524]	; (80025f0 <draw_extra_options+0x334>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d010      	beq.n	800240a <draw_extra_options+0x14e>
		{
			sprintf(str,"Trillen voer        : AAN");
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4981      	ldr	r1, [pc, #516]	; (80025f4 <draw_extra_options+0x338>)
 80023ee:	4618      	mov	r0, r3
 80023f0:	f007 fd14 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[3],str);
 80023f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80023fc:	b291      	uxth	r1, r2
 80023fe:	f107 0214 	add.w	r2, r7, #20
 8002402:	4618      	mov	r0, r3
 8002404:	f002 fe96 	bl	8005134 <TFT9341_String>
 8002408:	e00f      	b.n	800242a <draw_extra_options+0x16e>
		}
		else
		{
			sprintf(str,"Trillen voer        : UIT");
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	497a      	ldr	r1, [pc, #488]	; (80025f8 <draw_extra_options+0x33c>)
 8002410:	4618      	mov	r0, r3
 8002412:	f007 fd03 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[3],str);
 8002416:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800241a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800241e:	b291      	uxth	r1, r2
 8002420:	f107 0214 	add.w	r2, r7, #20
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fe85 	bl	8005134 <TFT9341_String>
		}

		if(sound_intensity==0)
 800242a:	4b74      	ldr	r3, [pc, #464]	; (80025fc <draw_extra_options+0x340>)
 800242c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10f      	bne.n	8002454 <draw_extra_options+0x198>
		{
			sprintf(str,"Geluid knoppen      : UIT  ");
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	4971      	ldr	r1, [pc, #452]	; (8002600 <draw_extra_options+0x344>)
 800243a:	4618      	mov	r0, r3
 800243c:	f007 fcee 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 8002440:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002444:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002448:	b291      	uxth	r1, r2
 800244a:	f107 0214 	add.w	r2, r7, #20
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fe70 	bl	8005134 <TFT9341_String>
		}
		if(sound_intensity==1)
 8002454:	4b69      	ldr	r3, [pc, #420]	; (80025fc <draw_extra_options+0x340>)
 8002456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d10f      	bne.n	800247e <draw_extra_options+0x1c2>
		{
			sprintf(str,"Geluid knoppen      : ZACHT");
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4968      	ldr	r1, [pc, #416]	; (8002604 <draw_extra_options+0x348>)
 8002464:	4618      	mov	r0, r3
 8002466:	f007 fcd9 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 800246a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800246e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002472:	b291      	uxth	r1, r2
 8002474:	f107 0214 	add.w	r2, r7, #20
 8002478:	4618      	mov	r0, r3
 800247a:	f002 fe5b 	bl	8005134 <TFT9341_String>
		}
		if(sound_intensity==2)
 800247e:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <draw_extra_options+0x340>)
 8002480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d10f      	bne.n	80024a8 <draw_extra_options+0x1ec>
		{
			sprintf(str,"Geluid knoppen      : NORM ");
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	495e      	ldr	r1, [pc, #376]	; (8002608 <draw_extra_options+0x34c>)
 800248e:	4618      	mov	r0, r3
 8002490:	f007 fcc4 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 8002494:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002498:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800249c:	b291      	uxth	r1, r2
 800249e:	f107 0214 	add.w	r2, r7, #20
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 fe46 	bl	8005134 <TFT9341_String>
		}
		if(sound_intensity==3)
 80024a8:	4b54      	ldr	r3, [pc, #336]	; (80025fc <draw_extra_options+0x340>)
 80024aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d10f      	bne.n	80024d2 <draw_extra_options+0x216>
		{
			sprintf(str,"Geluid knoppen      : HARD ");
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4955      	ldr	r1, [pc, #340]	; (800260c <draw_extra_options+0x350>)
 80024b8:	4618      	mov	r0, r3
 80024ba:	f007 fcaf 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 80024be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80024c6:	b291      	uxth	r1, r2
 80024c8:	f107 0214 	add.w	r2, r7, #20
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 fe31 	bl	8005134 <TFT9341_String>
		}
		//sprintf(str,"Geluid intensiteit  : HOOG");
		//TFT9341_String(x_pos,y_pos[4],str);
		TFT9341_FillRect(x_pos,y_pos[0]+20,x_pos+80,y_pos[0]+22,0xFD60); // draw selection on #0
 80024d2:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
 80024d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3314      	adds	r3, #20
 80024de:	b299      	uxth	r1, r3
 80024e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024e4:	3350      	adds	r3, #80	; 0x50
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3316      	adds	r3, #22
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f64f 5460 	movw	r4, #64864	; 0xfd60
 80024f6:	9400      	str	r4, [sp, #0]
 80024f8:	f002 fc72 	bl	8004de0 <TFT9341_FillRect>
		draw_back();
 80024fc:	f7ff fa5c 	bl	80019b8 <draw_back>
		prev_sub_menu=sub_menu;
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <draw_extra_options+0x308>)
 8002502:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <draw_extra_options+0x30c>)
 8002508:	801a      	strh	r2, [r3, #0]
	if(selection<0)
	{
	selection=6;
	}
	 */
	if(selection_wheel==-1)
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <draw_extra_options+0x354>)
 800250c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d103      	bne.n	800251e <draw_extra_options+0x262>
	{
		limit_selection(0, 5);
 8002516:	2105      	movs	r1, #5
 8002518:	2000      	movs	r0, #0
 800251a:	f7fe fe05 	bl	8001128 <limit_selection>
	}

	if(selection!=prev_selection ||update)
 800251e:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <draw_extra_options+0x358>)
 8002520:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002524:	4b3c      	ldr	r3, [pc, #240]	; (8002618 <draw_extra_options+0x35c>)
 8002526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800252a:	429a      	cmp	r2, r3
 800252c:	d105      	bne.n	800253a <draw_extra_options+0x27e>
 800252e:	4b27      	ldr	r3, [pc, #156]	; (80025cc <draw_extra_options+0x310>)
 8002530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80cd 	beq.w	80026d4 <draw_extra_options+0x418>
	{
		update=0;
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <draw_extra_options+0x310>)
 800253c:	2200      	movs	r2, #0
 800253e:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002540:	2301      	movs	r3, #1
 8002542:	66bb      	str	r3, [r7, #104]	; 0x68
 8002544:	e015      	b.n	8002572 <draw_extra_options+0x2b6>
		{
			y_pos[i]=y_pos[i-1]+30;
 8002546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002548:	3b01      	subs	r3, #1
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002550:	4413      	add	r3, r2
 8002552:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 8002556:	b29b      	uxth	r3, r3
 8002558:	331e      	adds	r3, #30
 800255a:	b29b      	uxth	r3, r3
 800255c:	b21a      	sxth	r2, r3
 800255e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002566:	440b      	add	r3, r1
 8002568:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 800256c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800256e:	3301      	adds	r3, #1
 8002570:	66bb      	str	r3, [r7, #104]	; 0x68
 8002572:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002574:	2b06      	cmp	r3, #6
 8002576:	d9e6      	bls.n	8002546 <draw_extra_options+0x28a>
		}

		if(selection!=5)
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <draw_extra_options+0x358>)
 800257a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800257e:	2b05      	cmp	r3, #5
 8002580:	d00b      	beq.n	800259a <draw_extra_options+0x2de>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0x0000);
 8002582:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002586:	3328      	adds	r3, #40	; 0x28
 8002588:	b29a      	uxth	r2, r3
 800258a:	2300      	movs	r3, #0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	23e1      	movs	r3, #225	; 0xe1
 8002590:	21df      	movs	r1, #223	; 0xdf
 8002592:	200f      	movs	r0, #15
 8002594:	f002 fc24 	bl	8004de0 <TFT9341_FillRect>
 8002598:	e011      	b.n	80025be <draw_extra_options+0x302>
		}
		else if(selection_wheel==-1)
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <draw_extra_options+0x354>)
 800259c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d10b      	bne.n	80025be <draw_extra_options+0x302>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0xFD60);
 80025a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025aa:	3328      	adds	r3, #40	; 0x28
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	f64f 5360 	movw	r3, #64864	; 0xfd60
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	23e1      	movs	r3, #225	; 0xe1
 80025b6:	21df      	movs	r1, #223	; 0xdf
 80025b8:	200f      	movs	r0, #15
 80025ba:	f002 fc11 	bl	8004de0 <TFT9341_FillRect>
		}
		for(int i=0;i<5;i++)
 80025be:	2300      	movs	r3, #0
 80025c0:	667b      	str	r3, [r7, #100]	; 0x64
 80025c2:	e079      	b.n	80026b8 <draw_extra_options+0x3fc>
 80025c4:	2000070a 	.word	0x2000070a
 80025c8:	2000070c 	.word	0x2000070c
 80025cc:	200008bc 	.word	0x200008bc
 80025d0:	2000000c 	.word	0x2000000c
 80025d4:	0800a7d4 	.word	0x0800a7d4
 80025d8:	2000070e 	.word	0x2000070e
 80025dc:	903847eb 	.word	0x903847eb
 80025e0:	0800a7ec 	.word	0x0800a7ec
 80025e4:	20000716 	.word	0x20000716
 80025e8:	0800a804 	.word	0x0800a804
 80025ec:	0800a820 	.word	0x0800a820
 80025f0:	20000717 	.word	0x20000717
 80025f4:	0800a83c 	.word	0x0800a83c
 80025f8:	0800a858 	.word	0x0800a858
 80025fc:	20000718 	.word	0x20000718
 8002600:	0800a874 	.word	0x0800a874
 8002604:	0800a890 	.word	0x0800a890
 8002608:	0800a8ac 	.word	0x0800a8ac
 800260c:	0800a8c8 	.word	0x0800a8c8
 8002610:	20000714 	.word	0x20000714
 8002614:	20000ab0 	.word	0x20000ab0
 8002618:	20000b80 	.word	0x20000b80
		{
			if(selection!=i)
 800261c:	4b9d      	ldr	r3, [pc, #628]	; (8002894 <draw_extra_options+0x5d8>)
 800261e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002622:	461a      	mov	r2, r3
 8002624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002626:	4293      	cmp	r3, r2
 8002628:	d01e      	beq.n	8002668 <draw_extra_options+0x3ac>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0x0000);
 800262a:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
 800262e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002636:	4413      	add	r3, r2
 8002638:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 800263c:	b29b      	uxth	r3, r3
 800263e:	3314      	adds	r3, #20
 8002640:	b299      	uxth	r1, r3
 8002642:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002646:	3350      	adds	r3, #80	; 0x50
 8002648:	b29a      	uxth	r2, r3
 800264a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002652:	4423      	add	r3, r4
 8002654:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 8002658:	b29b      	uxth	r3, r3
 800265a:	3316      	adds	r3, #22
 800265c:	b29b      	uxth	r3, r3
 800265e:	2400      	movs	r4, #0
 8002660:	9400      	str	r4, [sp, #0]
 8002662:	f002 fbbd 	bl	8004de0 <TFT9341_FillRect>
 8002666:	e024      	b.n	80026b2 <draw_extra_options+0x3f6>
			}
			else if(selection_wheel==-1)
 8002668:	4b8b      	ldr	r3, [pc, #556]	; (8002898 <draw_extra_options+0x5dc>)
 800266a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d11e      	bne.n	80026b2 <draw_extra_options+0x3f6>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0xFD60);
 8002674:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
 8002678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002680:	4413      	add	r3, r2
 8002682:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 8002686:	b29b      	uxth	r3, r3
 8002688:	3314      	adds	r3, #20
 800268a:	b299      	uxth	r1, r3
 800268c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002690:	3350      	adds	r3, #80	; 0x50
 8002692:	b29a      	uxth	r2, r3
 8002694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800269c:	4423      	add	r3, r4
 800269e:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3316      	adds	r3, #22
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f64f 5460 	movw	r4, #64864	; 0xfd60
 80026ac:	9400      	str	r4, [sp, #0]
 80026ae:	f002 fb97 	bl	8004de0 <TFT9341_FillRect>
		for(int i=0;i<5;i++)
 80026b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026b4:	3301      	adds	r3, #1
 80026b6:	667b      	str	r3, [r7, #100]	; 0x64
 80026b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	ddae      	ble.n	800261c <draw_extra_options+0x360>
			}
		}
		if(selection_wheel==-1)
 80026be:	4b76      	ldr	r3, [pc, #472]	; (8002898 <draw_extra_options+0x5dc>)
 80026c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d104      	bne.n	80026d4 <draw_extra_options+0x418>
		{
			prev_selection=selection;
 80026ca:	4b72      	ldr	r3, [pc, #456]	; (8002894 <draw_extra_options+0x5d8>)
 80026cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026d0:	4b72      	ldr	r3, [pc, #456]	; (800289c <draw_extra_options+0x5e0>)
 80026d2:	801a      	strh	r2, [r3, #0]
	}


	//---------- selection_wheel -------------------

	if(selection!=prev_selection && selection_wheel==0) //time_out
 80026d4:	4b6f      	ldr	r3, [pc, #444]	; (8002894 <draw_extra_options+0x5d8>)
 80026d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026da:	4b70      	ldr	r3, [pc, #448]	; (800289c <draw_extra_options+0x5e0>)
 80026dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d052      	beq.n	800278a <draw_extra_options+0x4ce>
 80026e4:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <draw_extra_options+0x5dc>)
 80026e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d14d      	bne.n	800278a <draw_extra_options+0x4ce>
	{
		prev_selection=selection;
 80026ee:	4b69      	ldr	r3, [pc, #420]	; (8002894 <draw_extra_options+0x5d8>)
 80026f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026f4:	4b69      	ldr	r3, [pc, #420]	; (800289c <draw_extra_options+0x5e0>)
 80026f6:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80026f8:	2301      	movs	r3, #1
 80026fa:	663b      	str	r3, [r7, #96]	; 0x60
 80026fc:	e015      	b.n	800272a <draw_extra_options+0x46e>
		{
			y_pos[i]=y_pos[i-1]+30;
 80026fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002700:	3b01      	subs	r3, #1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002708:	4413      	add	r3, r2
 800270a:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 800270e:	b29b      	uxth	r3, r3
 8002710:	331e      	adds	r3, #30
 8002712:	b29b      	uxth	r3, r3
 8002714:	b21a      	sxth	r2, r3
 8002716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800271e:	440b      	add	r3, r1
 8002720:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002726:	3301      	adds	r3, #1
 8002728:	663b      	str	r3, [r7, #96]	; 0x60
 800272a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272c:	2b06      	cmp	r3, #6
 800272e:	d9e6      	bls.n	80026fe <draw_extra_options+0x442>
		}

		limit_selection(0,4);
 8002730:	2104      	movs	r1, #4
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fcf8 	bl	8001128 <limit_selection>
		time_out=selection;
 8002738:	4b56      	ldr	r3, [pc, #344]	; (8002894 <draw_extra_options+0x5d8>)
 800273a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800273e:	4b58      	ldr	r3, [pc, #352]	; (80028a0 <draw_extra_options+0x5e4>)
 8002740:	801a      	strh	r2, [r3, #0]
		TFT9341_FillRect(220,y_pos[0]+20,250,y_pos[0]+22,0xf000);
 8002742:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002746:	b29b      	uxth	r3, r3
 8002748:	3314      	adds	r3, #20
 800274a:	b299      	uxth	r1, r3
 800274c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002750:	b29b      	uxth	r3, r3
 8002752:	3316      	adds	r3, #22
 8002754:	b29b      	uxth	r3, r3
 8002756:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800275a:	9200      	str	r2, [sp, #0]
 800275c:	22fa      	movs	r2, #250	; 0xfa
 800275e:	20dc      	movs	r0, #220	; 0xdc
 8002760:	f002 fb3e 	bl	8004de0 <TFT9341_FillRect>
		sprintf(str,"Time-out scherm : %s",timeout_vis());
 8002764:	f7fe fd04 	bl	8001170 <timeout_vis>
 8002768:	4602      	mov	r2, r0
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	494d      	ldr	r1, [pc, #308]	; (80028a4 <draw_extra_options+0x5e8>)
 8002770:	4618      	mov	r0, r3
 8002772:	f007 fb53 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[0],str);
 8002776:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800277a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800277e:	b291      	uxth	r1, r2
 8002780:	f107 0214 	add.w	r2, r7, #20
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fcd5 	bl	8005134 <TFT9341_String>

	}
	if(selection!=prev_selection && selection_wheel==1)
 800278a:	4b42      	ldr	r3, [pc, #264]	; (8002894 <draw_extra_options+0x5d8>)
 800278c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002790:	4b42      	ldr	r3, [pc, #264]	; (800289c <draw_extra_options+0x5e0>)
 8002792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002796:	429a      	cmp	r2, r3
 8002798:	d065      	beq.n	8002866 <draw_extra_options+0x5aa>
 800279a:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <draw_extra_options+0x5dc>)
 800279c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d160      	bne.n	8002866 <draw_extra_options+0x5aa>
	{
		prev_selection=selection;
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <draw_extra_options+0x5d8>)
 80027a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027aa:	4b3c      	ldr	r3, [pc, #240]	; (800289c <draw_extra_options+0x5e0>)
 80027ac:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80027ae:	2301      	movs	r3, #1
 80027b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027b2:	e015      	b.n	80027e0 <draw_extra_options+0x524>
		{
			y_pos[i]=y_pos[i-1]+30;
 80027b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b6:	3b01      	subs	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80027be:	4413      	add	r3, r2
 80027c0:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	331e      	adds	r3, #30
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	b21a      	sxth	r2, r3
 80027cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80027d4:	440b      	add	r3, r1
 80027d6:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80027da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027dc:	3301      	adds	r3, #1
 80027de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d9e6      	bls.n	80027b4 <draw_extra_options+0x4f8>
		}

		limit_selection(1, 20);
 80027e6:	2114      	movs	r1, #20
 80027e8:	2001      	movs	r0, #1
 80027ea:	f7fe fc9d 	bl	8001128 <limit_selection>
		TIM1->CCR1=(65500/20)*selection;
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <draw_extra_options+0x5d8>)
 80027f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f4:	461a      	mov	r2, r3
 80027f6:	f640 43cb 	movw	r3, #3275	; 0xccb
 80027fa:	fb03 f202 	mul.w	r2, r3, r2
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <draw_extra_options+0x5ec>)
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
		screen_brightness=(65500/20)*selection;
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <draw_extra_options+0x5d8>)
 8002804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002808:	b29b      	uxth	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	0192      	lsls	r2, r2, #6
 800280e:	441a      	add	r2, r3
 8002810:	0052      	lsls	r2, r2, #1
 8002812:	4413      	add	r3, r2
 8002814:	461a      	mov	r2, r3
 8002816:	0091      	lsls	r1, r2, #2
 8002818:	461a      	mov	r2, r3
 800281a:	460b      	mov	r3, r1
 800281c:	4413      	add	r3, r2
 800281e:	461a      	mov	r2, r3
 8002820:	0091      	lsls	r1, r2, #2
 8002822:	461a      	mov	r2, r3
 8002824:	460b      	mov	r3, r1
 8002826:	4413      	add	r3, r2
 8002828:	b29a      	uxth	r2, r3
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <draw_extra_options+0x5f0>)
 800282c:	801a      	strh	r2, [r3, #0]
		//sprintf(str,"%d",screen_brightness);
		//TFT9341_String(250,200,str);
		int percentage=screen_brightness/655;
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <draw_extra_options+0x5f0>)
 8002830:	881a      	ldrh	r2, [r3, #0]
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <draw_extra_options+0x5f4>)
 8002834:	fba3 1302 	umull	r1, r3, r3, r2
 8002838:	1ad2      	subs	r2, r2, r3
 800283a:	0852      	lsrs	r2, r2, #1
 800283c:	4413      	add	r3, r2
 800283e:	0a5b      	lsrs	r3, r3, #9
 8002840:	b29b      	uxth	r3, r3
 8002842:	64bb      	str	r3, [r7, #72]	; 0x48

		sprintf(str,"Schermhelderheid:%d %%   ",percentage);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800284a:	491a      	ldr	r1, [pc, #104]	; (80028b4 <draw_extra_options+0x5f8>)
 800284c:	4618      	mov	r0, r3
 800284e:	f007 fae5 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[1],str);
 8002852:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002856:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800285a:	b291      	uxth	r1, r2
 800285c:	f107 0214 	add.w	r2, r7, #20
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fc67 	bl	8005134 <TFT9341_String>

	}
	if(selection!=prev_selection && selection_wheel==2) // geluid bij voeren
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <draw_extra_options+0x5d8>)
 8002868:	f9b3 2000 	ldrsh.w	r2, [r3]
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <draw_extra_options+0x5e0>)
 800286e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002872:	429a      	cmp	r2, r3
 8002874:	f000 8086 	beq.w	8002984 <draw_extra_options+0x6c8>
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <draw_extra_options+0x5dc>)
 800287a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287e:	2b02      	cmp	r3, #2
 8002880:	f040 8080 	bne.w	8002984 <draw_extra_options+0x6c8>
	{
		prev_selection=selection;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <draw_extra_options+0x5d8>)
 8002886:	f9b3 2000 	ldrsh.w	r2, [r3]
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <draw_extra_options+0x5e0>)
 800288c:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 800288e:	2301      	movs	r3, #1
 8002890:	65bb      	str	r3, [r7, #88]	; 0x58
 8002892:	e027      	b.n	80028e4 <draw_extra_options+0x628>
 8002894:	20000ab0 	.word	0x20000ab0
 8002898:	20000714 	.word	0x20000714
 800289c:	20000b80 	.word	0x20000b80
 80028a0:	2000071a 	.word	0x2000071a
 80028a4:	0800a7d4 	.word	0x0800a7d4
 80028a8:	40010000 	.word	0x40010000
 80028ac:	2000070e 	.word	0x2000070e
 80028b0:	903847eb 	.word	0x903847eb
 80028b4:	0800a8e4 	.word	0x0800a8e4
		{
			y_pos[i]=y_pos[i-1]+30;
 80028b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ba:	3b01      	subs	r3, #1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80028c2:	4413      	add	r3, r2
 80028c4:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	331e      	adds	r3, #30
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	b21a      	sxth	r2, r3
 80028d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80028d8:	440b      	add	r3, r1
 80028da:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80028de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e0:	3301      	adds	r3, #1
 80028e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80028e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d9e6      	bls.n	80028b8 <draw_extra_options+0x5fc>
		}

		limit_selection(0,1);
 80028ea:	2101      	movs	r1, #1
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7fe fc1b 	bl	8001128 <limit_selection>
		sound_feed=selection;
 80028f2:	4bb7      	ldr	r3, [pc, #732]	; (8002bd0 <draw_extra_options+0x914>)
 80028f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4bb4      	ldr	r3, [pc, #720]	; (8002bd4 <draw_extra_options+0x918>)
 8002904:	701a      	strb	r2, [r3, #0]
		TFT9341_FillRect(258,y_pos[2]+20,288,y_pos[2]+22,0xf000);
 8002906:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800290a:	b29b      	uxth	r3, r3
 800290c:	3314      	adds	r3, #20
 800290e:	b299      	uxth	r1, r3
 8002910:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002914:	b29b      	uxth	r3, r3
 8002916:	3316      	adds	r3, #22
 8002918:	b29b      	uxth	r3, r3
 800291a:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800291e:	9200      	str	r2, [sp, #0]
 8002920:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002924:	f44f 7081 	mov.w	r0, #258	; 0x102
 8002928:	f002 fa5a 	bl	8004de0 <TFT9341_FillRect>

		TFT9341_SetTextColor(0xffff);
 800292c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002930:	f002 fb22 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8002934:	48a8      	ldr	r0, [pc, #672]	; (8002bd8 <draw_extra_options+0x91c>)
 8002936:	f002 fb3f 	bl	8004fb8 <TFT9341_SetFont>

		if(sound_feed==1)
 800293a:	4ba6      	ldr	r3, [pc, #664]	; (8002bd4 <draw_extra_options+0x918>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d010      	beq.n	8002964 <draw_extra_options+0x6a8>
		{
			sprintf(str,"Geluid voeren       : AAN");
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	49a5      	ldr	r1, [pc, #660]	; (8002bdc <draw_extra_options+0x920>)
 8002948:	4618      	mov	r0, r3
 800294a:	f007 fa67 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[2],str);
 800294e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002952:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002956:	b291      	uxth	r1, r2
 8002958:	f107 0214 	add.w	r2, r7, #20
 800295c:	4618      	mov	r0, r3
 800295e:	f002 fbe9 	bl	8005134 <TFT9341_String>
 8002962:	e00f      	b.n	8002984 <draw_extra_options+0x6c8>
		}
		else
		{
			sprintf(str,"Geluid voeren       : UIT");
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	499d      	ldr	r1, [pc, #628]	; (8002be0 <draw_extra_options+0x924>)
 800296a:	4618      	mov	r0, r3
 800296c:	f007 fa56 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[2],str);
 8002970:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002974:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002978:	b291      	uxth	r1, r2
 800297a:	f107 0214 	add.w	r2, r7, #20
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fbd8 	bl	8005134 <TFT9341_String>
		}

	}
	if(selection!=prev_selection && selection_wheel==3) // geluid bij knoppen
 8002984:	4b92      	ldr	r3, [pc, #584]	; (8002bd0 <draw_extra_options+0x914>)
 8002986:	f9b3 2000 	ldrsh.w	r2, [r3]
 800298a:	4b96      	ldr	r3, [pc, #600]	; (8002be4 <draw_extra_options+0x928>)
 800298c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002990:	429a      	cmp	r2, r3
 8002992:	d072      	beq.n	8002a7a <draw_extra_options+0x7be>
 8002994:	4b94      	ldr	r3, [pc, #592]	; (8002be8 <draw_extra_options+0x92c>)
 8002996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d16d      	bne.n	8002a7a <draw_extra_options+0x7be>
	{
		prev_selection=selection;
 800299e:	4b8c      	ldr	r3, [pc, #560]	; (8002bd0 <draw_extra_options+0x914>)
 80029a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029a4:	4b8f      	ldr	r3, [pc, #572]	; (8002be4 <draw_extra_options+0x928>)
 80029a6:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80029a8:	2301      	movs	r3, #1
 80029aa:	657b      	str	r3, [r7, #84]	; 0x54
 80029ac:	e015      	b.n	80029da <draw_extra_options+0x71e>
		{
			y_pos[i]=y_pos[i-1]+30;
 80029ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b0:	3b01      	subs	r3, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80029b8:	4413      	add	r3, r2
 80029ba:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	331e      	adds	r3, #30
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80029ce:	440b      	add	r3, r1
 80029d0:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80029d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d6:	3301      	adds	r3, #1
 80029d8:	657b      	str	r3, [r7, #84]	; 0x54
 80029da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029dc:	2b06      	cmp	r3, #6
 80029de:	d9e6      	bls.n	80029ae <draw_extra_options+0x6f2>
		}

		limit_selection(0,1);
 80029e0:	2101      	movs	r1, #1
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fe fba0 	bl	8001128 <limit_selection>
		food_shake=selection;
 80029e8:	4b79      	ldr	r3, [pc, #484]	; (8002bd0 <draw_extra_options+0x914>)
 80029ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	4b7c      	ldr	r3, [pc, #496]	; (8002bec <draw_extra_options+0x930>)
 80029fa:	701a      	strb	r2, [r3, #0]
		TFT9341_FillRect(258,y_pos[3]+20,288,y_pos[3]+22,0xf000);
 80029fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3314      	adds	r3, #20
 8002a04:	b299      	uxth	r1, r3
 8002a06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3316      	adds	r3, #22
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8002a14:	9200      	str	r2, [sp, #0]
 8002a16:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002a1a:	f44f 7081 	mov.w	r0, #258	; 0x102
 8002a1e:	f002 f9df 	bl	8004de0 <TFT9341_FillRect>

		TFT9341_SetTextColor(0xffff);
 8002a22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a26:	f002 faa7 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8002a2a:	486b      	ldr	r0, [pc, #428]	; (8002bd8 <draw_extra_options+0x91c>)
 8002a2c:	f002 fac4 	bl	8004fb8 <TFT9341_SetFont>

		if(food_shake==1)
 8002a30:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <draw_extra_options+0x930>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d010      	beq.n	8002a5a <draw_extra_options+0x79e>
		{
			sprintf(str,"Trillen voer        : AAN");
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	496c      	ldr	r1, [pc, #432]	; (8002bf0 <draw_extra_options+0x934>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f007 f9ec 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[3],str);
 8002a44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a48:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a4c:	b291      	uxth	r1, r2
 8002a4e:	f107 0214 	add.w	r2, r7, #20
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 fb6e 	bl	8005134 <TFT9341_String>
 8002a58:	e00f      	b.n	8002a7a <draw_extra_options+0x7be>
		}
		else
		{
			sprintf(str,"Trillen voer        : UIT");
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4965      	ldr	r1, [pc, #404]	; (8002bf4 <draw_extra_options+0x938>)
 8002a60:	4618      	mov	r0, r3
 8002a62:	f007 f9db 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[3],str);
 8002a66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a6a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a6e:	b291      	uxth	r1, r2
 8002a70:	f107 0214 	add.w	r2, r7, #20
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fb5d 	bl	8005134 <TFT9341_String>
		}

	}
	if(selection!=prev_selection && selection_wheel==4) // geluidintensiteit
 8002a7a:	4b55      	ldr	r3, [pc, #340]	; (8002bd0 <draw_extra_options+0x914>)
 8002a7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a80:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <draw_extra_options+0x928>)
 8002a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	f000 809e 	beq.w	8002bc8 <draw_extra_options+0x90c>
 8002a8c:	4b56      	ldr	r3, [pc, #344]	; (8002be8 <draw_extra_options+0x92c>)
 8002a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	f040 8098 	bne.w	8002bc8 <draw_extra_options+0x90c>
	{
		prev_selection=selection;
 8002a98:	4b4d      	ldr	r3, [pc, #308]	; (8002bd0 <draw_extra_options+0x914>)
 8002a9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a9e:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <draw_extra_options+0x928>)
 8002aa0:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	653b      	str	r3, [r7, #80]	; 0x50
 8002aa6:	e015      	b.n	8002ad4 <draw_extra_options+0x818>
		{
			y_pos[i]=y_pos[i-1]+30;
 8002aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	331e      	adds	r3, #30
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	b21a      	sxth	r2, r3
 8002ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002ac8:	440b      	add	r3, r1
 8002aca:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d9e6      	bls.n	8002aa8 <draw_extra_options+0x7ec>
		}

		limit_selection(0,3);
 8002ada:	2103      	movs	r1, #3
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7fe fb23 	bl	8001128 <limit_selection>
		sound_intensity=selection;
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <draw_extra_options+0x914>)
 8002ae4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ae8:	4b43      	ldr	r3, [pc, #268]	; (8002bf8 <draw_extra_options+0x93c>)
 8002aea:	801a      	strh	r2, [r3, #0]
		TFT9341_FillRect(258,y_pos[4 ]+20,288,y_pos[4]+22,0xf000);
 8002aec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3314      	adds	r3, #20
 8002af4:	b299      	uxth	r1, r3
 8002af6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3316      	adds	r3, #22
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8002b04:	9200      	str	r2, [sp, #0]
 8002b06:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002b0a:	f44f 7081 	mov.w	r0, #258	; 0x102
 8002b0e:	f002 f967 	bl	8004de0 <TFT9341_FillRect>

		TFT9341_SetTextColor(0xffff);
 8002b12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b16:	f002 fa2f 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8002b1a:	482f      	ldr	r0, [pc, #188]	; (8002bd8 <draw_extra_options+0x91c>)
 8002b1c:	f002 fa4c 	bl	8004fb8 <TFT9341_SetFont>

		if(sound_intensity==0)
 8002b20:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <draw_extra_options+0x93c>)
 8002b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10f      	bne.n	8002b4a <draw_extra_options+0x88e>
		{
			sprintf(str,"Geluid knoppen      : UIT  ");
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4933      	ldr	r1, [pc, #204]	; (8002bfc <draw_extra_options+0x940>)
 8002b30:	4618      	mov	r0, r3
 8002b32:	f007 f973 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 8002b36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b3e:	b291      	uxth	r1, r2
 8002b40:	f107 0214 	add.w	r2, r7, #20
 8002b44:	4618      	mov	r0, r3
 8002b46:	f002 faf5 	bl	8005134 <TFT9341_String>
		}
		if(sound_intensity==1)
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <draw_extra_options+0x93c>)
 8002b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d10f      	bne.n	8002b74 <draw_extra_options+0x8b8>
		{
			sprintf(str,"Geluid knoppen      : ZACHT");
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4929      	ldr	r1, [pc, #164]	; (8002c00 <draw_extra_options+0x944>)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f007 f95e 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 8002b60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b64:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b68:	b291      	uxth	r1, r2
 8002b6a:	f107 0214 	add.w	r2, r7, #20
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fae0 	bl	8005134 <TFT9341_String>
		}
		if(sound_intensity==2)
 8002b74:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <draw_extra_options+0x93c>)
 8002b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d10f      	bne.n	8002b9e <draw_extra_options+0x8e2>
		{
			sprintf(str,"Geluid knoppen      : NORM ");
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4920      	ldr	r1, [pc, #128]	; (8002c04 <draw_extra_options+0x948>)
 8002b84:	4618      	mov	r0, r3
 8002b86:	f007 f949 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 8002b8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b8e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b92:	b291      	uxth	r1, r2
 8002b94:	f107 0214 	add.w	r2, r7, #20
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 facb 	bl	8005134 <TFT9341_String>
		}
		if(sound_intensity==3)
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <draw_extra_options+0x93c>)
 8002ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d10f      	bne.n	8002bc8 <draw_extra_options+0x90c>
		{
			sprintf(str,"Geluid knoppen      : HARD ");
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4916      	ldr	r1, [pc, #88]	; (8002c08 <draw_extra_options+0x94c>)
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f007 f934 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 8002bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bb8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002bbc:	b291      	uxth	r1, r2
 8002bbe:	f107 0214 	add.w	r2, r7, #20
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 fab6 	bl	8005134 <TFT9341_String>

	//TFT9341_DrawRect(0xffff,5,235,5+60,235-42);



}
 8002bc8:	bf00      	nop
 8002bca:	3774      	adds	r7, #116	; 0x74
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd90      	pop	{r4, r7, pc}
 8002bd0:	20000ab0 	.word	0x20000ab0
 8002bd4:	20000716 	.word	0x20000716
 8002bd8:	2000000c 	.word	0x2000000c
 8002bdc:	0800a804 	.word	0x0800a804
 8002be0:	0800a820 	.word	0x0800a820
 8002be4:	20000b80 	.word	0x20000b80
 8002be8:	20000714 	.word	0x20000714
 8002bec:	20000717 	.word	0x20000717
 8002bf0:	0800a83c 	.word	0x0800a83c
 8002bf4:	0800a858 	.word	0x0800a858
 8002bf8:	20000718 	.word	0x20000718
 8002bfc:	0800a874 	.word	0x0800a874
 8002c00:	0800a890 	.word	0x0800a890
 8002c04:	0800a8ac 	.word	0x0800a8ac
 8002c08:	0800a8c8 	.word	0x0800a8c8

08002c0c <draw_options>:

void draw_options()
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b097      	sub	sp, #92	; 0x5c
 8002c10:	af02      	add	r7, sp, #8

	char str[50];
	short x_pos=15;
 8002c12:	230f      	movs	r3, #15
 8002c14:	87fb      	strh	r3, [r7, #62]	; 0x3e
	short y_pos[6];
	y_pos[0]=20;
 8002c16:	2314      	movs	r3, #20
 8002c18:	803b      	strh	r3, [r7, #0]
	if(menu!=prev_menu || sub_menu!=prev_sub_menu || update)
 8002c1a:	4bb1      	ldr	r3, [pc, #708]	; (8002ee0 <draw_options+0x2d4>)
 8002c1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c20:	4bb0      	ldr	r3, [pc, #704]	; (8002ee4 <draw_options+0x2d8>)
 8002c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d10d      	bne.n	8002c46 <draw_options+0x3a>
 8002c2a:	4baf      	ldr	r3, [pc, #700]	; (8002ee8 <draw_options+0x2dc>)
 8002c2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c30:	4bae      	ldr	r3, [pc, #696]	; (8002eec <draw_options+0x2e0>)
 8002c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d105      	bne.n	8002c46 <draw_options+0x3a>
 8002c3a:	4bad      	ldr	r3, [pc, #692]	; (8002ef0 <draw_options+0x2e4>)
 8002c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8096 	beq.w	8002d72 <draw_options+0x166>
	{
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002c46:	2301      	movs	r3, #1
 8002c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c4a:	e015      	b.n	8002c78 <draw_options+0x6c>
				{
					y_pos[i]=y_pos[i-1]+30;
 8002c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c56:	4413      	add	r3, r2
 8002c58:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	331e      	adds	r3, #30
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b21a      	sxth	r2, r3
 8002c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f823 2c50 	strh.w	r2, [r3, #-80]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c74:	3301      	adds	r3, #1
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d9e6      	bls.n	8002c4c <draw_options+0x40>
				}
		update=0;
 8002c7e:	4b9c      	ldr	r3, [pc, #624]	; (8002ef0 <draw_options+0x2e4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	801a      	strh	r2, [r3, #0]
		selection=0;
 8002c84:	4b9b      	ldr	r3, [pc, #620]	; (8002ef4 <draw_options+0x2e8>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	801a      	strh	r2, [r3, #0]
		TFT9341_FillScreen(0x0000);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f002 f91c 	bl	8004ec8 <TFT9341_FillScreen>
		TFT9341_SetTextColor(0xffff);
 8002c90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c94:	f002 f970 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8002c98:	4897      	ldr	r0, [pc, #604]	; (8002ef8 <draw_options+0x2ec>)
 8002c9a:	f002 f98d 	bl	8004fb8 <TFT9341_SetFont>



		sprintf(str,"Voertijden/hoeveelheden");
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	4996      	ldr	r1, [pc, #600]	; (8002efc <draw_options+0x2f0>)
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f007 f8b9 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[0],str);
 8002caa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002cac:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002cb0:	b291      	uxth	r1, r2
 8002cb2:	f107 020c 	add.w	r2, r7, #12
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 fa3c 	bl	8005134 <TFT9341_String>
		sprintf(str,"Calibreer voerhoeveelheid");
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	498f      	ldr	r1, [pc, #572]	; (8002f00 <draw_options+0x2f4>)
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f007 f8aa 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[1],str);
 8002cc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002cca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002cce:	b291      	uxth	r1, r2
 8002cd0:	f107 020c 	add.w	r2, r7, #12
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 fa2d 	bl	8005134 <TFT9341_String>
		sprintf(str,"Tijd instellen");
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	4989      	ldr	r1, [pc, #548]	; (8002f04 <draw_options+0x2f8>)
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f007 f89b 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[2],str);
 8002ce6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002ce8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002cec:	b291      	uxth	r1, r2
 8002cee:	f107 020c 	add.w	r2, r7, #12
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 fa1e 	bl	8005134 <TFT9341_String>
		sprintf(str,"Overige instellingen");
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	4982      	ldr	r1, [pc, #520]	; (8002f08 <draw_options+0x2fc>)
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f007 f88c 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[3],str);
 8002d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d0a:	b291      	uxth	r1, r2
 8002d0c:	f107 020c 	add.w	r2, r7, #12
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 fa0f 	bl	8005134 <TFT9341_String>
		sprintf(str,"Instellingen opslaan");
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	497c      	ldr	r1, [pc, #496]	; (8002f0c <draw_options+0x300>)
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f007 f87d 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[4],str);
 8002d22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d24:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d28:	b291      	uxth	r1, r2
 8002d2a:	f107 020c 	add.w	r2, r7, #12
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fa00 	bl	8005134 <TFT9341_String>

		TFT9341_FillRect(x_pos,y_pos[0]+20,x_pos+80,y_pos[0]+22,0xFD60);
 8002d34:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8002d36:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3314      	adds	r3, #20
 8002d3e:	b299      	uxth	r1, r3
 8002d40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d42:	3350      	adds	r3, #80	; 0x50
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3316      	adds	r3, #22
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f64f 5460 	movw	r4, #64864	; 0xfd60
 8002d54:	9400      	str	r4, [sp, #0]
 8002d56:	f002 f843 	bl	8004de0 <TFT9341_FillRect>
		draw_back();
 8002d5a:	f7fe fe2d 	bl	80019b8 <draw_back>

		//draw only once
		prev_menu=menu;
 8002d5e:	4b60      	ldr	r3, [pc, #384]	; (8002ee0 <draw_options+0x2d4>)
 8002d60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d64:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <draw_options+0x2d8>)
 8002d66:	801a      	strh	r2, [r3, #0]
		prev_sub_menu=sub_menu;
 8002d68:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <draw_options+0x2dc>)
 8002d6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d6e:	4b5f      	ldr	r3, [pc, #380]	; (8002eec <draw_options+0x2e0>)
 8002d70:	801a      	strh	r2, [r3, #0]
	}




	if(selection!=prev_selection)
 8002d72:	4b60      	ldr	r3, [pc, #384]	; (8002ef4 <draw_options+0x2e8>)
 8002d74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d78:	4b65      	ldr	r3, [pc, #404]	; (8002f10 <draw_options+0x304>)
 8002d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	f000 80aa 	beq.w	8002ed8 <draw_options+0x2cc>
	{
		prev_selection=selection;
 8002d84:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <draw_options+0x2e8>)
 8002d86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d8a:	4b61      	ldr	r3, [pc, #388]	; (8002f10 <draw_options+0x304>)
 8002d8c:	801a      	strh	r2, [r3, #0]
		limit_selection(0, 5);
 8002d8e:	2105      	movs	r1, #5
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fe f9c9 	bl	8001128 <limit_selection>
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002d96:	2301      	movs	r3, #1
 8002d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d9a:	e015      	b.n	8002dc8 <draw_options+0x1bc>
				{
					y_pos[i]=y_pos[i-1]+30;
 8002d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002da6:	4413      	add	r3, r2
 8002da8:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	331e      	adds	r3, #30
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002dbc:	440b      	add	r3, r1
 8002dbe:	f823 2c50 	strh.w	r2, [r3, #-80]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d9e6      	bls.n	8002d9c <draw_options+0x190>
				}
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002dce:	2301      	movs	r3, #1
 8002dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd2:	e015      	b.n	8002e00 <draw_options+0x1f4>
		{
			y_pos[i]=y_pos[i-1]+30;
 8002dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002dde:	4413      	add	r3, r2
 8002de0:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	331e      	adds	r3, #30
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002df4:	440b      	add	r3, r1
 8002df6:	f823 2c50 	strh.w	r2, [r3, #-80]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8002e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d9e6      	bls.n	8002dd4 <draw_options+0x1c8>
		}

		if(selection==5)
 8002e06:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <draw_options+0x2e8>)
 8002e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d10a      	bne.n	8002e26 <draw_options+0x21a>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0xFD60);
 8002e10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e12:	3328      	adds	r3, #40	; 0x28
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	23e1      	movs	r3, #225	; 0xe1
 8002e1e:	21df      	movs	r1, #223	; 0xdf
 8002e20:	200f      	movs	r0, #15
 8002e22:	f001 ffdd 	bl	8004de0 <TFT9341_FillRect>
		}
		if(selection!=5)
 8002e26:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <draw_options+0x2e8>)
 8002e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d009      	beq.n	8002e44 <draw_options+0x238>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0x0000);
 8002e30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e32:	3328      	adds	r3, #40	; 0x28
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	23e1      	movs	r3, #225	; 0xe1
 8002e3c:	21df      	movs	r1, #223	; 0xdf
 8002e3e:	200f      	movs	r0, #15
 8002e40:	f001 ffce 	bl	8004de0 <TFT9341_FillRect>
		}
		for(int i=0;i<((sizeof (y_pos))/(sizeof (short)))-1;i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	643b      	str	r3, [r7, #64]	; 0x40
 8002e48:	e043      	b.n	8002ed2 <draw_options+0x2c6>
		{
			if(selection!=i)
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <draw_options+0x2e8>)
 8002e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e50:	461a      	mov	r2, r3
 8002e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d01c      	beq.n	8002e92 <draw_options+0x286>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0x0000);
 8002e58:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8002e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e62:	4413      	add	r3, r2
 8002e64:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	b299      	uxth	r1, r3
 8002e6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e70:	3350      	adds	r3, #80	; 0x50
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002e7c:	4423      	add	r3, r4
 8002e7e:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3316      	adds	r3, #22
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2400      	movs	r4, #0
 8002e8a:	9400      	str	r4, [sp, #0]
 8002e8c:	f001 ffa8 	bl	8004de0 <TFT9341_FillRect>
 8002e90:	e01c      	b.n	8002ecc <draw_options+0x2c0>
			}
			else
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0xFD60);
 8002e92:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8002e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3314      	adds	r3, #20
 8002ea6:	b299      	uxth	r1, r3
 8002ea8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002eaa:	3350      	adds	r3, #80	; 0x50
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002eb6:	4423      	add	r3, r4
 8002eb8:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3316      	adds	r3, #22
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f64f 5460 	movw	r4, #64864	; 0xfd60
 8002ec6:	9400      	str	r4, [sp, #0]
 8002ec8:	f001 ff8a 	bl	8004de0 <TFT9341_FillRect>
		for(int i=0;i<((sizeof (y_pos))/(sizeof (short)))-1;i++)
 8002ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ece:	3301      	adds	r3, #1
 8002ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d9b8      	bls.n	8002e4a <draw_options+0x23e>

	//TFT9341_DrawRect(0xffff,5,235,5+60,235-42);



}
 8002ed8:	bf00      	nop
 8002eda:	3754      	adds	r7, #84	; 0x54
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd90      	pop	{r4, r7, pc}
 8002ee0:	200008c4 	.word	0x200008c4
 8002ee4:	20000708 	.word	0x20000708
 8002ee8:	2000070a 	.word	0x2000070a
 8002eec:	2000070c 	.word	0x2000070c
 8002ef0:	200008bc 	.word	0x200008bc
 8002ef4:	20000ab0 	.word	0x20000ab0
 8002ef8:	2000000c 	.word	0x2000000c
 8002efc:	0800a900 	.word	0x0800a900
 8002f00:	0800a918 	.word	0x0800a918
 8002f04:	0800a934 	.word	0x0800a934
 8002f08:	0800a944 	.word	0x0800a944
 8002f0c:	0800a95c 	.word	0x0800a95c
 8002f10:	20000b80 	.word	0x20000b80

08002f14 <feed_set>:

void feed_set(void) //activates on button_press since it is in that function --> perhaps not the way to go since selection should also change the screen
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b08f      	sub	sp, #60	; 0x3c
 8002f18:	af02      	add	r7, sp, #8
	}
	 */


	char str[20];	
	short x_pos=15;
 8002f1a:	230f      	movs	r3, #15
 8002f1c:	847b      	strh	r3, [r7, #34]	; 0x22
	short y_pos[5];
	y_pos[0]=20;
 8002f1e:	2314      	movs	r3, #20
 8002f20:	803b      	strh	r3, [r7, #0]


	//sprintf(str,"selection=%d",selection);
	//TFT9341_String(180,160,str);

	if(menu!=prev_menu || sub_menu!=prev_sub_menu || feed_number!=prev_feed_number ||update) //change upon sub_menu will draw this once
 8002f22:	4b98      	ldr	r3, [pc, #608]	; (8003184 <feed_set+0x270>)
 8002f24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f28:	4b97      	ldr	r3, [pc, #604]	; (8003188 <feed_set+0x274>)
 8002f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d114      	bne.n	8002f5c <feed_set+0x48>
 8002f32:	4b96      	ldr	r3, [pc, #600]	; (800318c <feed_set+0x278>)
 8002f34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f38:	4b95      	ldr	r3, [pc, #596]	; (8003190 <feed_set+0x27c>)
 8002f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d10c      	bne.n	8002f5c <feed_set+0x48>
 8002f42:	4b94      	ldr	r3, [pc, #592]	; (8003194 <feed_set+0x280>)
 8002f44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f48:	4b93      	ldr	r3, [pc, #588]	; (8003198 <feed_set+0x284>)
 8002f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d104      	bne.n	8002f5c <feed_set+0x48>
 8002f52:	4b92      	ldr	r3, [pc, #584]	; (800319c <feed_set+0x288>)
 8002f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d07c      	beq.n	8003056 <feed_set+0x142>
	{
		prev_selection=-1;
 8002f5c:	4b90      	ldr	r3, [pc, #576]	; (80031a0 <feed_set+0x28c>)
 8002f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f62:	801a      	strh	r2, [r3, #0]
		selection=0;
 8002f64:	4b8f      	ldr	r3, [pc, #572]	; (80031a4 <feed_set+0x290>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	801a      	strh	r2, [r3, #0]
		TFT9341_FillScreen(0x0000);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f001 ffac 	bl	8004ec8 <TFT9341_FillScreen>
		TFT9341_SetTextColor(0xffff);
 8002f70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f74:	f002 f800 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8002f78:	488b      	ldr	r0, [pc, #556]	; (80031a8 <feed_set+0x294>)
 8002f7a:	f002 f81d 	bl	8004fb8 <TFT9341_SetFont>

		sprintf(str,"Voermomenten:%d",feed_number);
 8002f7e:	4b85      	ldr	r3, [pc, #532]	; (8003194 <feed_set+0x280>)
 8002f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	4988      	ldr	r1, [pc, #544]	; (80031ac <feed_set+0x298>)
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f006 ff45 	bl	8009e1c <siprintf>
		TFT9341_String(15,20,str);
 8002f92:	f107 030c 	add.w	r3, r7, #12
 8002f96:	461a      	mov	r2, r3
 8002f98:	2114      	movs	r1, #20
 8002f9a:	200f      	movs	r0, #15
 8002f9c:	f002 f8ca 	bl	8005134 <TFT9341_String>

		//TFT9341_String(15,20,"Aantal Voermomenten:");
		for(int i=0;i<feed_number;i++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa4:	e03f      	b.n	8003026 <feed_set+0x112>
		{
			//sprintf(str,time_text(feed_time[i][1],feed_time[i][2]));
			TFT9341_String(15,20+(i+1)*30,time_text(feed_time[i][0],feed_time[i][1],1));
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	3301      	adds	r3, #1
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	b29c      	uxth	r4, r3
 8002fba:	4a7d      	ldr	r2, [pc, #500]	; (80031b0 <feed_set+0x29c>)
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 8002fc2:	4a7b      	ldr	r2, [pc, #492]	; (80031b0 <feed_set+0x29c>)
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7fd ffbf 	bl	8000f54 <time_text>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4621      	mov	r1, r4
 8002fdc:	200f      	movs	r0, #15
 8002fde:	f002 f8a9 	bl	8005134 <TFT9341_String>
			sprintf(str,"%d g   ",feed_amount[i]);
 8002fe2:	4a74      	ldr	r2, [pc, #464]	; (80031b4 <feed_set+0x2a0>)
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f107 030c 	add.w	r3, r7, #12
 8002ff0:	4971      	ldr	r1, [pc, #452]	; (80031b8 <feed_set+0x2a4>)
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f006 ff12 	bl	8009e1c <siprintf>


			TFT9341_SetTextColor(0xffff);
 8002ff8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ffc:	f001 ffbc 	bl	8004f78 <TFT9341_SetTextColor>
			TFT9341_String(110,20+(i+1)*30,str);
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	3301      	adds	r3, #1
 8003004:	b29b      	uxth	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	0112      	lsls	r2, r2, #4
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	b29b      	uxth	r3, r3
 8003010:	3314      	adds	r3, #20
 8003012:	b29b      	uxth	r3, r3
 8003014:	f107 020c 	add.w	r2, r7, #12
 8003018:	4619      	mov	r1, r3
 800301a:	206e      	movs	r0, #110	; 0x6e
 800301c:	f002 f88a 	bl	8005134 <TFT9341_String>
		for(int i=0;i<feed_number;i++)
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	3301      	adds	r3, #1
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003026:	4b5b      	ldr	r3, [pc, #364]	; (8003194 <feed_set+0x280>)
 8003028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800302c:	461a      	mov	r2, r3
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	4293      	cmp	r3, r2
 8003032:	dbb8      	blt.n	8002fa6 <feed_set+0x92>

		}


		draw_back();
 8003034:	f7fe fcc0 	bl	80019b8 <draw_back>
		prev_menu=menu;
 8003038:	4b52      	ldr	r3, [pc, #328]	; (8003184 <feed_set+0x270>)
 800303a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800303e:	4b52      	ldr	r3, [pc, #328]	; (8003188 <feed_set+0x274>)
 8003040:	801a      	strh	r2, [r3, #0]
		prev_sub_menu=sub_menu;
 8003042:	4b52      	ldr	r3, [pc, #328]	; (800318c <feed_set+0x278>)
 8003044:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003048:	4b51      	ldr	r3, [pc, #324]	; (8003190 <feed_set+0x27c>)
 800304a:	801a      	strh	r2, [r3, #0]
		prev_feed_number=feed_number;
 800304c:	4b51      	ldr	r3, [pc, #324]	; (8003194 <feed_set+0x280>)
 800304e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003052:	4b51      	ldr	r3, [pc, #324]	; (8003198 <feed_set+0x284>)
 8003054:	801a      	strh	r2, [r3, #0]
	}

	if(selection_wheel==-1)
 8003056:	4b59      	ldr	r3, [pc, #356]	; (80031bc <feed_set+0x2a8>)
 8003058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d10a      	bne.n	8003078 <feed_set+0x164>
	{
		limit_selection(0,feed_number+1);
 8003062:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <feed_set+0x280>)
 8003064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003068:	b29b      	uxth	r3, r3
 800306a:	3301      	adds	r3, #1
 800306c:	b29b      	uxth	r3, r3
 800306e:	b21b      	sxth	r3, r3
 8003070:	4619      	mov	r1, r3
 8003072:	2000      	movs	r0, #0
 8003074:	f7fe f858 	bl	8001128 <limit_selection>
	}

	if(selection!=prev_selection || update)
 8003078:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <feed_set+0x290>)
 800307a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800307e:	4b48      	ldr	r3, [pc, #288]	; (80031a0 <feed_set+0x28c>)
 8003080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003084:	429a      	cmp	r2, r3
 8003086:	d105      	bne.n	8003094 <feed_set+0x180>
 8003088:	4b44      	ldr	r3, [pc, #272]	; (800319c <feed_set+0x288>)
 800308a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80f0 	beq.w	8003274 <feed_set+0x360>
	{

		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8003094:	2301      	movs	r3, #1
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
 8003098:	e015      	b.n	80030c6 <feed_set+0x1b2>
		{
			y_pos[i]=y_pos[i-1]+30;
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80030a4:	4413      	add	r3, r2
 80030a6:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	331e      	adds	r3, #30
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	b21a      	sxth	r2, r3
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80030ba:	440b      	add	r3, r1
 80030bc:	f823 2c30 	strh.w	r2, [r3, #-48]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	3301      	adds	r3, #1
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d9e6      	bls.n	800309a <feed_set+0x186>
			//sprintf(str,"%d",y_pos[i]);
			//TFT9341_String(100+30*i,90+10*i,str);
		}

		if(selection==feed_number+1  && selection_wheel==-1)
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <feed_set+0x290>)
 80030ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <feed_set+0x280>)
 80030d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030da:	3301      	adds	r3, #1
 80030dc:	429a      	cmp	r2, r3
 80030de:	d110      	bne.n	8003102 <feed_set+0x1ee>
 80030e0:	4b36      	ldr	r3, [pc, #216]	; (80031bc <feed_set+0x2a8>)
 80030e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ea:	d10a      	bne.n	8003102 <feed_set+0x1ee>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0xFD60);
 80030ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030ee:	3328      	adds	r3, #40	; 0x28
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	f64f 5360 	movw	r3, #64864	; 0xfd60
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	23e1      	movs	r3, #225	; 0xe1
 80030fa:	21df      	movs	r1, #223	; 0xdf
 80030fc:	200f      	movs	r0, #15
 80030fe:	f001 fe6f 	bl	8004de0 <TFT9341_FillRect>
		}
		if(selection!=feed_number+1  && selection_wheel==-1)
 8003102:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <feed_set+0x290>)
 8003104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003108:	461a      	mov	r2, r3
 800310a:	4b22      	ldr	r3, [pc, #136]	; (8003194 <feed_set+0x280>)
 800310c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003110:	3301      	adds	r3, #1
 8003112:	429a      	cmp	r2, r3
 8003114:	d00f      	beq.n	8003136 <feed_set+0x222>
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <feed_set+0x2a8>)
 8003118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d109      	bne.n	8003136 <feed_set+0x222>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0x0000);
 8003122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003124:	3328      	adds	r3, #40	; 0x28
 8003126:	b29a      	uxth	r2, r3
 8003128:	2300      	movs	r3, #0
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	23e1      	movs	r3, #225	; 0xe1
 800312e:	21df      	movs	r1, #223	; 0xdf
 8003130:	200f      	movs	r0, #15
 8003132:	f001 fe55 	bl	8004de0 <TFT9341_FillRect>
		}
		for(int i=0;i<feed_number+1;i++)
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
 800313a:	e090      	b.n	800325e <feed_set+0x34a>
		{
			if(selection!=i) // && selection_wheel==-1
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <feed_set+0x290>)
 800313e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003142:	461a      	mov	r2, r3
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	4293      	cmp	r3, r2
 8003148:	d03a      	beq.n	80031c0 <feed_set+0x2ac>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0x0000);
 800314a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003154:	4413      	add	r3, r2
 8003156:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800315a:	b29b      	uxth	r3, r3
 800315c:	3314      	adds	r3, #20
 800315e:	b299      	uxth	r1, r3
 8003160:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003162:	3350      	adds	r3, #80	; 0x50
 8003164:	b29a      	uxth	r2, r3
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800316e:	4423      	add	r3, r4
 8003170:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8003174:	b29b      	uxth	r3, r3
 8003176:	3316      	adds	r3, #22
 8003178:	b29b      	uxth	r3, r3
 800317a:	2400      	movs	r4, #0
 800317c:	9400      	str	r4, [sp, #0]
 800317e:	f001 fe2f 	bl	8004de0 <TFT9341_FillRect>
 8003182:	e040      	b.n	8003206 <feed_set+0x2f2>
 8003184:	200008c4 	.word	0x200008c4
 8003188:	20000708 	.word	0x20000708
 800318c:	2000070a 	.word	0x2000070a
 8003190:	2000070c 	.word	0x2000070c
 8003194:	20000704 	.word	0x20000704
 8003198:	2000002c 	.word	0x2000002c
 800319c:	200008bc 	.word	0x200008bc
 80031a0:	20000b80 	.word	0x20000b80
 80031a4:	20000ab0 	.word	0x20000ab0
 80031a8:	2000000c 	.word	0x2000000c
 80031ac:	0800a974 	.word	0x0800a974
 80031b0:	20000a4c 	.word	0x20000a4c
 80031b4:	20000b28 	.word	0x20000b28
 80031b8:	0800a984 	.word	0x0800a984
 80031bc:	20000714 	.word	0x20000714
			}
			else if(selection_wheel==-1)
 80031c0:	4ba2      	ldr	r3, [pc, #648]	; (800344c <feed_set+0x538>)
 80031c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d11c      	bne.n	8003206 <feed_set+0x2f2>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0xFD60);
 80031cc:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80031d6:	4413      	add	r3, r2
 80031d8:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3314      	adds	r3, #20
 80031e0:	b299      	uxth	r1, r3
 80031e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031e4:	3350      	adds	r3, #80	; 0x50
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80031f0:	4423      	add	r3, r4
 80031f2:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3316      	adds	r3, #22
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f64f 5460 	movw	r4, #64864	; 0xfd60
 8003200:	9400      	str	r4, [sp, #0]
 8003202:	f001 fded 	bl	8004de0 <TFT9341_FillRect>
			}

			if(selection_wheel!=-1)
 8003206:	4b91      	ldr	r3, [pc, #580]	; (800344c <feed_set+0x538>)
 8003208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d022      	beq.n	8003258 <feed_set+0x344>
			{
				if(i!=selection_wheel)
 8003212:	4b8e      	ldr	r3, [pc, #568]	; (800344c <feed_set+0x538>)
 8003214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003218:	461a      	mov	r2, r3
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	4293      	cmp	r3, r2
 800321e:	d01b      	beq.n	8003258 <feed_set+0x344>
				{
					TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0x0000);
 8003220:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800322a:	4413      	add	r3, r2
 800322c:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8003230:	b29b      	uxth	r3, r3
 8003232:	3314      	adds	r3, #20
 8003234:	b299      	uxth	r1, r3
 8003236:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003238:	3350      	adds	r3, #80	; 0x50
 800323a:	b29a      	uxth	r2, r3
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003244:	4423      	add	r3, r4
 8003246:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800324a:	b29b      	uxth	r3, r3
 800324c:	3316      	adds	r3, #22
 800324e:	b29b      	uxth	r3, r3
 8003250:	2400      	movs	r4, #0
 8003252:	9400      	str	r4, [sp, #0]
 8003254:	f001 fdc4 	bl	8004de0 <TFT9341_FillRect>
		for(int i=0;i<feed_number+1;i++)
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	3301      	adds	r3, #1
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	4b7c      	ldr	r3, [pc, #496]	; (8003450 <feed_set+0x53c>)
 8003260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003264:	461a      	mov	r2, r3
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	4293      	cmp	r3, r2
 800326a:	f77f af67 	ble.w	800313c <feed_set+0x228>
			}

			//sprintf(str,"%d",y_pos[i]);
			//TFT9341_String(100+30*i,50+10*i,str);
		}
		update=0;
 800326e:	4b79      	ldr	r3, [pc, #484]	; (8003454 <feed_set+0x540>)
 8003270:	2200      	movs	r2, #0
 8003272:	801a      	strh	r2, [r3, #0]
	}

	if(selection_wheel==0 && selection!=prev_selection)
 8003274:	4b75      	ldr	r3, [pc, #468]	; (800344c <feed_set+0x538>)
 8003276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d138      	bne.n	80032f0 <feed_set+0x3dc>
 800327e:	4b76      	ldr	r3, [pc, #472]	; (8003458 <feed_set+0x544>)
 8003280:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003284:	4b75      	ldr	r3, [pc, #468]	; (800345c <feed_set+0x548>)
 8003286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800328a:	429a      	cmp	r2, r3
 800328c:	d030      	beq.n	80032f0 <feed_set+0x3dc>
	{
		limit_selection(1,4);
 800328e:	2104      	movs	r1, #4
 8003290:	2001      	movs	r0, #1
 8003292:	f7fd ff49 	bl	8001128 <limit_selection>
		TFT9341_SetTextColor(0xffff);
 8003296:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800329a:	f001 fe6d 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 800329e:	4870      	ldr	r0, [pc, #448]	; (8003460 <feed_set+0x54c>)
 80032a0:	f001 fe8a 	bl	8004fb8 <TFT9341_SetFont>
		sprintf(str,"Voermomenten:%d",selection);
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <feed_set+0x544>)
 80032a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	496c      	ldr	r1, [pc, #432]	; (8003464 <feed_set+0x550>)
 80032b2:	4618      	mov	r0, r3
 80032b4:	f006 fdb2 	bl	8009e1c <siprintf>
		TFT9341_String(15,20,str);
 80032b8:	f107 030c 	add.w	r3, r7, #12
 80032bc:	461a      	mov	r2, r3
 80032be:	2114      	movs	r1, #20
 80032c0:	200f      	movs	r0, #15
 80032c2:	f001 ff37 	bl	8005134 <TFT9341_String>
		TFT9341_FillRect(x_pos+4,y_pos[0]+20,x_pos+90,y_pos[0]+18,0xf000);
 80032c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032c8:	3304      	adds	r3, #4
 80032ca:	b298      	uxth	r0, r3
 80032cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3314      	adds	r3, #20
 80032d4:	b299      	uxth	r1, r3
 80032d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032d8:	335a      	adds	r3, #90	; 0x5a
 80032da:	b29a      	uxth	r2, r3
 80032dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3312      	adds	r3, #18
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 80032ea:	9400      	str	r4, [sp, #0]
 80032ec:	f001 fd78 	bl	8004de0 <TFT9341_FillRect>
	}

	if(selection!=prev_selection && selection_wheel!=-1 && selection_wheel>0)
 80032f0:	4b59      	ldr	r3, [pc, #356]	; (8003458 <feed_set+0x544>)
 80032f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032f6:	4b59      	ldr	r3, [pc, #356]	; (800345c <feed_set+0x548>)
 80032f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	f000 815e 	beq.w	80035be <feed_set+0x6aa>
 8003302:	4b52      	ldr	r3, [pc, #328]	; (800344c <feed_set+0x538>)
 8003304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	f000 8157 	beq.w	80035be <feed_set+0x6aa>
 8003310:	4b4e      	ldr	r3, [pc, #312]	; (800344c <feed_set+0x538>)
 8003312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f340 8151 	ble.w	80035be <feed_set+0x6aa>
	{
		if(skip==0)
 800331c:	4b52      	ldr	r3, [pc, #328]	; (8003468 <feed_set+0x554>)
 800331e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d133      	bne.n	800338e <feed_set+0x47a>
		{
			limit_selection(0,23);
 8003326:	2117      	movs	r1, #23
 8003328:	2000      	movs	r0, #0
 800332a:	f7fd fefd 	bl	8001128 <limit_selection>
			feed_time[selection_wheel-1][0]=selection;
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <feed_set+0x538>)
 8003330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003334:	3b01      	subs	r3, #1
 8003336:	4a48      	ldr	r2, [pc, #288]	; (8003458 <feed_set+0x544>)
 8003338:	f9b2 1000 	ldrsh.w	r1, [r2]
 800333c:	4a4b      	ldr	r2, [pc, #300]	; (800346c <feed_set+0x558>)
 800333e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			TFT9341_FillRect(x_pos+4,y_pos[selection_wheel-1]+50,x_pos+24,y_pos[selection_wheel-1]+48,0xf000);
 8003342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003344:	3304      	adds	r3, #4
 8003346:	b298      	uxth	r0, r3
 8003348:	4b40      	ldr	r3, [pc, #256]	; (800344c <feed_set+0x538>)
 800334a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334e:	3b01      	subs	r3, #1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003356:	4413      	add	r3, r2
 8003358:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800335c:	b29b      	uxth	r3, r3
 800335e:	3332      	adds	r3, #50	; 0x32
 8003360:	b299      	uxth	r1, r3
 8003362:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003364:	3318      	adds	r3, #24
 8003366:	b29a      	uxth	r2, r3
 8003368:	4b38      	ldr	r3, [pc, #224]	; (800344c <feed_set+0x538>)
 800336a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800336e:	3b01      	subs	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003376:	4423      	add	r3, r4
 8003378:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800337c:	b29b      	uxth	r3, r3
 800337e:	3330      	adds	r3, #48	; 0x30
 8003380:	b29b      	uxth	r3, r3
 8003382:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 8003386:	9400      	str	r4, [sp, #0]
 8003388:	f001 fd2a 	bl	8004de0 <TFT9341_FillRect>
 800338c:	e0eb      	b.n	8003566 <feed_set+0x652>
		}
		else if(skip==1)
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <feed_set+0x554>)
 8003390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d16b      	bne.n	8003470 <feed_set+0x55c>
		{
			limit_selection(0,59);
 8003398:	213b      	movs	r1, #59	; 0x3b
 800339a:	2000      	movs	r0, #0
 800339c:	f7fd fec4 	bl	8001128 <limit_selection>
			feed_time[selection_wheel-1][1]=selection;
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <feed_set+0x538>)
 80033a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	4a2b      	ldr	r2, [pc, #172]	; (8003458 <feed_set+0x544>)
 80033aa:	f9b2 1000 	ldrsh.w	r1, [r2]
 80033ae:	4a2f      	ldr	r2, [pc, #188]	; (800346c <feed_set+0x558>)
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	460a      	mov	r2, r1
 80033b6:	805a      	strh	r2, [r3, #2]
			TFT9341_FillRect(x_pos+4,y_pos[selection_wheel-1]+50,x_pos+24,y_pos[selection_wheel-1]+48,0x0000);
 80033b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033ba:	3304      	adds	r3, #4
 80033bc:	b298      	uxth	r0, r3
 80033be:	4b23      	ldr	r3, [pc, #140]	; (800344c <feed_set+0x538>)
 80033c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80033cc:	4413      	add	r3, r2
 80033ce:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3332      	adds	r3, #50	; 0x32
 80033d6:	b299      	uxth	r1, r3
 80033d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033da:	3318      	adds	r3, #24
 80033dc:	b29a      	uxth	r2, r3
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <feed_set+0x538>)
 80033e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80033ec:	4423      	add	r3, r4
 80033ee:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3330      	adds	r3, #48	; 0x30
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2400      	movs	r4, #0
 80033fa:	9400      	str	r4, [sp, #0]
 80033fc:	f001 fcf0 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(x_pos+34,y_pos[selection_wheel-1]+50,x_pos+54,y_pos[selection_wheel-1]+48,0xf000);
 8003400:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003402:	3322      	adds	r3, #34	; 0x22
 8003404:	b298      	uxth	r0, r3
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <feed_set+0x538>)
 8003408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800340c:	3b01      	subs	r3, #1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003414:	4413      	add	r3, r2
 8003416:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800341a:	b29b      	uxth	r3, r3
 800341c:	3332      	adds	r3, #50	; 0x32
 800341e:	b299      	uxth	r1, r3
 8003420:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003422:	3336      	adds	r3, #54	; 0x36
 8003424:	b29a      	uxth	r2, r3
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <feed_set+0x538>)
 8003428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800342c:	3b01      	subs	r3, #1
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003434:	4423      	add	r3, r4
 8003436:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800343a:	b29b      	uxth	r3, r3
 800343c:	3330      	adds	r3, #48	; 0x30
 800343e:	b29b      	uxth	r3, r3
 8003440:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 8003444:	9400      	str	r4, [sp, #0]
 8003446:	f001 fccb 	bl	8004de0 <TFT9341_FillRect>
 800344a:	e08c      	b.n	8003566 <feed_set+0x652>
 800344c:	20000714 	.word	0x20000714
 8003450:	20000704 	.word	0x20000704
 8003454:	200008bc 	.word	0x200008bc
 8003458:	20000ab0 	.word	0x20000ab0
 800345c:	20000b80 	.word	0x20000b80
 8003460:	2000000c 	.word	0x2000000c
 8003464:	0800a974 	.word	0x0800a974
 8003468:	200008ac 	.word	0x200008ac
 800346c:	20000a4c 	.word	0x20000a4c
		}
		else if(skip==2)
 8003470:	4b57      	ldr	r3, [pc, #348]	; (80035d0 <feed_set+0x6bc>)
 8003472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d175      	bne.n	8003566 <feed_set+0x652>
		{
			limit_selection(0,100);
 800347a:	2164      	movs	r1, #100	; 0x64
 800347c:	2000      	movs	r0, #0
 800347e:	f7fd fe53 	bl	8001128 <limit_selection>
			feed_amount[selection_wheel-1]=selection;
 8003482:	4b54      	ldr	r3, [pc, #336]	; (80035d4 <feed_set+0x6c0>)
 8003484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003488:	3b01      	subs	r3, #1
 800348a:	4a53      	ldr	r2, [pc, #332]	; (80035d8 <feed_set+0x6c4>)
 800348c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8003490:	4a52      	ldr	r2, [pc, #328]	; (80035dc <feed_set+0x6c8>)
 8003492:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			TFT9341_FillRect(x_pos+34,y_pos[selection_wheel-1]+50,x_pos+54,y_pos[selection_wheel-1]+48,0x0000);
 8003496:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003498:	3322      	adds	r3, #34	; 0x22
 800349a:	b298      	uxth	r0, r3
 800349c:	4b4d      	ldr	r3, [pc, #308]	; (80035d4 <feed_set+0x6c0>)
 800349e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034aa:	4413      	add	r3, r2
 80034ac:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3332      	adds	r3, #50	; 0x32
 80034b4:	b299      	uxth	r1, r3
 80034b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034b8:	3336      	adds	r3, #54	; 0x36
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	4b45      	ldr	r3, [pc, #276]	; (80035d4 <feed_set+0x6c0>)
 80034be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80034ca:	4423      	add	r3, r4
 80034cc:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3330      	adds	r3, #48	; 0x30
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2400      	movs	r4, #0
 80034d8:	9400      	str	r4, [sp, #0]
 80034da:	f001 fc81 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(x_pos+94,y_pos[selection_wheel-1]+50,x_pos+130,y_pos[selection_wheel-1]+48,0xf000);
 80034de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034e0:	335e      	adds	r3, #94	; 0x5e
 80034e2:	b298      	uxth	r0, r3
 80034e4:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <feed_set+0x6c0>)
 80034e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034f2:	4413      	add	r3, r2
 80034f4:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3332      	adds	r3, #50	; 0x32
 80034fc:	b299      	uxth	r1, r3
 80034fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003500:	3382      	adds	r3, #130	; 0x82
 8003502:	b29a      	uxth	r2, r3
 8003504:	4b33      	ldr	r3, [pc, #204]	; (80035d4 <feed_set+0x6c0>)
 8003506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800350a:	3b01      	subs	r3, #1
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003512:	4423      	add	r3, r4
 8003514:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8003518:	b29b      	uxth	r3, r3
 800351a:	3330      	adds	r3, #48	; 0x30
 800351c:	b29b      	uxth	r3, r3
 800351e:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 8003522:	9400      	str	r4, [sp, #0]
 8003524:	f001 fc5c 	bl	8004de0 <TFT9341_FillRect>
			sprintf(str,"%d g   ",feed_amount[selection_wheel-1]);
 8003528:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <feed_set+0x6c0>)
 800352a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800352e:	3b01      	subs	r3, #1
 8003530:	4a2a      	ldr	r2, [pc, #168]	; (80035dc <feed_set+0x6c8>)
 8003532:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003536:	461a      	mov	r2, r3
 8003538:	f107 030c 	add.w	r3, r7, #12
 800353c:	4928      	ldr	r1, [pc, #160]	; (80035e0 <feed_set+0x6cc>)
 800353e:	4618      	mov	r0, r3
 8003540:	f006 fc6c 	bl	8009e1c <siprintf>
			TFT9341_String(110,20+(selection_wheel)*30,str);
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <feed_set+0x6c0>)
 8003546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	3314      	adds	r3, #20
 8003558:	b29b      	uxth	r3, r3
 800355a:	f107 020c 	add.w	r2, r7, #12
 800355e:	4619      	mov	r1, r3
 8003560:	206e      	movs	r0, #110	; 0x6e
 8003562:	f001 fde7 	bl	8005134 <TFT9341_String>
		}
		TFT9341_SetTextColor(0xffff);
 8003566:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800356a:	f001 fd05 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 800356e:	481d      	ldr	r0, [pc, #116]	; (80035e4 <feed_set+0x6d0>)
 8003570:	f001 fd22 	bl	8004fb8 <TFT9341_SetFont>
		TFT9341_String(15,20+(selection_wheel)*30,time_text(feed_time[selection_wheel-1][0],feed_time[selection_wheel-1][1],1));
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <feed_set+0x6c0>)
 8003576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800357a:	b29b      	uxth	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	b29b      	uxth	r3, r3
 8003586:	3314      	adds	r3, #20
 8003588:	b29c      	uxth	r4, r3
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <feed_set+0x6c0>)
 800358c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003590:	3b01      	subs	r3, #1
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <feed_set+0x6d4>)
 8003594:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <feed_set+0x6c0>)
 800359a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800359e:	3b01      	subs	r3, #1
 80035a0:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <feed_set+0x6d4>)
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035aa:	2201      	movs	r2, #1
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fcd1 	bl	8000f54 <time_text>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	4621      	mov	r1, r4
 80035b8:	200f      	movs	r0, #15
 80035ba:	f001 fdbb 	bl	8005134 <TFT9341_String>
		TFT9341_String(15,20+(0+4)*30,time_text(feed_time[3][0],feed_time[3][1]));
	}
	 */


	prev_selection=selection;
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <feed_set+0x6c4>)
 80035c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <feed_set+0x6d8>)
 80035c6:	801a      	strh	r2, [r3, #0]
		}

	}
	 */

}
 80035c8:	bf00      	nop
 80035ca:	3734      	adds	r7, #52	; 0x34
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd90      	pop	{r4, r7, pc}
 80035d0:	200008ac 	.word	0x200008ac
 80035d4:	20000714 	.word	0x20000714
 80035d8:	20000ab0 	.word	0x20000ab0
 80035dc:	20000b28 	.word	0x20000b28
 80035e0:	0800a984 	.word	0x0800a984
 80035e4:	2000000c 	.word	0x2000000c
 80035e8:	20000a4c 	.word	0x20000a4c
 80035ec:	20000b80 	.word	0x20000b80

080035f0 <set_time>:

void set_time(void)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b08d      	sub	sp, #52	; 0x34
 80035f4:	af02      	add	r7, sp, #8
	char str[10];
	short x_pos=15;
 80035f6:	230f      	movs	r3, #15
 80035f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	short y_pos[6];
	y_pos[0]=20;
 80035fa:	2314      	movs	r3, #20
 80035fc:	80bb      	strh	r3, [r7, #4]
	y_pos[1]=50;
 80035fe:	2332      	movs	r3, #50	; 0x32
 8003600:	80fb      	strh	r3, [r7, #6]
	//
	if(selection!=prev_selection &&selection_wheel==-1)
 8003602:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <set_time+0x200>)
 8003604:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003608:	4b7a      	ldr	r3, [pc, #488]	; (80037f4 <set_time+0x204>)
 800360a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800360e:	429a      	cmp	r2, r3
 8003610:	d009      	beq.n	8003626 <set_time+0x36>
 8003612:	4b79      	ldr	r3, [pc, #484]	; (80037f8 <set_time+0x208>)
 8003614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d103      	bne.n	8003626 <set_time+0x36>
	{
		limit_selection(0, 2);
 800361e:	2102      	movs	r1, #2
 8003620:	2000      	movs	r0, #0
 8003622:	f7fd fd81 	bl	8001128 <limit_selection>
	}
	if(menu!=prev_menu || sub_menu!=prev_sub_menu ||update)
 8003626:	4b75      	ldr	r3, [pc, #468]	; (80037fc <set_time+0x20c>)
 8003628:	f9b3 2000 	ldrsh.w	r2, [r3]
 800362c:	4b74      	ldr	r3, [pc, #464]	; (8003800 <set_time+0x210>)
 800362e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003632:	429a      	cmp	r2, r3
 8003634:	d10c      	bne.n	8003650 <set_time+0x60>
 8003636:	4b73      	ldr	r3, [pc, #460]	; (8003804 <set_time+0x214>)
 8003638:	f9b3 2000 	ldrsh.w	r2, [r3]
 800363c:	4b72      	ldr	r3, [pc, #456]	; (8003808 <set_time+0x218>)
 800363e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003642:	429a      	cmp	r2, r3
 8003644:	d104      	bne.n	8003650 <set_time+0x60>
 8003646:	4b71      	ldr	r3, [pc, #452]	; (800380c <set_time+0x21c>)
 8003648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d04e      	beq.n	80036ee <set_time+0xfe>
	{
		prev_selection=-1;
 8003650:	4b68      	ldr	r3, [pc, #416]	; (80037f4 <set_time+0x204>)
 8003652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003656:	801a      	strh	r2, [r3, #0]
		selection=0;
 8003658:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <set_time+0x200>)
 800365a:	2200      	movs	r2, #0
 800365c:	801a      	strh	r2, [r3, #0]
		TFT9341_FillScreen(0x0000);
 800365e:	2000      	movs	r0, #0
 8003660:	f001 fc32 	bl	8004ec8 <TFT9341_FillScreen>
		TFT9341_SetTextColor(0xffff);
 8003664:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003668:	f001 fc86 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 800366c:	4868      	ldr	r0, [pc, #416]	; (8003810 <set_time+0x220>)
 800366e:	f001 fca3 	bl	8004fb8 <TFT9341_SetFont>
		sprintf(str,"Tijd: %s",time_text(rtc.Hour,rtc.Min,1));
 8003672:	4b68      	ldr	r3, [pc, #416]	; (8003814 <set_time+0x224>)
 8003674:	791b      	ldrb	r3, [r3, #4]
 8003676:	b21b      	sxth	r3, r3
 8003678:	4a66      	ldr	r2, [pc, #408]	; (8003814 <set_time+0x224>)
 800367a:	7952      	ldrb	r2, [r2, #5]
 800367c:	b211      	sxth	r1, r2
 800367e:	2201      	movs	r2, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f7fd fc67 	bl	8000f54 <time_text>
 8003686:	4602      	mov	r2, r0
 8003688:	f107 0310 	add.w	r3, r7, #16
 800368c:	4962      	ldr	r1, [pc, #392]	; (8003818 <set_time+0x228>)
 800368e:	4618      	mov	r0, r3
 8003690:	f006 fbc4 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[0],str);
 8003694:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003696:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800369a:	b291      	uxth	r1, r2
 800369c:	f107 0210 	add.w	r2, r7, #16
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 fd47 	bl	8005134 <TFT9341_String>
		sprintf(str,"Dag: %s",enum_to_day(rtc.DaysOfWeek));
 80036a6:	4b5b      	ldr	r3, [pc, #364]	; (8003814 <set_time+0x224>)
 80036a8:	78db      	ldrb	r3, [r3, #3]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd fcfe 	bl	80010ac <enum_to_day>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f107 0310 	add.w	r3, r7, #16
 80036b6:	4959      	ldr	r1, [pc, #356]	; (800381c <set_time+0x22c>)
 80036b8:	4618      	mov	r0, r3
 80036ba:	f006 fbaf 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[1],str);
 80036be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036c4:	b291      	uxth	r1, r2
 80036c6:	f107 0210 	add.w	r2, r7, #16
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 fd32 	bl	8005134 <TFT9341_String>

		prev_menu=menu;
 80036d0:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <set_time+0x20c>)
 80036d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036d6:	4b4a      	ldr	r3, [pc, #296]	; (8003800 <set_time+0x210>)
 80036d8:	801a      	strh	r2, [r3, #0]
		prev_sub_menu=sub_menu;
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <set_time+0x214>)
 80036dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036e0:	4b49      	ldr	r3, [pc, #292]	; (8003808 <set_time+0x218>)
 80036e2:	801a      	strh	r2, [r3, #0]
		update=0;
 80036e4:	4b49      	ldr	r3, [pc, #292]	; (800380c <set_time+0x21c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	801a      	strh	r2, [r3, #0]
		draw_back();
 80036ea:	f7fe f965 	bl	80019b8 <draw_back>

	}

	if(selection!=prev_selection)
 80036ee:	4b40      	ldr	r3, [pc, #256]	; (80037f0 <set_time+0x200>)
 80036f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036f4:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <set_time+0x204>)
 80036f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	f000 80b9 	beq.w	8003872 <set_time+0x282>
	{
		if(selection_wheel==-1)
 8003700:	4b3d      	ldr	r3, [pc, #244]	; (80037f8 <set_time+0x208>)
 8003702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	d104      	bne.n	8003716 <set_time+0x126>
		{
			prev_selection=selection;
 800370c:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <set_time+0x200>)
 800370e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003712:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <set_time+0x204>)
 8003714:	801a      	strh	r2, [r3, #0]
		}
		x_pos=15;
 8003716:	230f      	movs	r3, #15
 8003718:	84fb      	strh	r3, [r7, #38]	; 0x26
		y_pos[0]=20;
 800371a:	2314      	movs	r3, #20
 800371c:	80bb      	strh	r3, [r7, #4]
		for(int i=1;i<2;i++)
 800371e:	2301      	movs	r3, #1
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	e015      	b.n	8003750 <set_time+0x160>
		{
			y_pos[i]=y_pos[i-1]+30;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	3b01      	subs	r3, #1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800372e:	4413      	add	r3, r2
 8003730:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8003734:	b29b      	uxth	r3, r3
 8003736:	331e      	adds	r3, #30
 8003738:	b29b      	uxth	r3, r3
 800373a:	b21a      	sxth	r2, r3
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003744:	440b      	add	r3, r1
 8003746:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(int i=1;i<2;i++)
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	3301      	adds	r3, #1
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	2b01      	cmp	r3, #1
 8003754:	dde6      	ble.n	8003724 <set_time+0x134>
		}

		if(selection==2 && selection_wheel==-1)
 8003756:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <set_time+0x200>)
 8003758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d110      	bne.n	8003782 <set_time+0x192>
 8003760:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <set_time+0x208>)
 8003762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	d10a      	bne.n	8003782 <set_time+0x192>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0xFD60);
 800376c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800376e:	3328      	adds	r3, #40	; 0x28
 8003770:	b29a      	uxth	r2, r3
 8003772:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	23e1      	movs	r3, #225	; 0xe1
 800377a:	21df      	movs	r1, #223	; 0xdf
 800377c:	200f      	movs	r0, #15
 800377e:	f001 fb2f 	bl	8004de0 <TFT9341_FillRect>
		}
		if(selection!=2)
 8003782:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <set_time+0x200>)
 8003784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d009      	beq.n	80037a0 <set_time+0x1b0>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0x0000);
 800378c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800378e:	3328      	adds	r3, #40	; 0x28
 8003790:	b29a      	uxth	r2, r3
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	23e1      	movs	r3, #225	; 0xe1
 8003798:	21df      	movs	r1, #223	; 0xdf
 800379a:	200f      	movs	r0, #15
 800379c:	f001 fb20 	bl	8004de0 <TFT9341_FillRect>
		}
		for(int i=0;i<2;i++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e062      	b.n	800386c <set_time+0x27c>
		{
			if(selection!=i)
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <set_time+0x200>)
 80037a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ac:	461a      	mov	r2, r3
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d035      	beq.n	8003820 <set_time+0x230>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0x0000);
 80037b4:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037be:	4413      	add	r3, r2
 80037c0:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3314      	adds	r3, #20
 80037c8:	b299      	uxth	r1, r3
 80037ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037cc:	3350      	adds	r3, #80	; 0x50
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80037d8:	4423      	add	r3, r4
 80037da:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3316      	adds	r3, #22
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2400      	movs	r4, #0
 80037e6:	9400      	str	r4, [sp, #0]
 80037e8:	f001 fafa 	bl	8004de0 <TFT9341_FillRect>
 80037ec:	e03b      	b.n	8003866 <set_time+0x276>
 80037ee:	bf00      	nop
 80037f0:	20000ab0 	.word	0x20000ab0
 80037f4:	20000b80 	.word	0x20000b80
 80037f8:	20000714 	.word	0x20000714
 80037fc:	200008c4 	.word	0x200008c4
 8003800:	20000708 	.word	0x20000708
 8003804:	2000070a 	.word	0x2000070a
 8003808:	2000070c 	.word	0x2000070c
 800380c:	200008bc 	.word	0x200008bc
 8003810:	2000000c 	.word	0x2000000c
 8003814:	20000720 	.word	0x20000720
 8003818:	0800a98c 	.word	0x0800a98c
 800381c:	0800a998 	.word	0x0800a998
			}
			else if(selection_wheel==-1)
 8003820:	4baa      	ldr	r3, [pc, #680]	; (8003acc <set_time+0x4dc>)
 8003822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d11c      	bne.n	8003866 <set_time+0x276>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0xFD60);
 800382c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003836:	4413      	add	r3, r2
 8003838:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800383c:	b29b      	uxth	r3, r3
 800383e:	3314      	adds	r3, #20
 8003840:	b299      	uxth	r1, r3
 8003842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003844:	3350      	adds	r3, #80	; 0x50
 8003846:	b29a      	uxth	r2, r3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003850:	4423      	add	r3, r4
 8003852:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8003856:	b29b      	uxth	r3, r3
 8003858:	3316      	adds	r3, #22
 800385a:	b29b      	uxth	r3, r3
 800385c:	f64f 5460 	movw	r4, #64864	; 0xfd60
 8003860:	9400      	str	r4, [sp, #0]
 8003862:	f001 fabd 	bl	8004de0 <TFT9341_FillRect>
		for(int i=0;i<2;i++)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3301      	adds	r3, #1
 800386a:	61fb      	str	r3, [r7, #28]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2b01      	cmp	r3, #1
 8003870:	dd99      	ble.n	80037a6 <set_time+0x1b6>

		}
	}


	if(selection_wheel==0 && selection!=prev_selection) //time adjust selected
 8003872:	4b96      	ldr	r3, [pc, #600]	; (8003acc <set_time+0x4dc>)
 8003874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f040 80d6 	bne.w	8003a2a <set_time+0x43a>
 800387e:	4b94      	ldr	r3, [pc, #592]	; (8003ad0 <set_time+0x4e0>)
 8003880:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003884:	4b93      	ldr	r3, [pc, #588]	; (8003ad4 <set_time+0x4e4>)
 8003886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388a:	429a      	cmp	r2, r3
 800388c:	f000 80cd 	beq.w	8003a2a <set_time+0x43a>
	{
		prev_selection=selection;
 8003890:	4b8f      	ldr	r3, [pc, #572]	; (8003ad0 <set_time+0x4e0>)
 8003892:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003896:	4b8f      	ldr	r3, [pc, #572]	; (8003ad4 <set_time+0x4e4>)
 8003898:	801a      	strh	r2, [r3, #0]
		if(skip==0)
 800389a:	4b8f      	ldr	r3, [pc, #572]	; (8003ad8 <set_time+0x4e8>)
 800389c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d154      	bne.n	800394e <set_time+0x35e>
		{
			limit_selection(0, 23);
 80038a4:	2117      	movs	r1, #23
 80038a6:	2000      	movs	r0, #0
 80038a8:	f7fd fc3e 	bl	8001128 <limit_selection>
			TFT9341_FillRect(x_pos+67,y_pos[0]+20,x_pos+87,y_pos[0]+18,0xf000);
 80038ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038ae:	3343      	adds	r3, #67	; 0x43
 80038b0:	b298      	uxth	r0, r3
 80038b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3314      	adds	r3, #20
 80038ba:	b299      	uxth	r1, r3
 80038bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038be:	3357      	adds	r3, #87	; 0x57
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3312      	adds	r3, #18
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 80038d0:	9400      	str	r4, [sp, #0]
 80038d2:	f001 fa85 	bl	8004de0 <TFT9341_FillRect>

			TFT9341_SetTextColor(0xffff);
 80038d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80038da:	f001 fb4d 	bl	8004f78 <TFT9341_SetTextColor>
			TFT9341_SetFont(&Font16);
 80038de:	487f      	ldr	r0, [pc, #508]	; (8003adc <set_time+0x4ec>)
 80038e0:	f001 fb6a 	bl	8004fb8 <TFT9341_SetFont>
			rtc.Hour=selection;
 80038e4:	4b7a      	ldr	r3, [pc, #488]	; (8003ad0 <set_time+0x4e0>)
 80038e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b7c      	ldr	r3, [pc, #496]	; (8003ae0 <set_time+0x4f0>)
 80038ee:	711a      	strb	r2, [r3, #4]
			sprintf(str,"Tijd: %s",time_text(rtc.Hour,rtc.Min,1));
 80038f0:	4b7b      	ldr	r3, [pc, #492]	; (8003ae0 <set_time+0x4f0>)
 80038f2:	791b      	ldrb	r3, [r3, #4]
 80038f4:	b21b      	sxth	r3, r3
 80038f6:	4a7a      	ldr	r2, [pc, #488]	; (8003ae0 <set_time+0x4f0>)
 80038f8:	7952      	ldrb	r2, [r2, #5]
 80038fa:	b211      	sxth	r1, r2
 80038fc:	2201      	movs	r2, #1
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd fb28 	bl	8000f54 <time_text>
 8003904:	4602      	mov	r2, r0
 8003906:	f107 0310 	add.w	r3, r7, #16
 800390a:	4976      	ldr	r1, [pc, #472]	; (8003ae4 <set_time+0x4f4>)
 800390c:	4618      	mov	r0, r3
 800390e:	f006 fa85 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[0],str);
 8003912:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003914:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003918:	b291      	uxth	r1, r2
 800391a:	f107 0210 	add.w	r2, r7, #16
 800391e:	4618      	mov	r0, r3
 8003920:	f001 fc08 	bl	8005134 <TFT9341_String>
			sprintf(str,"Dag: %s",enum_to_day(rtc.DaysOfWeek));
 8003924:	4b6e      	ldr	r3, [pc, #440]	; (8003ae0 <set_time+0x4f0>)
 8003926:	78db      	ldrb	r3, [r3, #3]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd fbbf 	bl	80010ac <enum_to_day>
 800392e:	4602      	mov	r2, r0
 8003930:	f107 0310 	add.w	r3, r7, #16
 8003934:	496c      	ldr	r1, [pc, #432]	; (8003ae8 <set_time+0x4f8>)
 8003936:	4618      	mov	r0, r3
 8003938:	f006 fa70 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[1],str);
 800393c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800393e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003942:	b291      	uxth	r1, r2
 8003944:	f107 0210 	add.w	r2, r7, #16
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fbf3 	bl	8005134 <TFT9341_String>
		}
		if(skip==1)
 800394e:	4b62      	ldr	r3, [pc, #392]	; (8003ad8 <set_time+0x4e8>)
 8003950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d168      	bne.n	8003a2a <set_time+0x43a>
		{

			limit_selection(0, 59);
 8003958:	213b      	movs	r1, #59	; 0x3b
 800395a:	2000      	movs	r0, #0
 800395c:	f7fd fbe4 	bl	8001128 <limit_selection>
			TFT9341_FillRect(x_pos+67,y_pos[0]+20,x_pos+87,y_pos[0]+18,0x0000);
 8003960:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003962:	3343      	adds	r3, #67	; 0x43
 8003964:	b298      	uxth	r0, r3
 8003966:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800396a:	b29b      	uxth	r3, r3
 800396c:	3314      	adds	r3, #20
 800396e:	b299      	uxth	r1, r3
 8003970:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003972:	3357      	adds	r3, #87	; 0x57
 8003974:	b29a      	uxth	r2, r3
 8003976:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800397a:	b29b      	uxth	r3, r3
 800397c:	3312      	adds	r3, #18
 800397e:	b29b      	uxth	r3, r3
 8003980:	2400      	movs	r4, #0
 8003982:	9400      	str	r4, [sp, #0]
 8003984:	f001 fa2c 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_FillRect(x_pos+100,y_pos[0]+20,x_pos+120,y_pos[0]+18,0xf000);
 8003988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800398a:	3364      	adds	r3, #100	; 0x64
 800398c:	b298      	uxth	r0, r3
 800398e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003992:	b29b      	uxth	r3, r3
 8003994:	3314      	adds	r3, #20
 8003996:	b299      	uxth	r1, r3
 8003998:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800399a:	3378      	adds	r3, #120	; 0x78
 800399c:	b29a      	uxth	r2, r3
 800399e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3312      	adds	r3, #18
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 80039ac:	9400      	str	r4, [sp, #0]
 80039ae:	f001 fa17 	bl	8004de0 <TFT9341_FillRect>
			TFT9341_SetTextColor(0xffff);
 80039b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80039b6:	f001 fadf 	bl	8004f78 <TFT9341_SetTextColor>
			TFT9341_SetFont(&Font16);
 80039ba:	4848      	ldr	r0, [pc, #288]	; (8003adc <set_time+0x4ec>)
 80039bc:	f001 fafc 	bl	8004fb8 <TFT9341_SetFont>
			rtc.Min=selection;
 80039c0:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <set_time+0x4e0>)
 80039c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	4b45      	ldr	r3, [pc, #276]	; (8003ae0 <set_time+0x4f0>)
 80039ca:	715a      	strb	r2, [r3, #5]
			sprintf(str,"Tijd: %s",time_text(rtc.Hour,rtc.Min,1));
 80039cc:	4b44      	ldr	r3, [pc, #272]	; (8003ae0 <set_time+0x4f0>)
 80039ce:	791b      	ldrb	r3, [r3, #4]
 80039d0:	b21b      	sxth	r3, r3
 80039d2:	4a43      	ldr	r2, [pc, #268]	; (8003ae0 <set_time+0x4f0>)
 80039d4:	7952      	ldrb	r2, [r2, #5]
 80039d6:	b211      	sxth	r1, r2
 80039d8:	2201      	movs	r2, #1
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd faba 	bl	8000f54 <time_text>
 80039e0:	4602      	mov	r2, r0
 80039e2:	f107 0310 	add.w	r3, r7, #16
 80039e6:	493f      	ldr	r1, [pc, #252]	; (8003ae4 <set_time+0x4f4>)
 80039e8:	4618      	mov	r0, r3
 80039ea:	f006 fa17 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[0],str);
 80039ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039f4:	b291      	uxth	r1, r2
 80039f6:	f107 0210 	add.w	r2, r7, #16
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fb9a 	bl	8005134 <TFT9341_String>
			sprintf(str,"Dag: %s",enum_to_day(rtc.DaysOfWeek));
 8003a00:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <set_time+0x4f0>)
 8003a02:	78db      	ldrb	r3, [r3, #3]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd fb51 	bl	80010ac <enum_to_day>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	f107 0310 	add.w	r3, r7, #16
 8003a10:	4935      	ldr	r1, [pc, #212]	; (8003ae8 <set_time+0x4f8>)
 8003a12:	4618      	mov	r0, r3
 8003a14:	f006 fa02 	bl	8009e1c <siprintf>
			TFT9341_String(x_pos,y_pos[1],str);
 8003a18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a1e:	b291      	uxth	r1, r2
 8003a20:	f107 0210 	add.w	r2, r7, #16
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 fb85 	bl	8005134 <TFT9341_String>
		}
	}
	if(selection_wheel==1 && selection!=prev_selection)
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <set_time+0x4dc>)
 8003a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d147      	bne.n	8003ac4 <set_time+0x4d4>
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <set_time+0x4e0>)
 8003a36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003a3a:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <set_time+0x4e4>)
 8003a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d03f      	beq.n	8003ac4 <set_time+0x4d4>
	{
		prev_selection=selection;
 8003a44:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <set_time+0x4e0>)
 8003a46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <set_time+0x4e4>)
 8003a4c:	801a      	strh	r2, [r3, #0]
		limit_selection(1,7);
 8003a4e:	2107      	movs	r1, #7
 8003a50:	2001      	movs	r0, #1
 8003a52:	f7fd fb69 	bl	8001128 <limit_selection>
		rtc.DaysOfWeek=selection;
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <set_time+0x4e0>)
 8003a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <set_time+0x4f0>)
 8003a60:	70da      	strb	r2, [r3, #3]
		TFT9341_FillRect(x_pos+55,y_pos[0]+50,x_pos+75,y_pos[0]+48,0xf000);
 8003a62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a64:	3337      	adds	r3, #55	; 0x37
 8003a66:	b298      	uxth	r0, r3
 8003a68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3332      	adds	r3, #50	; 0x32
 8003a70:	b299      	uxth	r1, r3
 8003a72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a74:	334b      	adds	r3, #75	; 0x4b
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3330      	adds	r3, #48	; 0x30
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 8003a86:	9400      	str	r4, [sp, #0]
 8003a88:	f001 f9aa 	bl	8004de0 <TFT9341_FillRect>
		TFT9341_SetTextColor(0xffff);
 8003a8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003a90:	f001 fa72 	bl	8004f78 <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8003a94:	4811      	ldr	r0, [pc, #68]	; (8003adc <set_time+0x4ec>)
 8003a96:	f001 fa8f 	bl	8004fb8 <TFT9341_SetFont>
		sprintf(str,"Dag: %s",enum_to_day(rtc.DaysOfWeek));
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <set_time+0x4f0>)
 8003a9c:	78db      	ldrb	r3, [r3, #3]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd fb04 	bl	80010ac <enum_to_day>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f107 0310 	add.w	r3, r7, #16
 8003aaa:	490f      	ldr	r1, [pc, #60]	; (8003ae8 <set_time+0x4f8>)
 8003aac:	4618      	mov	r0, r3
 8003aae:	f006 f9b5 	bl	8009e1c <siprintf>
		TFT9341_String(x_pos,y_pos[1],str);
 8003ab2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ab4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ab8:	b291      	uxth	r1, r2
 8003aba:	f107 0210 	add.w	r2, r7, #16
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 fb38 	bl	8005134 <TFT9341_String>
	{
		y_pos[i]=y_pos[i-1]+30;
	}
	 */

}
 8003ac4:	bf00      	nop
 8003ac6:	372c      	adds	r7, #44	; 0x2c
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}
 8003acc:	20000714 	.word	0x20000714
 8003ad0:	20000ab0 	.word	0x20000ab0
 8003ad4:	20000b80 	.word	0x20000b80
 8003ad8:	200008ac 	.word	0x200008ac
 8003adc:	2000000c 	.word	0x2000000c
 8003ae0:	20000720 	.word	0x20000720
 8003ae4:	0800a98c 	.word	0x0800a98c
 8003ae8:	0800a998 	.word	0x0800a998

08003aec <calibrate_feed>:



void calibrate_feed(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b09c      	sub	sp, #112	; 0x70
 8003af0:	af02      	add	r7, sp, #8
	char str[100];
	if(menu!=prev_menu || sub_menu!=prev_sub_menu ||update)
 8003af2:	4bc2      	ldr	r3, [pc, #776]	; (8003dfc <calibrate_feed+0x310>)
 8003af4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003af8:	4bc1      	ldr	r3, [pc, #772]	; (8003e00 <calibrate_feed+0x314>)
 8003afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d10d      	bne.n	8003b1e <calibrate_feed+0x32>
 8003b02:	4bc0      	ldr	r3, [pc, #768]	; (8003e04 <calibrate_feed+0x318>)
 8003b04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003b08:	4bbf      	ldr	r3, [pc, #764]	; (8003e08 <calibrate_feed+0x31c>)
 8003b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d105      	bne.n	8003b1e <calibrate_feed+0x32>
 8003b12:	4bbe      	ldr	r3, [pc, #760]	; (8003e0c <calibrate_feed+0x320>)
 8003b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8125 	beq.w	8003d68 <calibrate_feed+0x27c>
	{
		prev_selection=-1;
 8003b1e:	4bbc      	ldr	r3, [pc, #752]	; (8003e10 <calibrate_feed+0x324>)
 8003b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b24:	801a      	strh	r2, [r3, #0]
		if(skip!=4)
 8003b26:	4bbb      	ldr	r3, [pc, #748]	; (8003e14 <calibrate_feed+0x328>)
 8003b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d002      	beq.n	8003b36 <calibrate_feed+0x4a>
		{
			selection=0;
 8003b30:	4bb9      	ldr	r3, [pc, #740]	; (8003e18 <calibrate_feed+0x32c>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	801a      	strh	r2, [r3, #0]
		}
		TFT9341_FillScreen(0x0000);
 8003b36:	2000      	movs	r0, #0
 8003b38:	f001 f9c6 	bl	8004ec8 <TFT9341_FillScreen>
		TFT9341_SetTextColor(0xffff);
 8003b3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003b40:	f001 fa1a 	bl	8004f78 <TFT9341_SetTextColor>

		prev_menu=menu;
 8003b44:	4bad      	ldr	r3, [pc, #692]	; (8003dfc <calibrate_feed+0x310>)
 8003b46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003b4a:	4bad      	ldr	r3, [pc, #692]	; (8003e00 <calibrate_feed+0x314>)
 8003b4c:	801a      	strh	r2, [r3, #0]
		prev_sub_menu=sub_menu;
 8003b4e:	4bad      	ldr	r3, [pc, #692]	; (8003e04 <calibrate_feed+0x318>)
 8003b50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003b54:	4bac      	ldr	r3, [pc, #688]	; (8003e08 <calibrate_feed+0x31c>)
 8003b56:	801a      	strh	r2, [r3, #0]
		update=0;
 8003b58:	4bac      	ldr	r3, [pc, #688]	; (8003e0c <calibrate_feed+0x320>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	801a      	strh	r2, [r3, #0]
		draw_back();
 8003b5e:	f7fd ff2b 	bl	80019b8 <draw_back>



		if(skip==0)
 8003b62:	4bac      	ldr	r3, [pc, #688]	; (8003e14 <calibrate_feed+0x328>)
 8003b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d12c      	bne.n	8003bc6 <calibrate_feed+0xda>
		{
			sprintf(str,"Er wordt 20 seconden");
 8003b6c:	1d3b      	adds	r3, r7, #4
 8003b6e:	49ab      	ldr	r1, [pc, #684]	; (8003e1c <calibrate_feed+0x330>)
 8003b70:	4618      	mov	r0, r3
 8003b72:	f006 f953 	bl	8009e1c <siprintf>
			TFT9341_String(15, 20, str);
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2114      	movs	r1, #20
 8003b7c:	200f      	movs	r0, #15
 8003b7e:	f001 fad9 	bl	8005134 <TFT9341_String>
			sprintf(str,"lang voer uitgedraaid.");
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	49a6      	ldr	r1, [pc, #664]	; (8003e20 <calibrate_feed+0x334>)
 8003b86:	4618      	mov	r0, r3
 8003b88:	f006 f948 	bl	8009e1c <siprintf>
			TFT9341_String(15, 50, str);
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2132      	movs	r1, #50	; 0x32
 8003b92:	200f      	movs	r0, #15
 8003b94:	f001 face 	bl	8005134 <TFT9341_String>
			sprintf(str,"Druk op de knop om");
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	49a2      	ldr	r1, [pc, #648]	; (8003e24 <calibrate_feed+0x338>)
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f006 f93d 	bl	8009e1c <siprintf>
			TFT9341_String(15, 80, str);
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2150      	movs	r1, #80	; 0x50
 8003ba8:	200f      	movs	r0, #15
 8003baa:	f001 fac3 	bl	8005134 <TFT9341_String>
			sprintf(str,"verder te gaan.");
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	499d      	ldr	r1, [pc, #628]	; (8003e28 <calibrate_feed+0x33c>)
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f006 f932 	bl	8009e1c <siprintf>
			TFT9341_String(15, 110, str);
 8003bb8:	1d3b      	adds	r3, r7, #4
 8003bba:	461a      	mov	r2, r3
 8003bbc:	216e      	movs	r1, #110	; 0x6e
 8003bbe:	200f      	movs	r0, #15
 8003bc0:	f001 fab8 	bl	8005134 <TFT9341_String>
 8003bc4:	e0d0      	b.n	8003d68 <calibrate_feed+0x27c>

		}
		else if(skip==1)
 8003bc6:	4b93      	ldr	r3, [pc, #588]	; (8003e14 <calibrate_feed+0x328>)
 8003bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d121      	bne.n	8003c14 <calibrate_feed+0x128>
		{
			sprintf(str,"Pak een weegschaal");
 8003bd0:	1d3b      	adds	r3, r7, #4
 8003bd2:	4996      	ldr	r1, [pc, #600]	; (8003e2c <calibrate_feed+0x340>)
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f006 f921 	bl	8009e1c <siprintf>
			TFT9341_String(15, 20, str);
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2114      	movs	r1, #20
 8003be0:	200f      	movs	r0, #15
 8003be2:	f001 faa7 	bl	8005134 <TFT9341_String>
			sprintf(str,"en een lege kom om de");
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	4991      	ldr	r1, [pc, #580]	; (8003e30 <calibrate_feed+0x344>)
 8003bea:	4618      	mov	r0, r3
 8003bec:	f006 f916 	bl	8009e1c <siprintf>
			TFT9341_String(15, 50, str);
 8003bf0:	1d3b      	adds	r3, r7, #4
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2132      	movs	r1, #50	; 0x32
 8003bf6:	200f      	movs	r0, #15
 8003bf8:	f001 fa9c 	bl	8005134 <TFT9341_String>
			sprintf(str,"hoeveelheid voer te meten.");
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	498d      	ldr	r1, [pc, #564]	; (8003e34 <calibrate_feed+0x348>)
 8003c00:	4618      	mov	r0, r3
 8003c02:	f006 f90b 	bl	8009e1c <siprintf>
			TFT9341_String(15, 80, str);
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2150      	movs	r1, #80	; 0x50
 8003c0c:	200f      	movs	r0, #15
 8003c0e:	f001 fa91 	bl	8005134 <TFT9341_String>
 8003c12:	e0a9      	b.n	8003d68 <calibrate_feed+0x27c>
		}
		else if(skip==2)
 8003c14:	4b7f      	ldr	r3, [pc, #508]	; (8003e14 <calibrate_feed+0x328>)
 8003c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d137      	bne.n	8003c8e <calibrate_feed+0x1a2>
		{
			sprintf(str,"Houd eerst de knop");
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	4985      	ldr	r1, [pc, #532]	; (8003e38 <calibrate_feed+0x34c>)
 8003c22:	4618      	mov	r0, r3
 8003c24:	f006 f8fa 	bl	8009e1c <siprintf>
			TFT9341_String(15, 20, str);
 8003c28:	1d3b      	adds	r3, r7, #4
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2114      	movs	r1, #20
 8003c2e:	200f      	movs	r0, #15
 8003c30:	f001 fa80 	bl	8005134 <TFT9341_String>
			sprintf(str,"lang ingedrukt totdat er");
 8003c34:	1d3b      	adds	r3, r7, #4
 8003c36:	4981      	ldr	r1, [pc, #516]	; (8003e3c <calibrate_feed+0x350>)
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f006 f8ef 	bl	8009e1c <siprintf>
			TFT9341_String(15, 50, str);
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	461a      	mov	r2, r3
 8003c42:	2132      	movs	r1, #50	; 0x32
 8003c44:	200f      	movs	r0, #15
 8003c46:	f001 fa75 	bl	8005134 <TFT9341_String>
			sprintf(str,"voer uitkomt. Haal dit wel");
 8003c4a:	1d3b      	adds	r3, r7, #4
 8003c4c:	497c      	ldr	r1, [pc, #496]	; (8003e40 <calibrate_feed+0x354>)
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f006 f8e4 	bl	8009e1c <siprintf>
			TFT9341_String(15, 80, str);
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	461a      	mov	r2, r3
 8003c58:	2150      	movs	r1, #80	; 0x50
 8003c5a:	200f      	movs	r0, #15
 8003c5c:	f001 fa6a 	bl	8005134 <TFT9341_String>
			sprintf(str,"uit de bak voordat je naar");
 8003c60:	1d3b      	adds	r3, r7, #4
 8003c62:	4978      	ldr	r1, [pc, #480]	; (8003e44 <calibrate_feed+0x358>)
 8003c64:	4618      	mov	r0, r3
 8003c66:	f006 f8d9 	bl	8009e1c <siprintf>
			TFT9341_String(15, 110, str);
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	216e      	movs	r1, #110	; 0x6e
 8003c70:	200f      	movs	r0, #15
 8003c72:	f001 fa5f 	bl	8005134 <TFT9341_String>
			sprintf(str,"de volgende stap gaat.");
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	4973      	ldr	r1, [pc, #460]	; (8003e48 <calibrate_feed+0x35c>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f006 f8ce 	bl	8009e1c <siprintf>
			TFT9341_String(15, 140, str);
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	461a      	mov	r2, r3
 8003c84:	218c      	movs	r1, #140	; 0x8c
 8003c86:	200f      	movs	r0, #15
 8003c88:	f001 fa54 	bl	8005134 <TFT9341_String>
 8003c8c:	e06c      	b.n	8003d68 <calibrate_feed+0x27c>
		}
		else if(skip==3)
 8003c8e:	4b61      	ldr	r3, [pc, #388]	; (8003e14 <calibrate_feed+0x328>)
 8003c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d121      	bne.n	8003cdc <calibrate_feed+0x1f0>
		{
			sprintf(str,"In de volgende stap");
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	496c      	ldr	r1, [pc, #432]	; (8003e4c <calibrate_feed+0x360>)
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f006 f8bd 	bl	8009e1c <siprintf>
			TFT9341_String(15, 20, str);
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2114      	movs	r1, #20
 8003ca8:	200f      	movs	r0, #15
 8003caa:	f001 fa43 	bl	8005134 <TFT9341_String>
			sprintf(str,"wordt de 20 seconden lang");
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	4967      	ldr	r1, [pc, #412]	; (8003e50 <calibrate_feed+0x364>)
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f006 f8b2 	bl	8009e1c <siprintf>
			TFT9341_String(15, 50, str);
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2132      	movs	r1, #50	; 0x32
 8003cbe:	200f      	movs	r0, #15
 8003cc0:	f001 fa38 	bl	8005134 <TFT9341_String>
			sprintf(str,"voer uitgedraaid.");
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	4963      	ldr	r1, [pc, #396]	; (8003e54 <calibrate_feed+0x368>)
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f006 f8a7 	bl	8009e1c <siprintf>
			TFT9341_String(15, 80, str);
 8003cce:	1d3b      	adds	r3, r7, #4
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2150      	movs	r1, #80	; 0x50
 8003cd4:	200f      	movs	r0, #15
 8003cd6:	f001 fa2d 	bl	8005134 <TFT9341_String>
 8003cda:	e045      	b.n	8003d68 <calibrate_feed+0x27c>
		}
		else if(skip==4)
 8003cdc:	4b4d      	ldr	r3, [pc, #308]	; (8003e14 <calibrate_feed+0x328>)
 8003cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d116      	bne.n	8003d14 <calibrate_feed+0x228>
		{
			sprintf(str,"Gemeten hoeveelheid");
 8003ce6:	1d3b      	adds	r3, r7, #4
 8003ce8:	495b      	ldr	r1, [pc, #364]	; (8003e58 <calibrate_feed+0x36c>)
 8003cea:	4618      	mov	r0, r3
 8003cec:	f006 f896 	bl	8009e1c <siprintf>
			TFT9341_String(15, 20, str);
 8003cf0:	1d3b      	adds	r3, r7, #4
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2114      	movs	r1, #20
 8003cf6:	200f      	movs	r0, #15
 8003cf8:	f001 fa1c 	bl	8005134 <TFT9341_String>
			sprintf(str,"voer: ");
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	4957      	ldr	r1, [pc, #348]	; (8003e5c <calibrate_feed+0x370>)
 8003d00:	4618      	mov	r0, r3
 8003d02:	f006 f88b 	bl	8009e1c <siprintf>
			TFT9341_String(15, 50, str);
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2132      	movs	r1, #50	; 0x32
 8003d0c:	200f      	movs	r0, #15
 8003d0e:	f001 fa11 	bl	8005134 <TFT9341_String>
 8003d12:	e029      	b.n	8003d68 <calibrate_feed+0x27c>

		}
		else if(skip==5)
 8003d14:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <calibrate_feed+0x328>)
 8003d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d124      	bne.n	8003d68 <calibrate_feed+0x27c>
		{
			sprintf(str,"De voerhoeveelheid is");
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	494f      	ldr	r1, [pc, #316]	; (8003e60 <calibrate_feed+0x374>)
 8003d22:	4618      	mov	r0, r3
 8003d24:	f006 f87a 	bl	8009e1c <siprintf>
			TFT9341_String(15, 20, str);
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2114      	movs	r1, #20
 8003d2e:	200f      	movs	r0, #15
 8003d30:	f001 fa00 	bl	8005134 <TFT9341_String>
			sprintf(str,"gecalibreerd!");
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	494b      	ldr	r1, [pc, #300]	; (8003e64 <calibrate_feed+0x378>)
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f006 f86f 	bl	8009e1c <siprintf>
			TFT9341_String(15, 50, str);
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	461a      	mov	r2, r3
 8003d42:	2132      	movs	r1, #50	; 0x32
 8003d44:	200f      	movs	r0, #15
 8003d46:	f001 f9f5 	bl	8005134 <TFT9341_String>
			sprintf(str,"Calibratiewaarde:%d  ",feed_cal);
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <calibrate_feed+0x37c>)
 8003d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d50:	461a      	mov	r2, r3
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	4945      	ldr	r1, [pc, #276]	; (8003e6c <calibrate_feed+0x380>)
 8003d56:	4618      	mov	r0, r3
 8003d58:	f006 f860 	bl	8009e1c <siprintf>
			TFT9341_String(15, 80, str);
 8003d5c:	1d3b      	adds	r3, r7, #4
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2150      	movs	r1, #80	; 0x50
 8003d62:	200f      	movs	r0, #15
 8003d64:	f001 f9e6 	bl	8005134 <TFT9341_String>
		}

	}

	if(selection!=prev_selection)
 8003d68:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <calibrate_feed+0x32c>)
 8003d6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003d6e:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <calibrate_feed+0x324>)
 8003d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d03d      	beq.n	8003df4 <calibrate_feed+0x308>
	{
		prev_selection=selection;
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <calibrate_feed+0x32c>)
 8003d7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <calibrate_feed+0x324>)
 8003d80:	801a      	strh	r2, [r3, #0]

		if(skip!=4)
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <calibrate_feed+0x328>)
 8003d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d01b      	beq.n	8003dc4 <calibrate_feed+0x2d8>
		{
			limit_selection(0, 1);
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f7fd f9ca 	bl	8001128 <limit_selection>
			if(selection==0)
 8003d94:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <calibrate_feed+0x32c>)
 8003d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d108      	bne.n	8003db0 <calibrate_feed+0x2c4>
			{
				TFT9341_FillRect(15,190+29+4,15+40,190+29+4+2,0x0000); //streep onder terugknop verwijderen.
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	23e1      	movs	r3, #225	; 0xe1
 8003da4:	2237      	movs	r2, #55	; 0x37
 8003da6:	21df      	movs	r1, #223	; 0xdf
 8003da8:	200f      	movs	r0, #15
 8003daa:	f001 f819 	bl	8004de0 <TFT9341_FillRect>
	}




}
 8003dae:	e021      	b.n	8003df4 <calibrate_feed+0x308>
				TFT9341_FillRect(15,190+29+4,15+40,190+29+4+2,0xFD60);
 8003db0:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	23e1      	movs	r3, #225	; 0xe1
 8003db8:	2237      	movs	r2, #55	; 0x37
 8003dba:	21df      	movs	r1, #223	; 0xdf
 8003dbc:	200f      	movs	r0, #15
 8003dbe:	f001 f80f 	bl	8004de0 <TFT9341_FillRect>
}
 8003dc2:	e017      	b.n	8003df4 <calibrate_feed+0x308>
			limit_selection(1,99);
 8003dc4:	2163      	movs	r1, #99	; 0x63
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	f7fd f9ae 	bl	8001128 <limit_selection>
			feed_cal=selection;
 8003dcc:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <calibrate_feed+0x32c>)
 8003dce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003dd2:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <calibrate_feed+0x37c>)
 8003dd4:	801a      	strh	r2, [r3, #0]
			sprintf(str,"%d g   ",feed_cal);
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <calibrate_feed+0x37c>)
 8003dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	4923      	ldr	r1, [pc, #140]	; (8003e70 <calibrate_feed+0x384>)
 8003de2:	4618      	mov	r0, r3
 8003de4:	f006 f81a 	bl	8009e1c <siprintf>
			TFT9341_String(80, 50, str);
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	461a      	mov	r2, r3
 8003dec:	2132      	movs	r1, #50	; 0x32
 8003dee:	2050      	movs	r0, #80	; 0x50
 8003df0:	f001 f9a0 	bl	8005134 <TFT9341_String>
}
 8003df4:	bf00      	nop
 8003df6:	3768      	adds	r7, #104	; 0x68
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	200008c4 	.word	0x200008c4
 8003e00:	20000708 	.word	0x20000708
 8003e04:	2000070a 	.word	0x2000070a
 8003e08:	2000070c 	.word	0x2000070c
 8003e0c:	200008bc 	.word	0x200008bc
 8003e10:	20000b80 	.word	0x20000b80
 8003e14:	200008ac 	.word	0x200008ac
 8003e18:	20000ab0 	.word	0x20000ab0
 8003e1c:	0800a9a0 	.word	0x0800a9a0
 8003e20:	0800a9b8 	.word	0x0800a9b8
 8003e24:	0800a9d0 	.word	0x0800a9d0
 8003e28:	0800a9e4 	.word	0x0800a9e4
 8003e2c:	0800a9f4 	.word	0x0800a9f4
 8003e30:	0800aa08 	.word	0x0800aa08
 8003e34:	0800aa20 	.word	0x0800aa20
 8003e38:	0800aa3c 	.word	0x0800aa3c
 8003e3c:	0800aa50 	.word	0x0800aa50
 8003e40:	0800aa6c 	.word	0x0800aa6c
 8003e44:	0800aa88 	.word	0x0800aa88
 8003e48:	0800aaa4 	.word	0x0800aaa4
 8003e4c:	0800aabc 	.word	0x0800aabc
 8003e50:	0800aad0 	.word	0x0800aad0
 8003e54:	0800aaec 	.word	0x0800aaec
 8003e58:	0800ab00 	.word	0x0800ab00
 8003e5c:	0800ab14 	.word	0x0800ab14
 8003e60:	0800ab1c 	.word	0x0800ab1c
 8003e64:	0800ab34 	.word	0x0800ab34
 8003e68:	2000071c 	.word	0x2000071c
 8003e6c:	0800ab44 	.word	0x0800ab44
 8003e70:	0800a984 	.word	0x0800a984

08003e74 <main>:
 * @retval int
 */


int main(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(BLED_GPIO_Port,BLED_Pin,GPIO_PIN_SET);
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e80:	4888      	ldr	r0, [pc, #544]	; (80040a4 <main+0x230>)
 8003e82:	f002 feef 	bl	8006c64 <HAL_GPIO_WritePin>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003e86:	f002 fba9 	bl	80065dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003e8a:	f000 fae9 	bl	8004460 <SystemClock_Config>
	//HAL_TIM_Base_Start_IT(&htim1);

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003e8e:	f000 fdbd 	bl	8004a0c <MX_GPIO_Init>
	MX_SPI1_Init();
 8003e92:	f000 fb7b 	bl	800458c <MX_SPI1_Init>
	MX_TIM1_Init();
 8003e96:	f000 fbe5 	bl	8004664 <MX_TIM1_Init>
	MX_SPI2_Init();
 8003e9a:	f000 fbad 	bl	80045f8 <MX_SPI2_Init>
	MX_TIM2_Init();
 8003e9e:	f000 fc83 	bl	80047a8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8003ea2:	f000 fccf 	bl	8004844 <MX_TIM3_Init>
	MX_I2C1_Init();
 8003ea6:	f000 fb43 	bl	8004530 <MX_I2C1_Init>
	MX_TIM4_Init();
 8003eaa:	f000 fd19 	bl	80048e0 <MX_TIM4_Init>
	MX_TIM10_Init();
 8003eae:	f000 fd65 	bl	800497c <MX_TIM10_Init>
	MX_TIM11_Init();
 8003eb2:	f000 fd87 	bl	80049c4 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */



	TFT9341_ini(240, 320);
 8003eb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003eba:	20f0      	movs	r0, #240	; 0xf0
 8003ebc:	f001 f9e4 	bl	8005288 <TFT9341_ini>
	TFT9341_SetRotation(1);
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f001 f95b 	bl	800517c <TFT9341_SetRotation>
	TFT9341_FillScreen(0x000);
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f000 fffe 	bl	8004ec8 <TFT9341_FillScreen>


	//extern short feed_time[4][2];
	feed_time[0][0]=8;
 8003ecc:	4b76      	ldr	r3, [pc, #472]	; (80040a8 <main+0x234>)
 8003ece:	2208      	movs	r2, #8
 8003ed0:	801a      	strh	r2, [r3, #0]
	feed_time[0][1]=0;
 8003ed2:	4b75      	ldr	r3, [pc, #468]	; (80040a8 <main+0x234>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	805a      	strh	r2, [r3, #2]
	feed_time[1][0]=13;
 8003ed8:	4b73      	ldr	r3, [pc, #460]	; (80040a8 <main+0x234>)
 8003eda:	220d      	movs	r2, #13
 8003edc:	809a      	strh	r2, [r3, #4]
	feed_time[1][1]=1;
 8003ede:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <main+0x234>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	80da      	strh	r2, [r3, #6]
	feed_time[2][0]=18;
 8003ee4:	4b70      	ldr	r3, [pc, #448]	; (80040a8 <main+0x234>)
 8003ee6:	2212      	movs	r2, #18
 8003ee8:	811a      	strh	r2, [r3, #8]
	feed_time[2][1]=0;
 8003eea:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <main+0x234>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	815a      	strh	r2, [r3, #10]
	feed_time[3][0]=0;
 8003ef0:	4b6d      	ldr	r3, [pc, #436]	; (80040a8 <main+0x234>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	819a      	strh	r2, [r3, #12]
	feed_time[3][1]=10;
 8003ef6:	4b6c      	ldr	r3, [pc, #432]	; (80040a8 <main+0x234>)
 8003ef8:	220a      	movs	r2, #10
 8003efa:	81da      	strh	r2, [r3, #14]
	//long text_colour;
	//short feed_status=1;
	//curr_time[0]=19;
	//curr_time[1]=47;
	//short feed_number=1;
	feed_amount[0]=7;
 8003efc:	4b6b      	ldr	r3, [pc, #428]	; (80040ac <main+0x238>)
 8003efe:	2207      	movs	r2, #7
 8003f00:	801a      	strh	r2, [r3, #0]
	feed_amount[1]=10;
 8003f02:	4b6a      	ldr	r3, [pc, #424]	; (80040ac <main+0x238>)
 8003f04:	220a      	movs	r2, #10
 8003f06:	805a      	strh	r2, [r3, #2]
	feed_amount[2]=10;
 8003f08:	4b68      	ldr	r3, [pc, #416]	; (80040ac <main+0x238>)
 8003f0a:	220a      	movs	r2, #10
 8003f0c:	809a      	strh	r2, [r3, #4]
	feed_amount[3]=7;
 8003f0e:	4b67      	ldr	r3, [pc, #412]	; (80040ac <main+0x238>)
 8003f10:	2207      	movs	r2, #7
 8003f12:	80da      	strh	r2, [r3, #6]
	prev_selection=-1;
 8003f14:	4b66      	ldr	r3, [pc, #408]	; (80040b0 <main+0x23c>)
 8003f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f1a:	801a      	strh	r2, [r3, #0]



	pressed=false;
 8003f1c:	4b65      	ldr	r3, [pc, #404]	; (80040b4 <main+0x240>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
	char str[5];

	button_pressed=false;
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <main+0x244>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
	/*
	int hour,min;
	hour=23;
	min=14;
	 */
	GPIO_PinState SW_state=GPIO_PIN_RESET;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	737b      	strb	r3, [r7, #13]
	//HAL_GPIO_WritePin(BLED_GPIO_Port,BLED_Pin,GPIO_PIN_RESET);
	//char curr_time [50];
	HAL_TIM_Base_Start(&htim1);
 8003f2c:	4863      	ldr	r0, [pc, #396]	; (80040bc <main+0x248>)
 8003f2e:	f005 f8d1 	bl	80090d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8003f32:	4863      	ldr	r0, [pc, #396]	; (80040c0 <main+0x24c>)
 8003f34:	f005 f8ce 	bl	80090d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8003f38:	4862      	ldr	r0, [pc, #392]	; (80040c4 <main+0x250>)
 8003f3a:	f005 f8cb 	bl	80090d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8003f3e:	4862      	ldr	r0, [pc, #392]	; (80040c8 <main+0x254>)
 8003f40:	f005 f8c8 	bl	80090d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim10);
 8003f44:	4861      	ldr	r0, [pc, #388]	; (80040cc <main+0x258>)
 8003f46:	f005 f8c5 	bl	80090d4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	485b      	ldr	r0, [pc, #364]	; (80040bc <main+0x248>)
 8003f4e:	f005 f975 	bl	800923c <HAL_TIM_PWM_Start>
	//TIM1->CCR1=500;
	DS3231_Init(&hi2c1);
 8003f52:	485f      	ldr	r0, [pc, #380]	; (80040d0 <main+0x25c>)
 8003f54:	f001 faf0 	bl	8005538 <DS3231_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//	short count=0;
	HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_RESET); //RESET is turn on
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f5e:	4851      	ldr	r0, [pc, #324]	; (80040a4 <main+0x230>)
 8003f60:	f002 fe80 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_SET); //set is turn on
 8003f64:	2201      	movs	r2, #1
 8003f66:	2108      	movs	r1, #8
 8003f68:	485a      	ldr	r0, [pc, #360]	; (80040d4 <main+0x260>)
 8003f6a:	f002 fe7b 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,GPIO_PIN_SET); //set is turn on
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f74:	484b      	ldr	r0, [pc, #300]	; (80040a4 <main+0x230>)
 8003f76:	f002 fe75 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS1_GPIO_Port,MS1_Pin,GPIO_PIN_SET);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f80:	4848      	ldr	r0, [pc, #288]	; (80040a4 <main+0x230>)
 8003f82:	f002 fe6f 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS2_GPIO_Port,MS2_Pin,GPIO_PIN_SET);
 8003f86:	2201      	movs	r2, #1
 8003f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f8c:	4845      	ldr	r0, [pc, #276]	; (80040a4 <main+0x230>)
 8003f8e:	f002 fe69 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS3_GPIO_Port,MS3_Pin,GPIO_PIN_SET);
 8003f92:	2201      	movs	r2, #1
 8003f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f98:	4842      	ldr	r0, [pc, #264]	; (80040a4 <main+0x230>)
 8003f9a:	f002 fe63 	bl	8006c64 <HAL_GPIO_WritePin>
	menu=0;
 8003f9e:	4b4e      	ldr	r3, [pc, #312]	; (80040d8 <main+0x264>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	801a      	strh	r2, [r3, #0]
	sub_menu=-1;
 8003fa4:	4b4d      	ldr	r3, [pc, #308]	; (80040dc <main+0x268>)
 8003fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003faa:	801a      	strh	r2, [r3, #0]
	skip=0;
 8003fac:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <main+0x26c>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	801a      	strh	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4841      	ldr	r0, [pc, #260]	; (80040bc <main+0x248>)
 8003fb6:	f005 f941 	bl	800923c <HAL_TIM_PWM_Start>

	//sub_menu=0;

	//DS3231_SetTime(&rtc);
	HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin,GPIO_PIN_SET);
 8003fba:	2201      	movs	r2, #1
 8003fbc:	2120      	movs	r1, #32
 8003fbe:	4845      	ldr	r0, [pc, #276]	; (80040d4 <main+0x260>)
 8003fc0:	f002 fe50 	bl	8006c64 <HAL_GPIO_WritePin>
	//play_tune();
	//play_tune();
	//play_tune();
	//play_tune();
	//play_tune();
	HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_RESET);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2108      	movs	r1, #8
 8003fc8:	4842      	ldr	r0, [pc, #264]	; (80040d4 <main+0x260>)
 8003fca:	f002 fe4b 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fd4:	4833      	ldr	r0, [pc, #204]	; (80040a4 <main+0x230>)
 8003fd6:	f002 fe45 	bl	8006c64 <HAL_GPIO_WritePin>
	W25qxx_Init();
 8003fda:	f001 ffd5 	bl	8005f88 <W25qxx_Init>
		buffer[i]=0;
	}
	read_vars();
	 */

	switch(time_out)
 8003fde:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <main+0x270>)
 8003fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d825      	bhi.n	8004034 <main+0x1c0>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <main+0x17c>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004005 	.word	0x08004005
 8003ff4:	0800400f 	.word	0x0800400f
 8003ff8:	08004019 	.word	0x08004019
 8003ffc:	08004023 	.word	0x08004023
 8004000:	0800402d 	.word	0x0800402d
	{
	case 0:
		timeout_time=10000; // in ms
 8004004:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <main+0x274>)
 8004006:	f242 7210 	movw	r2, #10000	; 0x2710
 800400a:	601a      	str	r2, [r3, #0]
		break;
 800400c:	e012      	b.n	8004034 <main+0x1c0>
	case 1:
		timeout_time=20000; // in ms
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <main+0x274>)
 8004010:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004014:	601a      	str	r2, [r3, #0]
		break;
 8004016:	e00d      	b.n	8004034 <main+0x1c0>
	case 2:
		timeout_time=30000; // in ms
 8004018:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <main+0x274>)
 800401a:	f247 5230 	movw	r2, #30000	; 0x7530
 800401e:	601a      	str	r2, [r3, #0]
		break;
 8004020:	e008      	b.n	8004034 <main+0x1c0>
	case 3:
		timeout_time=60000; // in ms
 8004022:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <main+0x274>)
 8004024:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004028:	601a      	str	r2, [r3, #0]
		break;
 800402a:	e003      	b.n	8004034 <main+0x1c0>
	case 4:
		timeout_time=300000; // in ms
 800402c:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <main+0x274>)
 800402e:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <main+0x278>)
 8004030:	601a      	str	r2, [r3, #0]
		break;
 8004032:	bf00      	nop
	}
	read_vars();
 8004034:	f7fd fa36 	bl	80014a4 <read_vars>
	DS3231_GetTime(&rtc);
 8004038:	482d      	ldr	r0, [pc, #180]	; (80040f0 <main+0x27c>)
 800403a:	f001 fa8d 	bl	8005558 <DS3231_GetTime>
	curr_day=rtc.DaysOfWeek;
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <main+0x27c>)
 8004040:	78da      	ldrb	r2, [r3, #3]
 8004042:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <main+0x280>)
 8004044:	701a      	strb	r2, [r3, #0]
	prev_day=curr_day;
 8004046:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <main+0x280>)
 8004048:	781a      	ldrb	r2, [r3, #0]
 800404a:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <main+0x284>)
 800404c:	701a      	strb	r2, [r3, #0]
	play_tune();
 800404e:	f001 fe65 	bl	8005d1c <play_tune>
	//HAL_GPIO_WritePin(BLED_GPIO_Port,BLED_Pin,GPIO_PIN_SET);
	//feed_cat(1000);
	TIM1->CCR1=screen_brightness;
 8004052:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <main+0x288>)
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <main+0x28c>)
 8004058:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(BLED_GPIO_Port,BLED_Pin,GPIO_PIN_RESET);
 800405a:	2200      	movs	r2, #0
 800405c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004060:	4810      	ldr	r0, [pc, #64]	; (80040a4 <main+0x230>)
 8004062:	f002 fdff 	bl	8006c64 <HAL_GPIO_WritePin>
	while (1)
	{
		menu_draw(); //takes care of all drawing actions on the screen
 8004066:	f7fc fa9f 	bl	80005a8 <menu_draw>
		selection_action();
 800406a:	f7fc faeb 	bl	8000644 <selection_action>

		//play_tone("b3",1000);
		//play_tone("c3",1000);
		//play_tone("d3",1000);
		//HAL_GPIO_WritePin(BLED_GPIO_Port,BLED_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 800406e:	2201      	movs	r2, #1
 8004070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004074:	4817      	ldr	r0, [pc, #92]	; (80040d4 <main+0x260>)
 8004076:	f002 fdf5 	bl	8006c64 <HAL_GPIO_WritePin>
		//speed=65000;
		//motor_intensity(2);
		//feed_cat(5000);


		if(TIM2->CNT-timeout_old>timeout_time)
 800407a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	4a20      	ldr	r2, [pc, #128]	; (8004104 <main+0x290>)
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <main+0x274>)
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	4293      	cmp	r3, r2
 800408c:	d93e      	bls.n	800410c <main+0x298>
		{
			//scherm uitdoen
			screen_off=1;
 800408e:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <main+0x294>)
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
			TFT9341_FillScreen(0x0000);
 8004094:	2000      	movs	r0, #0
 8004096:	f000 ff17 	bl	8004ec8 <TFT9341_FillScreen>
			TIM1->CCR1=0;
 800409a:	4b19      	ldr	r3, [pc, #100]	; (8004100 <main+0x28c>)
 800409c:	2200      	movs	r2, #0
 800409e:	635a      	str	r2, [r3, #52]	; 0x34
 80040a0:	e042      	b.n	8004128 <main+0x2b4>
 80040a2:	bf00      	nop
 80040a4:	40020000 	.word	0x40020000
 80040a8:	20000a4c 	.word	0x20000a4c
 80040ac:	20000b28 	.word	0x20000b28
 80040b0:	20000b80 	.word	0x20000b80
 80040b4:	20000b30 	.word	0x20000b30
 80040b8:	200008d6 	.word	0x200008d6
 80040bc:	20000b38 	.word	0x20000b38
 80040c0:	20000be0 	.word	0x20000be0
 80040c4:	20000a68 	.word	0x20000a68
 80040c8:	20000964 	.word	0x20000964
 80040cc:	20000a04 	.word	0x20000a04
 80040d0:	200009b0 	.word	0x200009b0
 80040d4:	40020400 	.word	0x40020400
 80040d8:	200008c4 	.word	0x200008c4
 80040dc:	2000070a 	.word	0x2000070a
 80040e0:	200008ac 	.word	0x200008ac
 80040e4:	2000071a 	.word	0x2000071a
 80040e8:	200008cc 	.word	0x200008cc
 80040ec:	000493e0 	.word	0x000493e0
 80040f0:	20000720 	.word	0x20000720
 80040f4:	200008c2 	.word	0x200008c2
 80040f8:	20000706 	.word	0x20000706
 80040fc:	2000070e 	.word	0x2000070e
 8004100:	40010000 	.word	0x40010000
 8004104:	200008c8 	.word	0x200008c8
 8004108:	200008d8 	.word	0x200008d8
		}
		else if(screen_off==1)
 800410c:	4b94      	ldr	r3, [pc, #592]	; (8004360 <main+0x4ec>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <main+0x2b4>
		{
			TIM1->CCR1=screen_brightness;
 8004114:	4b93      	ldr	r3, [pc, #588]	; (8004364 <main+0x4f0>)
 8004116:	881a      	ldrh	r2, [r3, #0]
 8004118:	4b93      	ldr	r3, [pc, #588]	; (8004368 <main+0x4f4>)
 800411a:	635a      	str	r2, [r3, #52]	; 0x34
			screen_off=0;
 800411c:	4b90      	ldr	r3, [pc, #576]	; (8004360 <main+0x4ec>)
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
			update=1;
 8004122:	4b92      	ldr	r3, [pc, #584]	; (800436c <main+0x4f8>)
 8004124:	2201      	movs	r2, #1
 8004126:	801a      	strh	r2, [r3, #0]
		}



		// check de voertijden elke 10sec
		if(TIM2->CNT-time_check_old>10000 && (sub_menu!=0 || menu!=1 || sub_menu!=2))
 8004128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	4a90      	ldr	r2, [pc, #576]	; (8004370 <main+0x4fc>)
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	f242 7210 	movw	r2, #10000	; 0x2710
 8004138:	4293      	cmp	r3, r2
 800413a:	d919      	bls.n	8004170 <main+0x2fc>
 800413c:	4b8d      	ldr	r3, [pc, #564]	; (8004374 <main+0x500>)
 800413e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <main+0x2e6>
 8004146:	4b8c      	ldr	r3, [pc, #560]	; (8004378 <main+0x504>)
 8004148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d104      	bne.n	800415a <main+0x2e6>
 8004150:	4b88      	ldr	r3, [pc, #544]	; (8004374 <main+0x500>)
 8004152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d00a      	beq.n	8004170 <main+0x2fc>
		{
			DS3231_GetTime(&rtc); //get the current time
 800415a:	4888      	ldr	r0, [pc, #544]	; (800437c <main+0x508>)
 800415c:	f001 f9fc 	bl	8005558 <DS3231_GetTime>
			time_check_old=TIM2->CNT;
 8004160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	461a      	mov	r2, r3
 8004168:	4b81      	ldr	r3, [pc, #516]	; (8004370 <main+0x4fc>)
 800416a:	601a      	str	r2, [r3, #0]
			feed_cat_time();
 800416c:	f7fd fa36 	bl	80015dc <feed_cat_time>
			sprintf(str,"%d",buffer[i]);
			TFT9341_String(5,5+10*i,str);
		}
		 */

		curr_day=rtc.DaysOfWeek;
 8004170:	4b82      	ldr	r3, [pc, #520]	; (800437c <main+0x508>)
 8004172:	78da      	ldrb	r2, [r3, #3]
 8004174:	4b82      	ldr	r3, [pc, #520]	; (8004380 <main+0x50c>)
 8004176:	701a      	strb	r2, [r3, #0]





		time_now=TIM10->CNT;
 8004178:	4b82      	ldr	r3, [pc, #520]	; (8004384 <main+0x510>)
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	817b      	strh	r3, [r7, #10]
		time_diff=time_now-time_old;
 800417e:	897a      	ldrh	r2, [r7, #10]
 8004180:	89fb      	ldrh	r3, [r7, #14]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	813b      	strh	r3, [r7, #8]

		tone_now=TIM4->CNT;
 8004186:	4b80      	ldr	r3, [pc, #512]	; (8004388 <main+0x514>)
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	461a      	mov	r2, r3
 800418c:	4b7f      	ldr	r3, [pc, #508]	; (800438c <main+0x518>)
 800418e:	601a      	str	r2, [r3, #0]
		tone_diff=tone_now-tone_old;
 8004190:	4b7e      	ldr	r3, [pc, #504]	; (800438c <main+0x518>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b7e      	ldr	r3, [pc, #504]	; (8004390 <main+0x51c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	4a7e      	ldr	r2, [pc, #504]	; (8004394 <main+0x520>)
 800419c:	6013      	str	r3, [r2, #0]
		{
			// keep track of elapsed time for pausing (use tim2)
			// also sleep etc. 
			//play_tune();
		}
		if(button_long_pressed)
 800419e:	4b7e      	ldr	r3, [pc, #504]	; (8004398 <main+0x524>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <main+0x338>
		{
			//HAL_GPIO_TogglePin(EN_GPIO_Port,EN_Pin);
			button_long_pressed=false;
 80041a6:	4b7c      	ldr	r3, [pc, #496]	; (8004398 <main+0x524>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]


		// 	------------------------
		//	BUTTON handling routine
		//
		if(HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)==GPIO_PIN_RESET)  //ingedrukt
 80041ac:	2101      	movs	r1, #1
 80041ae:	487b      	ldr	r0, [pc, #492]	; (800439c <main+0x528>)
 80041b0:	f002 fd40 	bl	8006c34 <HAL_GPIO_ReadPin>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d147      	bne.n	800424a <main+0x3d6>
		{
			if(SW_state==GPIO_PIN_RESET)
 80041ba:	7b7b      	ldrb	r3, [r7, #13]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <main+0x352>
			{
				time_old=TIM10->CNT;
 80041c0:	4b70      	ldr	r3, [pc, #448]	; (8004384 <main+0x510>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	81fb      	strh	r3, [r7, #14]
			}
			time_diff=TIM10->CNT-time_old;
 80041c6:	4b6f      	ldr	r3, [pc, #444]	; (8004384 <main+0x510>)
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	89fb      	ldrh	r3, [r7, #14]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	813b      	strh	r3, [r7, #8]
			if(time_diff>1000)
 80041d2:	893b      	ldrh	r3, [r7, #8]
 80041d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d8:	d935      	bls.n	8004246 <main+0x3d2>
			{
				TIM3->CNT=0;
 80041da:	4b71      	ldr	r3, [pc, #452]	; (80043a0 <main+0x52c>)
 80041dc:	2200      	movs	r2, #0
 80041de:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80041e0:	2200      	movs	r2, #0
 80041e2:	2120      	movs	r1, #32
 80041e4:	486f      	ldr	r0, [pc, #444]	; (80043a4 <main+0x530>)
 80041e6:	f002 fd3d 	bl	8006c64 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_SET);
 80041ea:	2201      	movs	r2, #1
 80041ec:	2108      	movs	r1, #8
 80041ee:	486d      	ldr	r0, [pc, #436]	; (80043a4 <main+0x530>)
 80041f0:	f002 fd38 	bl	8006c64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_RESET);
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041fa:	4868      	ldr	r0, [pc, #416]	; (800439c <main+0x528>)
 80041fc:	f002 fd32 	bl	8006c64 <HAL_GPIO_WritePin>
				while(HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)==GPIO_PIN_RESET)
 8004200:	e00f      	b.n	8004222 <main+0x3ae>
				{
					if(TIM3->CNT>speed)
 8004202:	4b67      	ldr	r3, [pc, #412]	; (80043a0 <main+0x52c>)
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	4a68      	ldr	r2, [pc, #416]	; (80043a8 <main+0x534>)
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	4293      	cmp	r3, r2
 800420c:	d909      	bls.n	8004222 <main+0x3ae>
					{
						TIM3->CNT=0;
 800420e:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <main+0x52c>)
 8004210:	2200      	movs	r2, #0
 8004212:	625a      	str	r2, [r3, #36]	; 0x24
						motor_intensity(0);
 8004214:	2000      	movs	r0, #0
 8004216:	f7fd faa5 	bl	8001764 <motor_intensity>
						HAL_GPIO_TogglePin(STEP_GPIO_Port,STEP_Pin);
 800421a:	2110      	movs	r1, #16
 800421c:	4861      	ldr	r0, [pc, #388]	; (80043a4 <main+0x530>)
 800421e:	f002 fd3a 	bl	8006c96 <HAL_GPIO_TogglePin>
				while(HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)==GPIO_PIN_RESET)
 8004222:	2101      	movs	r1, #1
 8004224:	485d      	ldr	r0, [pc, #372]	; (800439c <main+0x528>)
 8004226:	f002 fd05 	bl	8006c34 <HAL_GPIO_ReadPin>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0e8      	beq.n	8004202 <main+0x38e>
					}
				}
				HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_RESET);
 8004230:	2200      	movs	r2, #0
 8004232:	2108      	movs	r1, #8
 8004234:	485b      	ldr	r0, [pc, #364]	; (80043a4 <main+0x530>)
 8004236:	f002 fd15 	bl	8006c64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
 800423a:	2201      	movs	r2, #1
 800423c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004240:	4856      	ldr	r0, [pc, #344]	; (800439c <main+0x528>)
 8004242:	f002 fd0f 	bl	8006c64 <HAL_GPIO_WritePin>
			//HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
			if(SW_state==GPIO_PIN_RESET)
			{

			}
			SW_state=GPIO_PIN_SET;
 8004246:	2301      	movs	r3, #1
 8004248:	737b      	strb	r3, [r7, #13]

		}
		if(HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)==GPIO_PIN_SET)  //weer losgelaten
 800424a:	2101      	movs	r1, #1
 800424c:	4853      	ldr	r0, [pc, #332]	; (800439c <main+0x528>)
 800424e:	f002 fcf1 	bl	8006c34 <HAL_GPIO_ReadPin>
 8004252:	4603      	mov	r3, r0
 8004254:	2b01      	cmp	r3, #1
 8004256:	d13c      	bne.n	80042d2 <main+0x45e>
		{
			time_diff=TIM10->CNT-time_old;
 8004258:	4b4a      	ldr	r3, [pc, #296]	; (8004384 <main+0x510>)
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	b29a      	uxth	r2, r3
 800425e:	89fb      	ldrh	r3, [r7, #14]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	813b      	strh	r3, [r7, #8]
			if(SW_state==GPIO_PIN_SET)
 8004264:	7b7b      	ldrb	r3, [r7, #13]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d131      	bne.n	80042ce <main+0x45a>
			{

				//time_old=TIM10->CNT;

				if(time_diff>80 && time_diff<1000 && button_pressed==false)
 800426a:	893b      	ldrh	r3, [r7, #8]
 800426c:	2b50      	cmp	r3, #80	; 0x50
 800426e:	d927      	bls.n	80042c0 <main+0x44c>
 8004270:	893b      	ldrh	r3, [r7, #8]
 8004272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004276:	d223      	bcs.n	80042c0 <main+0x44c>
 8004278:	4b4c      	ldr	r3, [pc, #304]	; (80043ac <main+0x538>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	f083 0301 	eor.w	r3, r3, #1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01c      	beq.n	80042c0 <main+0x44c>
				{
					HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8004286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800428a:	4849      	ldr	r0, [pc, #292]	; (80043b0 <main+0x53c>)
 800428c:	f002 fd03 	bl	8006c96 <HAL_GPIO_TogglePin>
					button_pressed=true;
 8004290:	4b46      	ldr	r3, [pc, #280]	; (80043ac <main+0x538>)
 8004292:	2201      	movs	r2, #1
 8004294:	701a      	strb	r2, [r3, #0]

					if(sound_intensity!=0)
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <main+0x540>)
 8004298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d009      	beq.n	80042b4 <main+0x440>
					{
						motor_intensity(sound_intensity);
 80042a0:	4b44      	ldr	r3, [pc, #272]	; (80043b4 <main+0x540>)
 80042a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fd fa5c 	bl	8001764 <motor_intensity>
						play_tone("b4",35);
 80042ac:	2123      	movs	r1, #35	; 0x23
 80042ae:	4842      	ldr	r0, [pc, #264]	; (80043b8 <main+0x544>)
 80042b0:	f001 fc8c 	bl	8005bcc <play_tone>
					}

					timeout_old=TIM2->CNT;
 80042b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b3f      	ldr	r3, [pc, #252]	; (80043bc <main+0x548>)
 80042be:	601a      	str	r2, [r3, #0]
				}
				if((time_diff)>1000)
 80042c0:	893b      	ldrh	r3, [r7, #8]
 80042c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042c6:	d902      	bls.n	80042ce <main+0x45a>
				{
					button_long_pressed=true;
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <main+0x524>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	701a      	strb	r2, [r3, #0]
				}
			}
			//time_old=TIM10->CNT;
			//HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
			//HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
			SW_state=GPIO_PIN_RESET; //één keer achter elkaar
 80042ce:	2300      	movs	r3, #0
 80042d0:	737b      	strb	r3, [r7, #13]
			feed_number=1;
		}
		 */


		if(time_switch==0 && menu==0 && screen_off==0)
 80042d2:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <main+0x54c>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f083 0301 	eor.w	r3, r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d075      	beq.n	80043cc <main+0x558>
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <main+0x504>)
 80042e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d170      	bne.n	80043cc <main+0x558>
 80042ea:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <main+0x4ec>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	f083 0301 	eor.w	r3, r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d069      	beq.n	80043cc <main+0x558>
		{
			if(TIM2->CNT-time_switch_old>1000 && menu==0)
 80042f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	4a31      	ldr	r2, [pc, #196]	; (80043c4 <main+0x550>)
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004308:	f240 8096 	bls.w	8004438 <main+0x5c4>
 800430c:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <main+0x504>)
 800430e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 8090 	bne.w	8004438 <main+0x5c4>
			{
				DS3231_GetTime(&rtc);
 8004318:	4818      	ldr	r0, [pc, #96]	; (800437c <main+0x508>)
 800431a:	f001 f91d 	bl	8005558 <DS3231_GetTime>
				time_switch_old=TIM2->CNT;
 800431e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	461a      	mov	r2, r3
 8004326:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <main+0x550>)
 8004328:	601a      	str	r2, [r3, #0]
				time_switch=1;
 800432a:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <main+0x54c>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
				TFT9341_SetTextColor(0xFE0A);
 8004330:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 8004334:	f000 fe20 	bl	8004f78 <TFT9341_SetTextColor>
				TFT9341_SetFont(&Font20);
 8004338:	4823      	ldr	r0, [pc, #140]	; (80043c8 <main+0x554>)
 800433a:	f000 fe3d 	bl	8004fb8 <TFT9341_SetFont>
				TFT9341_String(235, 15,time_text(rtc.Hour, rtc.Min, 1));
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <main+0x508>)
 8004340:	791b      	ldrb	r3, [r3, #4]
 8004342:	b21b      	sxth	r3, r3
 8004344:	4a0d      	ldr	r2, [pc, #52]	; (800437c <main+0x508>)
 8004346:	7952      	ldrb	r2, [r2, #5]
 8004348:	b211      	sxth	r1, r2
 800434a:	2201      	movs	r2, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f7fc fe01 	bl	8000f54 <time_text>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	210f      	movs	r1, #15
 8004358:	20eb      	movs	r0, #235	; 0xeb
 800435a:	f000 feeb 	bl	8005134 <TFT9341_String>
			if(TIM2->CNT-time_switch_old>1000 && menu==0)
 800435e:	e06b      	b.n	8004438 <main+0x5c4>
 8004360:	200008d8 	.word	0x200008d8
 8004364:	2000070e 	.word	0x2000070e
 8004368:	40010000 	.word	0x40010000
 800436c:	200008bc 	.word	0x200008bc
 8004370:	200008d0 	.word	0x200008d0
 8004374:	2000070a 	.word	0x2000070a
 8004378:	200008c4 	.word	0x200008c4
 800437c:	20000720 	.word	0x20000720
 8004380:	200008c2 	.word	0x200008c2
 8004384:	40014400 	.word	0x40014400
 8004388:	40000800 	.word	0x40000800
 800438c:	20000a60 	.word	0x20000a60
 8004390:	20000b84 	.word	0x20000b84
 8004394:	20000a64 	.word	0x20000a64
 8004398:	200008d7 	.word	0x200008d7
 800439c:	40020000 	.word	0x40020000
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40020400 	.word	0x40020400
 80043a8:	20000710 	.word	0x20000710
 80043ac:	200008d6 	.word	0x200008d6
 80043b0:	40020800 	.word	0x40020800
 80043b4:	20000718 	.word	0x20000718
 80043b8:	0800ab5c 	.word	0x0800ab5c
 80043bc:	200008c8 	.word	0x200008c8
 80043c0:	200008c6 	.word	0x200008c6
 80043c4:	20000b34 	.word	0x20000b34
 80043c8:	20000014 	.word	0x20000014
			}
		}
		else
		{
			if(TIM2->CNT-time_switch_old>1000 && menu==0 && screen_off==0)
 80043cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <main+0x5d0>)
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043dc:	d92d      	bls.n	800443a <main+0x5c6>
 80043de:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <main+0x5d4>)
 80043e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d128      	bne.n	800443a <main+0x5c6>
 80043e8:	4b18      	ldr	r3, [pc, #96]	; (800444c <main+0x5d8>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	f083 0301 	eor.w	r3, r3, #1
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d021      	beq.n	800443a <main+0x5c6>
			{
				time_switch=0;
 80043f6:	4b16      	ldr	r3, [pc, #88]	; (8004450 <main+0x5dc>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
				TFT9341_SetTextColor(0xFE0A);
 80043fc:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 8004400:	f000 fdba 	bl	8004f78 <TFT9341_SetTextColor>
				TFT9341_SetFont(&Font20);
 8004404:	4813      	ldr	r0, [pc, #76]	; (8004454 <main+0x5e0>)
 8004406:	f000 fdd7 	bl	8004fb8 <TFT9341_SetFont>
				TFT9341_String(235, 15,time_text(rtc.Hour, rtc.Min, 0));
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <main+0x5e4>)
 800440c:	791b      	ldrb	r3, [r3, #4]
 800440e:	b21b      	sxth	r3, r3
 8004410:	4a11      	ldr	r2, [pc, #68]	; (8004458 <main+0x5e4>)
 8004412:	7952      	ldrb	r2, [r2, #5]
 8004414:	b211      	sxth	r1, r2
 8004416:	2200      	movs	r2, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f7fc fd9b 	bl	8000f54 <time_text>
 800441e:	4603      	mov	r3, r0
 8004420:	461a      	mov	r2, r3
 8004422:	210f      	movs	r1, #15
 8004424:	20eb      	movs	r0, #235	; 0xeb
 8004426:	f000 fe85 	bl	8005134 <TFT9341_String>
				time_switch_old=TIM2->CNT;
 800442a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	461a      	mov	r2, r3
 8004432:	4b04      	ldr	r3, [pc, #16]	; (8004444 <main+0x5d0>)
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e000      	b.n	800443a <main+0x5c6>
			if(TIM2->CNT-time_switch_old>1000 && menu==0)
 8004438:	bf00      	nop
		TFT9341_String(250,180,str);
		 */



		pressed=false;
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <main+0x5e8>)
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
		menu_draw(); //takes care of all drawing actions on the screen
 8004440:	e611      	b.n	8004066 <main+0x1f2>
 8004442:	bf00      	nop
 8004444:	20000b34 	.word	0x20000b34
 8004448:	200008c4 	.word	0x200008c4
 800444c:	200008d8 	.word	0x200008d8
 8004450:	200008c6 	.word	0x200008c6
 8004454:	20000014 	.word	0x20000014
 8004458:	20000720 	.word	0x20000720
 800445c:	20000b30 	.word	0x20000b30

08004460 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b094      	sub	sp, #80	; 0x50
 8004464:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004466:	f107 0320 	add.w	r3, r7, #32
 800446a:	2230      	movs	r2, #48	; 0x30
 800446c:	2100      	movs	r1, #0
 800446e:	4618      	mov	r0, r3
 8004470:	f005 fccc 	bl	8009e0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004474:	f107 030c 	add.w	r3, r7, #12
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <SystemClock_Config+0xc8>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	4a26      	ldr	r2, [pc, #152]	; (8004528 <SystemClock_Config+0xc8>)
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004492:	6413      	str	r3, [r2, #64]	; 0x40
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <SystemClock_Config+0xc8>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044a0:	2300      	movs	r3, #0
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	4b21      	ldr	r3, [pc, #132]	; (800452c <SystemClock_Config+0xcc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a20      	ldr	r2, [pc, #128]	; (800452c <SystemClock_Config+0xcc>)
 80044aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b1e      	ldr	r3, [pc, #120]	; (800452c <SystemClock_Config+0xcc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044b8:	607b      	str	r3, [r7, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044bc:	2302      	movs	r3, #2
 80044be:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044c0:	2301      	movs	r3, #1
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044c4:	2310      	movs	r3, #16
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044c8:	2302      	movs	r3, #2
 80044ca:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044cc:	2300      	movs	r3, #0
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80044d0:	2308      	movs	r3, #8
 80044d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80044d4:	2364      	movs	r3, #100	; 0x64
 80044d6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044d8:	2302      	movs	r3, #2
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80044dc:	2304      	movs	r3, #4
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044e0:	f107 0320 	add.w	r3, r7, #32
 80044e4:	4618      	mov	r0, r3
 80044e6:	f003 fb9f 	bl	8007c28 <HAL_RCC_OscConfig>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80044f0:	f000 fbb6 	bl	8004c60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044f4:	230f      	movs	r3, #15
 80044f6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044f8:	2302      	movs	r3, #2
 80044fa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004500:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004504:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800450a:	f107 030c 	add.w	r3, r7, #12
 800450e:	2103      	movs	r1, #3
 8004510:	4618      	mov	r0, r3
 8004512:	f003 fe01 	bl	8008118 <HAL_RCC_ClockConfig>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800451c:	f000 fba0 	bl	8004c60 <Error_Handler>
	}
}
 8004520:	bf00      	nop
 8004522:	3750      	adds	r7, #80	; 0x50
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	40007000 	.word	0x40007000

08004530 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004534:	4b12      	ldr	r3, [pc, #72]	; (8004580 <MX_I2C1_Init+0x50>)
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <MX_I2C1_Init+0x54>)
 8004538:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <MX_I2C1_Init+0x50>)
 800453c:	4a12      	ldr	r2, [pc, #72]	; (8004588 <MX_I2C1_Init+0x58>)
 800453e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <MX_I2C1_Init+0x50>)
 8004542:	2200      	movs	r2, #0
 8004544:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8004546:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <MX_I2C1_Init+0x50>)
 8004548:	2200      	movs	r2, #0
 800454a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800454c:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <MX_I2C1_Init+0x50>)
 800454e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004552:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004554:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <MX_I2C1_Init+0x50>)
 8004556:	2200      	movs	r2, #0
 8004558:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <MX_I2C1_Init+0x50>)
 800455c:	2200      	movs	r2, #0
 800455e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <MX_I2C1_Init+0x50>)
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <MX_I2C1_Init+0x50>)
 8004568:	2200      	movs	r2, #0
 800456a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800456c:	4804      	ldr	r0, [pc, #16]	; (8004580 <MX_I2C1_Init+0x50>)
 800456e:	f002 fbc5 	bl	8006cfc <HAL_I2C_Init>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8004578:	f000 fb72 	bl	8004c60 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}
 8004580:	200009b0 	.word	0x200009b0
 8004584:	40005400 	.word	0x40005400
 8004588:	000186a0 	.word	0x000186a0

0800458c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004590:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <MX_SPI1_Init+0x64>)
 8004592:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <MX_SPI1_Init+0x68>)
 8004594:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004596:	4b16      	ldr	r3, [pc, #88]	; (80045f0 <MX_SPI1_Init+0x64>)
 8004598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800459c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045aa:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045bc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045d8:	220a      	movs	r2, #10
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045dc:	4804      	ldr	r0, [pc, #16]	; (80045f0 <MX_SPI1_Init+0x64>)
 80045de:	f003 ff81 	bl	80084e4 <HAL_SPI_Init>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80045e8:	f000 fb3a 	bl	8004c60 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80045ec:	bf00      	nop
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000b88 	.word	0x20000b88
 80045f4:	40013000 	.word	0x40013000

080045f8 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80045fc:	4b17      	ldr	r3, [pc, #92]	; (800465c <MX_SPI2_Init+0x64>)
 80045fe:	4a18      	ldr	r2, [pc, #96]	; (8004660 <MX_SPI2_Init+0x68>)
 8004600:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8004602:	4b16      	ldr	r3, [pc, #88]	; (800465c <MX_SPI2_Init+0x64>)
 8004604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004608:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <MX_SPI2_Init+0x64>)
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <MX_SPI2_Init+0x64>)
 8004612:	2200      	movs	r2, #0
 8004614:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <MX_SPI2_Init+0x64>)
 8004618:	2200      	movs	r2, #0
 800461a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <MX_SPI2_Init+0x64>)
 800461e:	2200      	movs	r2, #0
 8004620:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8004622:	4b0e      	ldr	r3, [pc, #56]	; (800465c <MX_SPI2_Init+0x64>)
 8004624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004628:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <MX_SPI2_Init+0x64>)
 800462c:	2210      	movs	r2, #16
 800462e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <MX_SPI2_Init+0x64>)
 8004632:	2200      	movs	r2, #0
 8004634:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <MX_SPI2_Init+0x64>)
 8004638:	2200      	movs	r2, #0
 800463a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <MX_SPI2_Init+0x64>)
 800463e:	2200      	movs	r2, #0
 8004640:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <MX_SPI2_Init+0x64>)
 8004644:	220a      	movs	r2, #10
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004648:	4804      	ldr	r0, [pc, #16]	; (800465c <MX_SPI2_Init+0x64>)
 800464a:	f003 ff4b 	bl	80084e4 <HAL_SPI_Init>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8004654:	f000 fb04 	bl	8004c60 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8004658:	bf00      	nop
 800465a:	bd80      	pop	{r7, pc}
 800465c:	2000090c 	.word	0x2000090c
 8004660:	40003800 	.word	0x40003800

08004664 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b096      	sub	sp, #88	; 0x58
 8004668:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800466a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	609a      	str	r2, [r3, #8]
 8004676:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004678:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	605a      	str	r2, [r3, #4]
 800468c:	609a      	str	r2, [r3, #8]
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	611a      	str	r2, [r3, #16]
 8004692:	615a      	str	r2, [r3, #20]
 8004694:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004696:	1d3b      	adds	r3, r7, #4
 8004698:	2220      	movs	r2, #32
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f005 fbb5 	bl	8009e0c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80046a2:	4b3f      	ldr	r3, [pc, #252]	; (80047a0 <MX_TIM1_Init+0x13c>)
 80046a4:	4a3f      	ldr	r2, [pc, #252]	; (80047a4 <MX_TIM1_Init+0x140>)
 80046a6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4;
 80046a8:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <MX_TIM1_Init+0x13c>)
 80046aa:	2204      	movs	r2, #4
 80046ac:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ae:	4b3c      	ldr	r3, [pc, #240]	; (80047a0 <MX_TIM1_Init+0x13c>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80046b4:	4b3a      	ldr	r3, [pc, #232]	; (80047a0 <MX_TIM1_Init+0x13c>)
 80046b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ba:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80046bc:	4b38      	ldr	r3, [pc, #224]	; (80047a0 <MX_TIM1_Init+0x13c>)
 80046be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80046c4:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <MX_TIM1_Init+0x13c>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046ca:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <MX_TIM1_Init+0x13c>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80046d0:	4833      	ldr	r0, [pc, #204]	; (80047a0 <MX_TIM1_Init+0x13c>)
 80046d2:	f004 fcaf 	bl	8009034 <HAL_TIM_Base_Init>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 80046dc:	f000 fac0 	bl	8004c60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046e4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80046e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046ea:	4619      	mov	r1, r3
 80046ec:	482c      	ldr	r0, [pc, #176]	; (80047a0 <MX_TIM1_Init+0x13c>)
 80046ee:	f004 ff13 	bl	8009518 <HAL_TIM_ConfigClockSource>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 80046f8:	f000 fab2 	bl	8004c60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80046fc:	4828      	ldr	r0, [pc, #160]	; (80047a0 <MX_TIM1_Init+0x13c>)
 80046fe:	f004 fd43 	bl	8009188 <HAL_TIM_PWM_Init>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8004708:	f000 faaa 	bl	8004c60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800470c:	2300      	movs	r3, #0
 800470e:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004710:	2300      	movs	r3, #0
 8004712:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004714:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004718:	4619      	mov	r1, r3
 800471a:	4821      	ldr	r0, [pc, #132]	; (80047a0 <MX_TIM1_Init+0x13c>)
 800471c:	f005 fa8c 	bl	8009c38 <HAL_TIMEx_MasterConfigSynchronization>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 8004726:	f000 fa9b 	bl	8004c60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800472a:	2360      	movs	r3, #96	; 0x60
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004732:	2300      	movs	r3, #0
 8004734:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004736:	2300      	movs	r3, #0
 8004738:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800473a:	2300      	movs	r3, #0
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800473e:	2300      	movs	r3, #0
 8004740:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800474a:	2200      	movs	r2, #0
 800474c:	4619      	mov	r1, r3
 800474e:	4814      	ldr	r0, [pc, #80]	; (80047a0 <MX_TIM1_Init+0x13c>)
 8004750:	f004 fe24 	bl	800939c <HAL_TIM_PWM_ConfigChannel>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <MX_TIM1_Init+0xfa>
	{
		Error_Handler();
 800475a:	f000 fa81 	bl	8004c60 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800475e:	2300      	movs	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004776:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004778:	2300      	movs	r3, #0
 800477a:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4807      	ldr	r0, [pc, #28]	; (80047a0 <MX_TIM1_Init+0x13c>)
 8004782:	f005 fac7 	bl	8009d14 <HAL_TIMEx_ConfigBreakDeadTime>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <MX_TIM1_Init+0x12c>
	{
		Error_Handler();
 800478c:	f000 fa68 	bl	8004c60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8004790:	4803      	ldr	r0, [pc, #12]	; (80047a0 <MX_TIM1_Init+0x13c>)
 8004792:	f001 f963 	bl	8005a5c <HAL_TIM_MspPostInit>

}
 8004796:	bf00      	nop
 8004798:	3758      	adds	r7, #88	; 0x58
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000b38 	.word	0x20000b38
 80047a4:	40010000 	.word	0x40010000

080047a8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	605a      	str	r2, [r3, #4]
 80047b8:	609a      	str	r2, [r3, #8]
 80047ba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047bc:	463b      	mov	r3, r7
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80047c4:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <MX_TIM2_Init+0x98>)
 80047c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047ca:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 50000;
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <MX_TIM2_Init+0x98>)
 80047ce:	f24c 3250 	movw	r2, #50000	; 0xc350
 80047d2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047d4:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <MX_TIM2_Init+0x98>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80047da:	4b19      	ldr	r3, [pc, #100]	; (8004840 <MX_TIM2_Init+0x98>)
 80047dc:	f04f 32ff 	mov.w	r2, #4294967295
 80047e0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047e2:	4b17      	ldr	r3, [pc, #92]	; (8004840 <MX_TIM2_Init+0x98>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047e8:	4b15      	ldr	r3, [pc, #84]	; (8004840 <MX_TIM2_Init+0x98>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80047ee:	4814      	ldr	r0, [pc, #80]	; (8004840 <MX_TIM2_Init+0x98>)
 80047f0:	f004 fc20 	bl	8009034 <HAL_TIM_Base_Init>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80047fa:	f000 fa31 	bl	8004c60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004802:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004804:	f107 0308 	add.w	r3, r7, #8
 8004808:	4619      	mov	r1, r3
 800480a:	480d      	ldr	r0, [pc, #52]	; (8004840 <MX_TIM2_Init+0x98>)
 800480c:	f004 fe84 	bl	8009518 <HAL_TIM_ConfigClockSource>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8004816:	f000 fa23 	bl	8004c60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800481e:	2300      	movs	r3, #0
 8004820:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004822:	463b      	mov	r3, r7
 8004824:	4619      	mov	r1, r3
 8004826:	4806      	ldr	r0, [pc, #24]	; (8004840 <MX_TIM2_Init+0x98>)
 8004828:	f005 fa06 	bl	8009c38 <HAL_TIMEx_MasterConfigSynchronization>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8004832:	f000 fa15 	bl	8004c60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000be0 	.word	0x20000be0

08004844 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800484a:	f107 0308 	add.w	r3, r7, #8
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	605a      	str	r2, [r3, #4]
 8004854:	609a      	str	r2, [r3, #8]
 8004856:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004858:	463b      	mov	r3, r7
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <MX_TIM3_Init+0x94>)
 8004862:	4a1e      	ldr	r2, [pc, #120]	; (80048dc <MX_TIM3_Init+0x98>)
 8004864:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 3;
 8004866:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <MX_TIM3_Init+0x94>)
 8004868:	2203      	movs	r2, #3
 800486a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <MX_TIM3_Init+0x94>)
 800486e:	2200      	movs	r2, #0
 8004870:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8004872:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <MX_TIM3_Init+0x94>)
 8004874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004878:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800487a:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <MX_TIM3_Init+0x94>)
 800487c:	2200      	movs	r2, #0
 800487e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004880:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <MX_TIM3_Init+0x94>)
 8004882:	2200      	movs	r2, #0
 8004884:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004886:	4814      	ldr	r0, [pc, #80]	; (80048d8 <MX_TIM3_Init+0x94>)
 8004888:	f004 fbd4 	bl	8009034 <HAL_TIM_Base_Init>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 8004892:	f000 f9e5 	bl	8004c60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800489a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	4619      	mov	r1, r3
 80048a2:	480d      	ldr	r0, [pc, #52]	; (80048d8 <MX_TIM3_Init+0x94>)
 80048a4:	f004 fe38 	bl	8009518 <HAL_TIM_ConfigClockSource>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 80048ae:	f000 f9d7 	bl	8004c60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80048ba:	463b      	mov	r3, r7
 80048bc:	4619      	mov	r1, r3
 80048be:	4806      	ldr	r0, [pc, #24]	; (80048d8 <MX_TIM3_Init+0x94>)
 80048c0:	f005 f9ba 	bl	8009c38 <HAL_TIMEx_MasterConfigSynchronization>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 80048ca:	f000 f9c9 	bl	8004c60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80048ce:	bf00      	nop
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000a68 	.word	0x20000a68
 80048dc:	40000400 	.word	0x40000400

080048e0 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048e6:	f107 0308 	add.w	r3, r7, #8
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	605a      	str	r2, [r3, #4]
 80048f0:	609a      	str	r2, [r3, #8]
 80048f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048f4:	463b      	mov	r3, r7
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <MX_TIM4_Init+0x94>)
 80048fe:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <MX_TIM4_Init+0x98>)
 8004900:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 12500;
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <MX_TIM4_Init+0x94>)
 8004904:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8004908:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490a:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <MX_TIM4_Init+0x94>)
 800490c:	2200      	movs	r2, #0
 800490e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8004910:	4b18      	ldr	r3, [pc, #96]	; (8004974 <MX_TIM4_Init+0x94>)
 8004912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004916:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004918:	4b16      	ldr	r3, [pc, #88]	; (8004974 <MX_TIM4_Init+0x94>)
 800491a:	2200      	movs	r2, #0
 800491c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <MX_TIM4_Init+0x94>)
 8004920:	2200      	movs	r2, #0
 8004922:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004924:	4813      	ldr	r0, [pc, #76]	; (8004974 <MX_TIM4_Init+0x94>)
 8004926:	f004 fb85 	bl	8009034 <HAL_TIM_Base_Init>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 8004930:	f000 f996 	bl	8004c60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004938:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	4619      	mov	r1, r3
 8004940:	480c      	ldr	r0, [pc, #48]	; (8004974 <MX_TIM4_Init+0x94>)
 8004942:	f004 fde9 	bl	8009518 <HAL_TIM_ConfigClockSource>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 800494c:	f000 f988 	bl	8004c60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004950:	2300      	movs	r3, #0
 8004952:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004954:	2300      	movs	r3, #0
 8004956:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004958:	463b      	mov	r3, r7
 800495a:	4619      	mov	r1, r3
 800495c:	4805      	ldr	r0, [pc, #20]	; (8004974 <MX_TIM4_Init+0x94>)
 800495e:	f005 f96b 	bl	8009c38 <HAL_TIMEx_MasterConfigSynchronization>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 8004968:	f000 f97a 	bl	8004c60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000964 	.word	0x20000964
 8004978:	40000800 	.word	0x40000800

0800497c <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8004980:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <MX_TIM10_Init+0x40>)
 8004982:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <MX_TIM10_Init+0x44>)
 8004984:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 65535;
 8004986:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <MX_TIM10_Init+0x40>)
 8004988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800498c:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <MX_TIM10_Init+0x40>)
 8004990:	2200      	movs	r2, #0
 8004992:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <MX_TIM10_Init+0x40>)
 8004996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800499a:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800499c:	4b07      	ldr	r3, [pc, #28]	; (80049bc <MX_TIM10_Init+0x40>)
 800499e:	2200      	movs	r2, #0
 80049a0:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <MX_TIM10_Init+0x40>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80049a8:	4804      	ldr	r0, [pc, #16]	; (80049bc <MX_TIM10_Init+0x40>)
 80049aa:	f004 fb43 	bl	8009034 <HAL_TIM_Base_Init>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <MX_TIM10_Init+0x3c>
	{
		Error_Handler();
 80049b4:	f000 f954 	bl	8004c60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 80049b8:	bf00      	nop
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	20000a04 	.word	0x20000a04
 80049c0:	40014400 	.word	0x40014400

080049c4 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <MX_TIM11_Init+0x40>)
 80049ca:	4a0f      	ldr	r2, [pc, #60]	; (8004a08 <MX_TIM11_Init+0x44>)
 80049cc:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <MX_TIM11_Init+0x40>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <MX_TIM11_Init+0x40>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <MX_TIM11_Init+0x40>)
 80049dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049e0:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <MX_TIM11_Init+0x40>)
 80049e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e8:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049ea:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <MX_TIM11_Init+0x40>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80049f0:	4804      	ldr	r0, [pc, #16]	; (8004a04 <MX_TIM11_Init+0x40>)
 80049f2:	f004 fb1f 	bl	8009034 <HAL_TIM_Base_Init>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <MX_TIM11_Init+0x3c>
	{
		Error_Handler();
 80049fc:	f000 f930 	bl	8004c60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8004a00:	bf00      	nop
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000ac8 	.word	0x20000ac8
 8004a08:	40014800 	.word	0x40014800

08004a0c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a12:	f107 0314 	add.w	r3, r7, #20
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	605a      	str	r2, [r3, #4]
 8004a1c:	609a      	str	r2, [r3, #8]
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	4b4d      	ldr	r3, [pc, #308]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	4a4c      	ldr	r2, [pc, #304]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a2c:	f043 0304 	orr.w	r3, r3, #4
 8004a30:	6313      	str	r3, [r2, #48]	; 0x30
 8004a32:	4b4a      	ldr	r3, [pc, #296]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	4b46      	ldr	r3, [pc, #280]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	4a45      	ldr	r2, [pc, #276]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4e:	4b43      	ldr	r3, [pc, #268]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	4b3f      	ldr	r3, [pc, #252]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	4a3e      	ldr	r2, [pc, #248]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6a:	4b3c      	ldr	r3, [pc, #240]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	60bb      	str	r3, [r7, #8]
 8004a74:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	4b38      	ldr	r3, [pc, #224]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	4a37      	ldr	r2, [pc, #220]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
 8004a86:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <MX_GPIO_Init+0x150>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004a92:	2200      	movs	r2, #0
 8004a94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a98:	4831      	ldr	r0, [pc, #196]	; (8004b60 <MX_GPIO_Init+0x154>)
 8004a9a:	f002 f8e3 	bl	8006c64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI1_RESET_Pin|SPI1_RS_Pin|SPI1_CS_Pin|EN_Pin
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f649 611c 	movw	r1, #40476	; 0x9e1c
 8004aa4:	482f      	ldr	r0, [pc, #188]	; (8004b64 <MX_GPIO_Init+0x158>)
 8004aa6:	f002 f8dd 	bl	8006c64 <HAL_GPIO_WritePin>
			|MS1_Pin|MS2_Pin|MS3_Pin|RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DC_Pin|RESET_Pin|CS_Pin|LED2_Pin
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f242 313f 	movw	r1, #9023	; 0x233f
 8004ab0:	482d      	ldr	r0, [pc, #180]	; (8004b68 <MX_GPIO_Init+0x15c>)
 8004ab2:	f002 f8d7 	bl	8006c64 <HAL_GPIO_WritePin>
			|SLEEP_Pin|STEP_Pin|DIR_Pin|I2C_RST_Pin
			|SPI2_CS_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8004ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004abc:	2301      	movs	r3, #1
 8004abe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004ac8:	f107 0314 	add.w	r3, r7, #20
 8004acc:	4619      	mov	r1, r3
 8004ace:	4824      	ldr	r0, [pc, #144]	; (8004b60 <MX_GPIO_Init+0x154>)
 8004ad0:	f001 ff2c 	bl	800692c <HAL_GPIO_Init>

	/*Configure GPIO pins : B_Pin A_Pin */
	GPIO_InitStruct.Pin = B_Pin|A_Pin;
 8004ad4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004ad8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004ada:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <MX_GPIO_Init+0x160>)
 8004adc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ae2:	f107 0314 	add.w	r3, r7, #20
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	481d      	ldr	r0, [pc, #116]	; (8004b60 <MX_GPIO_Init+0x154>)
 8004aea:	f001 ff1f 	bl	800692c <HAL_GPIO_Init>

	/*Configure GPIO pin : SW_Pin */
	GPIO_InitStruct.Pin = SW_Pin;
 8004aee:	2301      	movs	r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8004afa:	f107 0314 	add.w	r3, r7, #20
 8004afe:	4619      	mov	r1, r3
 8004b00:	4818      	ldr	r0, [pc, #96]	; (8004b64 <MX_GPIO_Init+0x158>)
 8004b02:	f001 ff13 	bl	800692c <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_RESET_Pin SPI1_RS_Pin SPI1_CS_Pin EN_Pin
                           MS1_Pin MS2_Pin MS3_Pin RST_Pin */
	GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI1_RS_Pin|SPI1_CS_Pin|EN_Pin
 8004b06:	f649 631c 	movw	r3, #40476	; 0x9e1c
 8004b0a:	617b      	str	r3, [r7, #20]
			|MS1_Pin|MS2_Pin|MS3_Pin|RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b14:	2300      	movs	r3, #0
 8004b16:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4811      	ldr	r0, [pc, #68]	; (8004b64 <MX_GPIO_Init+0x158>)
 8004b20:	f001 ff04 	bl	800692c <HAL_GPIO_Init>

	/*Configure GPIO pins : DC_Pin RESET_Pin CS_Pin LED2_Pin
                           SLEEP_Pin STEP_Pin DIR_Pin I2C_RST_Pin
                           SPI2_CS_Pin */
	GPIO_InitStruct.Pin = DC_Pin|RESET_Pin|CS_Pin|LED2_Pin
 8004b24:	f242 333f 	movw	r3, #9023	; 0x233f
 8004b28:	617b      	str	r3, [r7, #20]
			|SLEEP_Pin|STEP_Pin|DIR_Pin|I2C_RST_Pin
			|SPI2_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b36:	f107 0314 	add.w	r3, r7, #20
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	480a      	ldr	r0, [pc, #40]	; (8004b68 <MX_GPIO_Init+0x15c>)
 8004b3e:	f001 fef5 	bl	800692c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004b42:	2200      	movs	r2, #0
 8004b44:	2100      	movs	r1, #0
 8004b46:	2028      	movs	r0, #40	; 0x28
 8004b48:	f001 feb9 	bl	80068be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004b4c:	2028      	movs	r0, #40	; 0x28
 8004b4e:	f001 fed2 	bl	80068f6 <HAL_NVIC_EnableIRQ>

}
 8004b52:	bf00      	nop
 8004b54:	3728      	adds	r7, #40	; 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40020800 	.word	0x40020800
 8004b64:	40020000 	.word	0x40020000
 8004b68:	40020400 	.word	0x40020400
 8004b6c:	10310000 	.word	0x10310000

08004b70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
	pressed=true;
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	701a      	strb	r2, [r3, #0]

	static GPIO_PinState A_state,B_state,prev_A=GPIO_PIN_SET,prev_B=GPIO_PIN_SET;


	if(GPIO_Pin == A_Pin)
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b86:	d129      	bne.n	8004bdc <HAL_GPIO_EXTI_Callback+0x6c>
	{
		B_state=HAL_GPIO_ReadPin(B_GPIO_Port,B_Pin);
 8004b88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b8c:	482d      	ldr	r0, [pc, #180]	; (8004c44 <HAL_GPIO_EXTI_Callback+0xd4>)
 8004b8e:	f002 f851 	bl	8006c34 <HAL_GPIO_ReadPin>
 8004b92:	4603      	mov	r3, r0
 8004b94:	461a      	mov	r2, r3
 8004b96:	4b2c      	ldr	r3, [pc, #176]	; (8004c48 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004b98:	701a      	strb	r2, [r3, #0]

		if(B_state!=prev_B)
 8004b9a:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	4b2b      	ldr	r3, [pc, #172]	; (8004c4c <HAL_GPIO_EXTI_Callback+0xdc>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d01a      	beq.n	8004bdc <HAL_GPIO_EXTI_Callback+0x6c>
		{
			if(B_state==GPIO_PIN_SET)
 8004ba6:	4b28      	ldr	r3, [pc, #160]	; (8004c48 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d112      	bne.n	8004bd4 <HAL_GPIO_EXTI_Callback+0x64>
			{
				if(A_state==GPIO_PIN_RESET)
 8004bae:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_GPIO_EXTI_Callback+0x64>
				{
					selection++;
 8004bb6:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	b21a      	sxth	r2, r3
 8004bc4:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004bc6:	801a      	strh	r2, [r3, #0]
					timeout_old=TIM2->CNT;
 8004bc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	461a      	mov	r2, r3
 8004bd0:	4b21      	ldr	r3, [pc, #132]	; (8004c58 <HAL_GPIO_EXTI_Callback+0xe8>)
 8004bd2:	601a      	str	r2, [r3, #0]
				}
			}
			prev_B=B_state;
 8004bd4:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004bd6:	781a      	ldrb	r2, [r3, #0]
 8004bd8:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <HAL_GPIO_EXTI_Callback+0xdc>)
 8004bda:	701a      	strb	r2, [r3, #0]
		}
	}

	if(GPIO_Pin == B_Pin)
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be2:	d129      	bne.n	8004c38 <HAL_GPIO_EXTI_Callback+0xc8>
	{
		A_state=HAL_GPIO_ReadPin(A_GPIO_Port,A_Pin);
 8004be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004be8:	4816      	ldr	r0, [pc, #88]	; (8004c44 <HAL_GPIO_EXTI_Callback+0xd4>)
 8004bea:	f002 f823 	bl	8006c34 <HAL_GPIO_ReadPin>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004bf4:	701a      	strb	r2, [r3, #0]

		if(A_state!=prev_A)
 8004bf6:	4b16      	ldr	r3, [pc, #88]	; (8004c50 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <HAL_GPIO_EXTI_Callback+0xec>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d01a      	beq.n	8004c38 <HAL_GPIO_EXTI_Callback+0xc8>
		{
			if(A_state==GPIO_PIN_SET)
 8004c02:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d112      	bne.n	8004c30 <HAL_GPIO_EXTI_Callback+0xc0>
			{
				if(B_state==GPIO_PIN_RESET)
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10e      	bne.n	8004c30 <HAL_GPIO_EXTI_Callback+0xc0>
				{
					selection--;
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	b21a      	sxth	r2, r3
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004c22:	801a      	strh	r2, [r3, #0]
					timeout_old=TIM2->CNT;
 8004c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <HAL_GPIO_EXTI_Callback+0xe8>)
 8004c2e:	601a      	str	r2, [r3, #0]
				}
			}
			prev_A=A_state;
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004c32:	781a      	ldrb	r2, [r3, #0]
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_GPIO_EXTI_Callback+0xec>)
 8004c36:	701a      	strb	r2, [r3, #0]
				TIM1->CNT = 0;
				A++;
			}
    }
	 */
}
 8004c38:	bf00      	nop
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000b30 	.word	0x20000b30
 8004c44:	40020800 	.word	0x40020800
 8004c48:	200008d9 	.word	0x200008d9
 8004c4c:	20000727 	.word	0x20000727
 8004c50:	200008da 	.word	0x200008da
 8004c54:	20000ab0 	.word	0x20000ab0
 8004c58:	200008c8 	.word	0x200008c8
 8004c5c:	20000728 	.word	0x20000728

08004c60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c64:	b672      	cpsid	i
}
 8004c66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004c68:	e7fe      	b.n	8004c68 <Error_Handler+0x8>
	...

08004c6c <TFT9341_SendCommand>:
	sFONT *pFont;
}LCD_DrawPropTypeDef;
LCD_DrawPropTypeDef lcdprop;
//-------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 8004c76:	2200      	movs	r2, #0
 8004c78:	2108      	movs	r1, #8
 8004c7a:	4806      	ldr	r0, [pc, #24]	; (8004c94 <TFT9341_SendCommand+0x28>)
 8004c7c:	f001 fff2 	bl	8006c64 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi1, &cmd, 1, 1);
 8004c80:	1df9      	adds	r1, r7, #7
 8004c82:	2301      	movs	r3, #1
 8004c84:	2201      	movs	r2, #1
 8004c86:	4804      	ldr	r0, [pc, #16]	; (8004c98 <TFT9341_SendCommand+0x2c>)
 8004c88:	f003 fcb5 	bl	80085f6 <HAL_SPI_Transmit>
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40020000 	.word	0x40020000
 8004c98:	20000b88 	.word	0x20000b88

08004c9c <TFT9341_SendData>:
//-------------------------------------------------------------------
void TFT9341_SendData(uint8_t dt)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	2108      	movs	r1, #8
 8004caa:	4806      	ldr	r0, [pc, #24]	; (8004cc4 <TFT9341_SendData+0x28>)
 8004cac:	f001 ffda 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &dt, 1, 1);
 8004cb0:	1df9      	adds	r1, r7, #7
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	4804      	ldr	r0, [pc, #16]	; (8004cc8 <TFT9341_SendData+0x2c>)
 8004cb8:	f003 fc9d 	bl	80085f6 <HAL_SPI_Transmit>
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40020000 	.word	0x40020000
 8004cc8:	20000b88 	.word	0x20000b88

08004ccc <TFT9341_WriteData>:
//-------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	2108      	movs	r1, #8
 8004cda:	4811      	ldr	r0, [pc, #68]	; (8004d20 <TFT9341_WriteData+0x54>)
 8004cdc:	f001 ffc2 	bl	8006c64 <HAL_GPIO_WritePin>
	while(buff_size > 0) {
 8004ce0:	e015      	b.n	8004d0e <TFT9341_WriteData+0x42>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce8:	bf28      	it	cs
 8004cea:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8004cee:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 8004cf0:	89fa      	ldrh	r2, [r7, #14]
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	480a      	ldr	r0, [pc, #40]	; (8004d24 <TFT9341_WriteData+0x58>)
 8004cfa:	f003 fc7c 	bl	80085f6 <HAL_SPI_Transmit>
		buff += chunk_size;
 8004cfe:	89fb      	ldrh	r3, [r7, #14]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4413      	add	r3, r2
 8004d04:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8004d06:	89fb      	ldrh	r3, [r7, #14]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	603b      	str	r3, [r7, #0]
	while(buff_size > 0) {
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e6      	bne.n	8004ce2 <TFT9341_WriteData+0x16>
	}
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40020000 	.word	0x40020000
 8004d24:	20000b88 	.word	0x20000b88

08004d28 <TFT9341_reset>:
//-------------------------------------------------------------------
void TFT9341_reset(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2104      	movs	r1, #4
 8004d30:	4806      	ldr	r0, [pc, #24]	; (8004d4c <TFT9341_reset+0x24>)
 8004d32:	f001 ff97 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8004d36:	2005      	movs	r0, #5
 8004d38:	f001 fcc2 	bl	80066c0 <HAL_Delay>
	RESET_IDLE();
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	2104      	movs	r1, #4
 8004d40:	4802      	ldr	r0, [pc, #8]	; (8004d4c <TFT9341_reset+0x24>)
 8004d42:	f001 ff8f 	bl	8006c64 <HAL_GPIO_WritePin>
}
 8004d46:	bf00      	nop
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40020000 	.word	0x40020000

08004d50 <TFT9341_SetAddrWindow>:
//-------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4604      	mov	r4, r0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4623      	mov	r3, r4
 8004d60:	80fb      	strh	r3, [r7, #6]
 8004d62:	4603      	mov	r3, r0
 8004d64:	80bb      	strh	r3, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	807b      	strh	r3, [r7, #2]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 8004d6e:	202a      	movs	r0, #42	; 0x2a
 8004d70:	f7ff ff7c 	bl	8004c6c <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	733b      	strb	r3, [r7, #12]
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	737b      	strb	r3, [r7, #13]
 8004d84:	887b      	ldrh	r3, [r7, #2]
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	73bb      	strb	r3, [r7, #14]
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 8004d94:	f107 030c 	add.w	r3, r7, #12
 8004d98:	2104      	movs	r1, #4
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ff96 	bl	8004ccc <TFT9341_WriteData>
  }
 
  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 8004da0:	202b      	movs	r0, #43	; 0x2b
 8004da2:	f7ff ff63 	bl	8004c6c <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8004da6:	88bb      	ldrh	r3, [r7, #4]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	723b      	strb	r3, [r7, #8]
 8004db0:	88bb      	ldrh	r3, [r7, #4]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	727b      	strb	r3, [r7, #9]
 8004db6:	883b      	ldrh	r3, [r7, #0]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	72bb      	strb	r3, [r7, #10]
 8004dc0:	883b      	ldrh	r3, [r7, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 8004dc6:	f107 0308 	add.w	r3, r7, #8
 8004dca:	2104      	movs	r1, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff ff7d 	bl	8004ccc <TFT9341_WriteData>
  }
 
  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 8004dd2:	202c      	movs	r0, #44	; 0x2c
 8004dd4:	f7ff ff4a 	bl	8004c6c <TFT9341_SendCommand>
}//-------------------------------------------------------------------
 8004dd8:	bf00      	nop
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd90      	pop	{r4, r7, pc}

08004de0 <TFT9341_FillRect>:
void TFT9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4604      	mov	r4, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	461a      	mov	r2, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	80fb      	strh	r3, [r7, #6]
 8004df2:	4603      	mov	r3, r0
 8004df4:	80bb      	strh	r3, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	807b      	strh	r3, [r7, #2]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	803b      	strh	r3, [r7, #0]
  if((x1 >= TFT9341_WIDTH) || (y1 >= TFT9341_HEIGHT) || (x2 >= TFT9341_WIDTH) || (y2 >= TFT9341_HEIGHT)) return;
 8004dfe:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <TFT9341_FillRect+0xd8>)
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d252      	bcs.n	8004eae <TFT9341_FillRect+0xce>
 8004e08:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <TFT9341_FillRect+0xdc>)
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	88ba      	ldrh	r2, [r7, #4]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d24d      	bcs.n	8004eae <TFT9341_FillRect+0xce>
 8004e12:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <TFT9341_FillRect+0xd8>)
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	887a      	ldrh	r2, [r7, #2]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d248      	bcs.n	8004eae <TFT9341_FillRect+0xce>
 8004e1c:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <TFT9341_FillRect+0xdc>)
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	883a      	ldrh	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d243      	bcs.n	8004eae <TFT9341_FillRect+0xce>
	if(x1>x2) swap(x1,x2);
 8004e26:	88fa      	ldrh	r2, [r7, #6]
 8004e28:	887b      	ldrh	r3, [r7, #2]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d905      	bls.n	8004e3a <TFT9341_FillRect+0x5a>
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	827b      	strh	r3, [r7, #18]
 8004e32:	887b      	ldrh	r3, [r7, #2]
 8004e34:	80fb      	strh	r3, [r7, #6]
 8004e36:	8a7b      	ldrh	r3, [r7, #18]
 8004e38:	807b      	strh	r3, [r7, #2]
	if(y1>y2) swap(y1,y2);
 8004e3a:	88ba      	ldrh	r2, [r7, #4]
 8004e3c:	883b      	ldrh	r3, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d905      	bls.n	8004e4e <TFT9341_FillRect+0x6e>
 8004e42:	88bb      	ldrh	r3, [r7, #4]
 8004e44:	823b      	strh	r3, [r7, #16]
 8004e46:	883b      	ldrh	r3, [r7, #0]
 8004e48:	80bb      	strh	r3, [r7, #4]
 8004e4a:	8a3b      	ldrh	r3, [r7, #16]
 8004e4c:	803b      	strh	r3, [r7, #0]
  TFT9341_SetAddrWindow(x1, y1, x2, y2);
 8004e4e:	883b      	ldrh	r3, [r7, #0]
 8004e50:	887a      	ldrh	r2, [r7, #2]
 8004e52:	88b9      	ldrh	r1, [r7, #4]
 8004e54:	88f8      	ldrh	r0, [r7, #6]
 8004e56:	f7ff ff7b 	bl	8004d50 <TFT9341_SetAddrWindow>
  uint8_t data[] = { color >> 8, color & 0xFF };
 8004e5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e5c:	0a1b      	lsrs	r3, r3, #8
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	733b      	strb	r3, [r7, #12]
 8004e64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	737b      	strb	r3, [r7, #13]
  DC_DATA();
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2108      	movs	r1, #8
 8004e6e:	4814      	ldr	r0, [pc, #80]	; (8004ec0 <TFT9341_FillRect+0xe0>)
 8004e70:	f001 fef8 	bl	8006c64 <HAL_GPIO_WritePin>
  for(uint32_t i = 0; i < (x2-x1+1)*(y2-y1+1); i++)
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e00a      	b.n	8004e90 <TFT9341_FillRect+0xb0>
  {
      HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8004e7a:	f107 010c 	add.w	r1, r7, #12
 8004e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e82:	2202      	movs	r2, #2
 8004e84:	480f      	ldr	r0, [pc, #60]	; (8004ec4 <TFT9341_FillRect+0xe4>)
 8004e86:	f003 fbb6 	bl	80085f6 <HAL_SPI_Transmit>
  for(uint32_t i = 0; i < (x2-x1+1)*(y2-y1+1); i++)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	887a      	ldrh	r2, [r7, #2]
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	3301      	adds	r3, #1
 8004e98:	8839      	ldrh	r1, [r7, #0]
 8004e9a:	88ba      	ldrh	r2, [r7, #4]
 8004e9c:	1a8a      	subs	r2, r1, r2
 8004e9e:	3201      	adds	r2, #1
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d3e6      	bcc.n	8004e7a <TFT9341_FillRect+0x9a>
 8004eac:	e000      	b.n	8004eb0 <TFT9341_FillRect+0xd0>
  if((x1 >= TFT9341_WIDTH) || (y1 >= TFT9341_HEIGHT) || (x2 >= TFT9341_WIDTH) || (y2 >= TFT9341_HEIGHT)) return;
 8004eae:	bf00      	nop
			//HAL_SPI_Transmit_DMA(&hspi1, data, 2);
  }
}
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd90      	pop	{r4, r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000c38 	.word	0x20000c38
 8004ebc:	20000c2c 	.word	0x20000c2c
 8004ec0:	40020000 	.word	0x40020000
 8004ec4:	20000b88 	.word	0x20000b88

08004ec8 <TFT9341_FillScreen>:
//-------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	4603      	mov	r3, r0
 8004ed0:	80fb      	strh	r3, [r7, #6]
  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
 8004ed2:	4b09      	ldr	r3, [pc, #36]	; (8004ef8 <TFT9341_FillScreen+0x30>)
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <TFT9341_FillScreen+0x34>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b299      	uxth	r1, r3
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	2100      	movs	r1, #0
 8004eea:	2000      	movs	r0, #0
 8004eec:	f7ff ff78 	bl	8004de0 <TFT9341_FillRect>
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000c38 	.word	0x20000c38
 8004efc:	20000c2c 	.word	0x20000c2c

08004f00 <TFT9341_DrawPixel>:
//-------------------------------------------------------------------
void TFT9341_DrawPixel(int x, int y, uint16_t color)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db28      	blt.n	8004f66 <TFT9341_DrawPixel+0x66>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	db25      	blt.n	8004f66 <TFT9341_DrawPixel+0x66>
 8004f1a:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <TFT9341_DrawPixel+0x70>)
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4293      	cmp	r3, r2
 8004f24:	da1f      	bge.n	8004f66 <TFT9341_DrawPixel+0x66>
 8004f26:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <TFT9341_DrawPixel+0x74>)
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	da19      	bge.n	8004f66 <TFT9341_DrawPixel+0x66>
	TFT9341_SetAddrWindow(x,y,x,y);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	b298      	uxth	r0, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	b299      	uxth	r1, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f7ff ff05 	bl	8004d50 <TFT9341_SetAddrWindow>
	TFT9341_SendCommand(0x2C);
 8004f46:	202c      	movs	r0, #44	; 0x2c
 8004f48:	f7ff fe90 	bl	8004c6c <TFT9341_SendCommand>
	TFT9341_SendData(color>>8);
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fea1 	bl	8004c9c <TFT9341_SendData>
	TFT9341_SendData(color & 0xFF);
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fe9c 	bl	8004c9c <TFT9341_SendData>
 8004f64:	e000      	b.n	8004f68 <TFT9341_DrawPixel+0x68>
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 8004f66:	bf00      	nop
}
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000c38 	.word	0x20000c38
 8004f74:	20000c2c 	.word	0x20000c2c

08004f78 <TFT9341_SetTextColor>:
{
	return 565&0x0000FFFF;
}
//-------------------------------------------------------------------
void TFT9341_SetTextColor(uint16_t color)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	80fb      	strh	r3, [r7, #6]
  lcdprop.TextColor=color;
 8004f82:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <TFT9341_SetTextColor+0x1c>)
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	8013      	strh	r3, [r2, #0]
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	20000c30 	.word	0x20000c30

08004f98 <TFT9341_SetBackColor>:
//------------------------------------
void TFT9341_SetBackColor(uint16_t color)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	80fb      	strh	r3, [r7, #6]
  lcdprop.BackColor=color;
 8004fa2:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <TFT9341_SetBackColor+0x1c>)
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	8053      	strh	r3, [r2, #2]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20000c30 	.word	0x20000c30

08004fb8 <TFT9341_SetFont>:
//------------------------------------
void TFT9341_SetFont(sFONT *pFonts)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  lcdprop.pFont=pFonts;
 8004fc0:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <TFT9341_SetFont+0x1c>)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6053      	str	r3, [r2, #4]
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000c30 	.word	0x20000c30

08004fd8 <TFT9341_DrawChar>:
//-------------------------------------------------------------------
void TFT9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80fb      	strh	r3, [r7, #6]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	80bb      	strh	r3, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	70fb      	strb	r3, [r7, #3]
  uint32_t i = 0, j = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
 8004fee:	2300      	movs	r3, #0
 8004ff0:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *c_t;
  uint8_t *pchar;
  uint32_t line=0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
  height = lcdprop.pFont->Height;
 8004ff6:	4b4e      	ldr	r3, [pc, #312]	; (8005130 <TFT9341_DrawChar+0x158>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	88db      	ldrh	r3, [r3, #6]
 8004ffc:	837b      	strh	r3, [r7, #26]
  width  = lcdprop.pFont->Width;
 8004ffe:	4b4c      	ldr	r3, [pc, #304]	; (8005130 <TFT9341_DrawChar+0x158>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	889b      	ldrh	r3, [r3, #4]
 8005004:	833b      	strh	r3, [r7, #24]
  offset = 8 *((width + 7)/8) -  width ;
 8005006:	8b3b      	ldrh	r3, [r7, #24]
 8005008:	3307      	adds	r3, #7
 800500a:	2b00      	cmp	r3, #0
 800500c:	da00      	bge.n	8005010 <TFT9341_DrawChar+0x38>
 800500e:	3307      	adds	r3, #7
 8005010:	10db      	asrs	r3, r3, #3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	b2da      	uxtb	r2, r3
 8005018:	8b3b      	ldrh	r3, [r7, #24]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	75fb      	strb	r3, [r7, #23]
  c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
 8005020:	4b43      	ldr	r3, [pc, #268]	; (8005130 <TFT9341_DrawChar+0x158>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	3b20      	subs	r3, #32
 800502a:	4941      	ldr	r1, [pc, #260]	; (8005130 <TFT9341_DrawChar+0x158>)
 800502c:	6849      	ldr	r1, [r1, #4]
 800502e:	88c9      	ldrh	r1, [r1, #6]
 8005030:	fb01 f103 	mul.w	r1, r1, r3
 8005034:	4b3e      	ldr	r3, [pc, #248]	; (8005130 <TFT9341_DrawChar+0x158>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	889b      	ldrh	r3, [r3, #4]
 800503a:	3307      	adds	r3, #7
 800503c:	2b00      	cmp	r3, #0
 800503e:	da00      	bge.n	8005042 <TFT9341_DrawChar+0x6a>
 8005040:	3307      	adds	r3, #7
 8005042:	10db      	asrs	r3, r3, #3
 8005044:	fb03 f301 	mul.w	r3, r3, r1
 8005048:	4413      	add	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  for(i = 0; i < height; i++)
 800504c:	2300      	movs	r3, #0
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
 8005050:	e065      	b.n	800511e <TFT9341_DrawChar+0x146>
  {
    pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 8005052:	8b3b      	ldrh	r3, [r7, #24]
 8005054:	3307      	adds	r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	da00      	bge.n	800505c <TFT9341_DrawChar+0x84>
 800505a:	3307      	adds	r3, #7
 800505c:	10db      	asrs	r3, r3, #3
 800505e:	461a      	mov	r2, r3
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	fb03 f302 	mul.w	r3, r3, r2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4413      	add	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
    switch(((width + 7)/8))
 800506c:	8b3b      	ldrh	r3, [r7, #24]
 800506e:	3307      	adds	r3, #7
 8005070:	2b00      	cmp	r3, #0
 8005072:	da00      	bge.n	8005076 <TFT9341_DrawChar+0x9e>
 8005074:	3307      	adds	r3, #7
 8005076:	10db      	asrs	r3, r3, #3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d002      	beq.n	8005082 <TFT9341_DrawChar+0xaa>
 800507c:	2b02      	cmp	r3, #2
 800507e:	d004      	beq.n	800508a <TFT9341_DrawChar+0xb2>
 8005080:	e00c      	b.n	800509c <TFT9341_DrawChar+0xc4>
    {
      case 1:
          line =  pchar[0];      
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	61fb      	str	r3, [r7, #28]
          break;
 8005088:	e016      	b.n	80050b8 <TFT9341_DrawChar+0xe0>
      case 2:
          line =  (pchar[0]<< 8) | pchar[1];
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	3201      	adds	r2, #1
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	4313      	orrs	r3, r2
 8005098:	61fb      	str	r3, [r7, #28]
          break;
 800509a:	e00d      	b.n	80050b8 <TFT9341_DrawChar+0xe0>
      case 3:
      default:
        line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	041a      	lsls	r2, r3, #16
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3301      	adds	r3, #1
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	4313      	orrs	r3, r2
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	3202      	adds	r2, #2
 80050b0:	7812      	ldrb	r2, [r2, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	61fb      	str	r3, [r7, #28]
        break;
 80050b6:	bf00      	nop
    }
    for (j = 0; j < width; j++)
 80050b8:	2300      	movs	r3, #0
 80050ba:	623b      	str	r3, [r7, #32]
 80050bc:	e025      	b.n	800510a <TFT9341_DrawChar+0x132>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80050be:	8b3a      	ldrh	r2, [r7, #24]
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	1ad2      	subs	r2, r2, r3
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
 80050c6:	4413      	add	r3, r2
 80050c8:	3b01      	subs	r3, #1
 80050ca:	2201      	movs	r2, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <TFT9341_DrawChar+0x118>
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.TextColor);
 80050da:	88fa      	ldrh	r2, [r7, #6]
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	4413      	add	r3, r2
 80050e0:	4618      	mov	r0, r3
 80050e2:	88bb      	ldrh	r3, [r7, #4]
 80050e4:	4a12      	ldr	r2, [pc, #72]	; (8005130 <TFT9341_DrawChar+0x158>)
 80050e6:	8812      	ldrh	r2, [r2, #0]
 80050e8:	4619      	mov	r1, r3
 80050ea:	f7ff ff09 	bl	8004f00 <TFT9341_DrawPixel>
 80050ee:	e009      	b.n	8005104 <TFT9341_DrawChar+0x12c>
      }
      else
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.BackColor);
 80050f0:	88fa      	ldrh	r2, [r7, #6]
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	4413      	add	r3, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	88bb      	ldrh	r3, [r7, #4]
 80050fa:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <TFT9341_DrawChar+0x158>)
 80050fc:	8852      	ldrh	r2, [r2, #2]
 80050fe:	4619      	mov	r1, r3
 8005100:	f7ff fefe 	bl	8004f00 <TFT9341_DrawPixel>
    for (j = 0; j < width; j++)
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	3301      	adds	r3, #1
 8005108:	623b      	str	r3, [r7, #32]
 800510a:	8b3b      	ldrh	r3, [r7, #24]
 800510c:	6a3a      	ldr	r2, [r7, #32]
 800510e:	429a      	cmp	r2, r3
 8005110:	d3d5      	bcc.n	80050be <TFT9341_DrawChar+0xe6>
      } 
    }
    y++;      
 8005112:	88bb      	ldrh	r3, [r7, #4]
 8005114:	3301      	adds	r3, #1
 8005116:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	3301      	adds	r3, #1
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
 800511e:	8b7b      	ldrh	r3, [r7, #26]
 8005120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005122:	429a      	cmp	r2, r3
 8005124:	d395      	bcc.n	8005052 <TFT9341_DrawChar+0x7a>
  }
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	3728      	adds	r7, #40	; 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000c30 	.word	0x20000c30

08005134 <TFT9341_String>:
//-------------------------------------------------------------------
void TFT9341_String(uint16_t x,uint16_t y, char *str)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	603a      	str	r2, [r7, #0]
 800513e:	80fb      	strh	r3, [r7, #6]
 8005140:	460b      	mov	r3, r1
 8005142:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8005144:	e00f      	b.n	8005166 <TFT9341_String+0x32>
  {
    TFT9341_DrawChar(x,y,str[0]);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781a      	ldrb	r2, [r3, #0]
 800514a:	88b9      	ldrh	r1, [r7, #4]
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff ff42 	bl	8004fd8 <TFT9341_DrawChar>
    x+=lcdprop.pFont->Width;
 8005154:	4b08      	ldr	r3, [pc, #32]	; (8005178 <TFT9341_String+0x44>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	889a      	ldrh	r2, [r3, #4]
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	4413      	add	r3, r2
 800515e:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	603b      	str	r3, [r7, #0]
  while(*str)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1eb      	bne.n	8005146 <TFT9341_String+0x12>
  }
}
 800516e:	bf00      	nop
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000c30 	.word	0x20000c30

0800517c <TFT9341_SetRotation>:
//-------------------------------------------------------------------
void TFT9341_SetRotation(uint8_t r)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 8005186:	2036      	movs	r0, #54	; 0x36
 8005188:	f7ff fd70 	bl	8004c6c <TFT9341_SendCommand>
  switch(r)
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d836      	bhi.n	8005200 <TFT9341_SetRotation+0x84>
 8005192:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <TFT9341_SetRotation+0x1c>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051a9 	.word	0x080051a9
 800519c:	080051bf 	.word	0x080051bf
 80051a0:	080051d5 	.word	0x080051d5
 80051a4:	080051eb 	.word	0x080051eb
  {
    case 0:
      TFT9341_SendData(0x48);
 80051a8:	2048      	movs	r0, #72	; 0x48
 80051aa:	f7ff fd77 	bl	8004c9c <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 80051ae:	4b16      	ldr	r3, [pc, #88]	; (8005208 <TFT9341_SetRotation+0x8c>)
 80051b0:	22f0      	movs	r2, #240	; 0xf0
 80051b2:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 80051b4:	4b15      	ldr	r3, [pc, #84]	; (800520c <TFT9341_SetRotation+0x90>)
 80051b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80051ba:	801a      	strh	r2, [r3, #0]
      break;
 80051bc:	e020      	b.n	8005200 <TFT9341_SetRotation+0x84>
    case 1:
      TFT9341_SendData(0x28);
 80051be:	2028      	movs	r0, #40	; 0x28
 80051c0:	f7ff fd6c 	bl	8004c9c <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 80051c4:	4b10      	ldr	r3, [pc, #64]	; (8005208 <TFT9341_SetRotation+0x8c>)
 80051c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80051ca:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <TFT9341_SetRotation+0x90>)
 80051ce:	22f0      	movs	r2, #240	; 0xf0
 80051d0:	801a      	strh	r2, [r3, #0]
      break;
 80051d2:	e015      	b.n	8005200 <TFT9341_SetRotation+0x84>
    case 2:
      TFT9341_SendData(0x88);
 80051d4:	2088      	movs	r0, #136	; 0x88
 80051d6:	f7ff fd61 	bl	8004c9c <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <TFT9341_SetRotation+0x8c>)
 80051dc:	22f0      	movs	r2, #240	; 0xf0
 80051de:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <TFT9341_SetRotation+0x90>)
 80051e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80051e6:	801a      	strh	r2, [r3, #0]
      break;
 80051e8:	e00a      	b.n	8005200 <TFT9341_SetRotation+0x84>
    case 3:
      TFT9341_SendData(0xE8);
 80051ea:	20e8      	movs	r0, #232	; 0xe8
 80051ec:	f7ff fd56 	bl	8004c9c <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <TFT9341_SetRotation+0x8c>)
 80051f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80051f6:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <TFT9341_SetRotation+0x90>)
 80051fa:	22f0      	movs	r2, #240	; 0xf0
 80051fc:	801a      	strh	r2, [r3, #0]
      break;
 80051fe:	bf00      	nop
  }
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000c38 	.word	0x20000c38
 800520c:	20000c2c 	.word	0x20000c2c

08005210 <TFT9341_FontsIni>:
//-------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 8005214:	4b16      	ldr	r3, [pc, #88]	; (8005270 <TFT9341_FontsIni+0x60>)
 8005216:	2208      	movs	r2, #8
 8005218:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 800521a:	4b15      	ldr	r3, [pc, #84]	; (8005270 <TFT9341_FontsIni+0x60>)
 800521c:	2205      	movs	r2, #5
 800521e:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 8005220:	4b14      	ldr	r3, [pc, #80]	; (8005274 <TFT9341_FontsIni+0x64>)
 8005222:	220c      	movs	r2, #12
 8005224:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 8005226:	4b13      	ldr	r3, [pc, #76]	; (8005274 <TFT9341_FontsIni+0x64>)
 8005228:	2207      	movs	r2, #7
 800522a:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 800522c:	4b12      	ldr	r3, [pc, #72]	; (8005278 <TFT9341_FontsIni+0x68>)
 800522e:	2210      	movs	r2, #16
 8005230:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 8005232:	4b11      	ldr	r3, [pc, #68]	; (8005278 <TFT9341_FontsIni+0x68>)
 8005234:	220b      	movs	r2, #11
 8005236:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 8005238:	4b10      	ldr	r3, [pc, #64]	; (800527c <TFT9341_FontsIni+0x6c>)
 800523a:	2214      	movs	r2, #20
 800523c:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <TFT9341_FontsIni+0x6c>)
 8005240:	220e      	movs	r2, #14
 8005242:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 8005244:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <TFT9341_FontsIni+0x70>)
 8005246:	2218      	movs	r2, #24
 8005248:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 800524a:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <TFT9341_FontsIni+0x70>)
 800524c:	2211      	movs	r2, #17
 800524e:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <TFT9341_FontsIni+0x74>)
 8005252:	2200      	movs	r2, #0
 8005254:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 8005256:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <TFT9341_FontsIni+0x74>)
 8005258:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800525c:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <TFT9341_FontsIni+0x74>)
 8005260:	4a05      	ldr	r2, [pc, #20]	; (8005278 <TFT9341_FontsIni+0x68>)
 8005262:	605a      	str	r2, [r3, #4]
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000024 	.word	0x20000024
 8005274:	20000004 	.word	0x20000004
 8005278:	2000000c 	.word	0x2000000c
 800527c:	20000014 	.word	0x20000014
 8005280:	2000001c 	.word	0x2000001c
 8005284:	20000c30 	.word	0x20000c30

08005288 <TFT9341_ini>:
//-------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	460a      	mov	r2, r1
 8005292:	80fb      	strh	r3, [r7, #6]
 8005294:	4613      	mov	r3, r2
 8005296:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 8005298:	2200      	movs	r2, #0
 800529a:	2110      	movs	r1, #16
 800529c:	48a3      	ldr	r0, [pc, #652]	; (800552c <TFT9341_ini+0x2a4>)
 800529e:	f001 fce1 	bl	8006c64 <HAL_GPIO_WritePin>
  TFT9341_reset();
 80052a2:	f7ff fd41 	bl	8004d28 <TFT9341_reset>
  //Software Reset
  TFT9341_SendCommand(0x01);
 80052a6:	2001      	movs	r0, #1
 80052a8:	f7ff fce0 	bl	8004c6c <TFT9341_SendCommand>
  HAL_Delay(1000);
 80052ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052b0:	f001 fa06 	bl	80066c0 <HAL_Delay>
  //Power Control A  
  data[0] = 0x39;
 80052b4:	2339      	movs	r3, #57	; 0x39
 80052b6:	723b      	strb	r3, [r7, #8]
  data[1] = 0x2C;
 80052b8:	232c      	movs	r3, #44	; 0x2c
 80052ba:	727b      	strb	r3, [r7, #9]
  data[2] = 0x00;
 80052bc:	2300      	movs	r3, #0
 80052be:	72bb      	strb	r3, [r7, #10]
  data[3] = 0x34;
 80052c0:	2334      	movs	r3, #52	; 0x34
 80052c2:	72fb      	strb	r3, [r7, #11]
  data[4] = 0x02;
 80052c4:	2302      	movs	r3, #2
 80052c6:	733b      	strb	r3, [r7, #12]
  TFT9341_SendCommand(0xCB);
 80052c8:	20cb      	movs	r0, #203	; 0xcb
 80052ca:	f7ff fccf 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 5);
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	2105      	movs	r1, #5
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fcf9 	bl	8004ccc <TFT9341_WriteData>
  //Power Control B
  data[0] = 0x00;
 80052da:	2300      	movs	r3, #0
 80052dc:	723b      	strb	r3, [r7, #8]
  data[1] = 0xC1;
 80052de:	23c1      	movs	r3, #193	; 0xc1
 80052e0:	727b      	strb	r3, [r7, #9]
  data[2] = 0x30;
 80052e2:	2330      	movs	r3, #48	; 0x30
 80052e4:	72bb      	strb	r3, [r7, #10]
  TFT9341_SendCommand(0xCF);
 80052e6:	20cf      	movs	r0, #207	; 0xcf
 80052e8:	f7ff fcc0 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 3);
 80052ec:	f107 0308 	add.w	r3, r7, #8
 80052f0:	2103      	movs	r1, #3
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fcea 	bl	8004ccc <TFT9341_WriteData>
  //Driver timing control A
  data[0] = 0x85;
 80052f8:	2385      	movs	r3, #133	; 0x85
 80052fa:	723b      	strb	r3, [r7, #8]
  data[1] = 0x00;
 80052fc:	2300      	movs	r3, #0
 80052fe:	727b      	strb	r3, [r7, #9]
  data[2] = 0x78;
 8005300:	2378      	movs	r3, #120	; 0x78
 8005302:	72bb      	strb	r3, [r7, #10]
  TFT9341_SendCommand(0xE8);
 8005304:	20e8      	movs	r0, #232	; 0xe8
 8005306:	f7ff fcb1 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 3);
 800530a:	f107 0308 	add.w	r3, r7, #8
 800530e:	2103      	movs	r1, #3
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fcdb 	bl	8004ccc <TFT9341_WriteData>
  //Driver timing control B
  data[0] = 0x00;
 8005316:	2300      	movs	r3, #0
 8005318:	723b      	strb	r3, [r7, #8]
  data[1] = 0x00;
 800531a:	2300      	movs	r3, #0
 800531c:	727b      	strb	r3, [r7, #9]
  TFT9341_SendCommand(0xEA);
 800531e:	20ea      	movs	r0, #234	; 0xea
 8005320:	f7ff fca4 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 2);
 8005324:	f107 0308 	add.w	r3, r7, #8
 8005328:	2102      	movs	r1, #2
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fcce 	bl	8004ccc <TFT9341_WriteData>
  //Power on Sequence control
  data[0] = 0x64;
 8005330:	2364      	movs	r3, #100	; 0x64
 8005332:	723b      	strb	r3, [r7, #8]
  data[1] = 0x03;
 8005334:	2303      	movs	r3, #3
 8005336:	727b      	strb	r3, [r7, #9]
  data[2] = 0x12;
 8005338:	2312      	movs	r3, #18
 800533a:	72bb      	strb	r3, [r7, #10]
  data[3] = 0x81;
 800533c:	2381      	movs	r3, #129	; 0x81
 800533e:	72fb      	strb	r3, [r7, #11]
  TFT9341_SendCommand(0xED);
 8005340:	20ed      	movs	r0, #237	; 0xed
 8005342:	f7ff fc93 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 4);
 8005346:	f107 0308 	add.w	r3, r7, #8
 800534a:	2104      	movs	r1, #4
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fcbd 	bl	8004ccc <TFT9341_WriteData>
  //Pump ratio control
  data[0] = 0x20;
 8005352:	2320      	movs	r3, #32
 8005354:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0xF7);
 8005356:	20f7      	movs	r0, #247	; 0xf7
 8005358:	f7ff fc88 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 800535c:	f107 0308 	add.w	r3, r7, #8
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fcb2 	bl	8004ccc <TFT9341_WriteData>
  //Power Control,VRH[5:0]
  data[0] = 0x10;
 8005368:	2310      	movs	r3, #16
 800536a:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0xC0);
 800536c:	20c0      	movs	r0, #192	; 0xc0
 800536e:	f7ff fc7d 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 8005372:	f107 0308 	add.w	r3, r7, #8
 8005376:	2101      	movs	r1, #1
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fca7 	bl	8004ccc <TFT9341_WriteData>
  //Power Control,SAP[2:0];BT[3:0]
  data[0] = 0x10;
 800537e:	2310      	movs	r3, #16
 8005380:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0xC1);
 8005382:	20c1      	movs	r0, #193	; 0xc1
 8005384:	f7ff fc72 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fc9c 	bl	8004ccc <TFT9341_WriteData>
  //VCOM Control 1
  data[0] = 0x3E;
 8005394:	233e      	movs	r3, #62	; 0x3e
 8005396:	723b      	strb	r3, [r7, #8]
  data[1] = 0x28;
 8005398:	2328      	movs	r3, #40	; 0x28
 800539a:	727b      	strb	r3, [r7, #9]
  TFT9341_SendCommand(0xC5);
 800539c:	20c5      	movs	r0, #197	; 0xc5
 800539e:	f7ff fc65 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 2);
 80053a2:	f107 0308 	add.w	r3, r7, #8
 80053a6:	2102      	movs	r1, #2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fc8f 	bl	8004ccc <TFT9341_WriteData>
  //VCOM Control 2
  data[0] = 0x86;
 80053ae:	2386      	movs	r3, #134	; 0x86
 80053b0:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0xC7);
 80053b2:	20c7      	movs	r0, #199	; 0xc7
 80053b4:	f7ff fc5a 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 80053b8:	f107 0308 	add.w	r3, r7, #8
 80053bc:	2101      	movs	r1, #1
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fc84 	bl	8004ccc <TFT9341_WriteData>
  //Memory Acsess Control
  data[0] = 0x48;
 80053c4:	2348      	movs	r3, #72	; 0x48
 80053c6:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0x36);
 80053c8:	2036      	movs	r0, #54	; 0x36
 80053ca:	f7ff fc4f 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 80053ce:	f107 0308 	add.w	r3, r7, #8
 80053d2:	2101      	movs	r1, #1
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fc79 	bl	8004ccc <TFT9341_WriteData>
  //Pixel Format Set
  data[0] = 0x55;//16bit
 80053da:	2355      	movs	r3, #85	; 0x55
 80053dc:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0x3A);
 80053de:	203a      	movs	r0, #58	; 0x3a
 80053e0:	f7ff fc44 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 80053e4:	f107 0308 	add.w	r3, r7, #8
 80053e8:	2101      	movs	r1, #1
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fc6e 	bl	8004ccc <TFT9341_WriteData>
  //Frame Rratio Control, Standard RGB Color
  data[0] = 0x00;
 80053f0:	2300      	movs	r3, #0
 80053f2:	723b      	strb	r3, [r7, #8]
  data[1] = 0x18;
 80053f4:	2318      	movs	r3, #24
 80053f6:	727b      	strb	r3, [r7, #9]
  TFT9341_SendCommand(0xB1);
 80053f8:	20b1      	movs	r0, #177	; 0xb1
 80053fa:	f7ff fc37 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 2);
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	2102      	movs	r1, #2
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fc61 	bl	8004ccc <TFT9341_WriteData>
  //Display Function Control
  data[0] = 0x08;
 800540a:	2308      	movs	r3, #8
 800540c:	723b      	strb	r3, [r7, #8]
  data[1] = 0x82;
 800540e:	2382      	movs	r3, #130	; 0x82
 8005410:	727b      	strb	r3, [r7, #9]
  data[2] = 0x27;//320 строк
 8005412:	2327      	movs	r3, #39	; 0x27
 8005414:	72bb      	strb	r3, [r7, #10]
  TFT9341_SendCommand(0xB6);
 8005416:	20b6      	movs	r0, #182	; 0xb6
 8005418:	f7ff fc28 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 3);
 800541c:	f107 0308 	add.w	r3, r7, #8
 8005420:	2103      	movs	r1, #3
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fc52 	bl	8004ccc <TFT9341_WriteData>
  //Enable 3G (пока не знаю что это за режим)
  data[0] = 0x00;//не включаем
 8005428:	2300      	movs	r3, #0
 800542a:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0xF2);
 800542c:	20f2      	movs	r0, #242	; 0xf2
 800542e:	f7ff fc1d 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 8005432:	f107 0308 	add.w	r3, r7, #8
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fc47 	bl	8004ccc <TFT9341_WriteData>
  //Gamma set
  data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 800543e:	2301      	movs	r3, #1
 8005440:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0x26);
 8005442:	2026      	movs	r0, #38	; 0x26
 8005444:	f7ff fc12 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	2101      	movs	r1, #1
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fc3c 	bl	8004ccc <TFT9341_WriteData>
  //Positive Gamma  Correction
  data[0] = 0x0F;
 8005454:	230f      	movs	r3, #15
 8005456:	723b      	strb	r3, [r7, #8]
  data[1] = 0x31;
 8005458:	2331      	movs	r3, #49	; 0x31
 800545a:	727b      	strb	r3, [r7, #9]
  data[2] = 0x2B;
 800545c:	232b      	movs	r3, #43	; 0x2b
 800545e:	72bb      	strb	r3, [r7, #10]
  data[3] = 0x0C;
 8005460:	230c      	movs	r3, #12
 8005462:	72fb      	strb	r3, [r7, #11]
  data[4] = 0x0E;
 8005464:	230e      	movs	r3, #14
 8005466:	733b      	strb	r3, [r7, #12]
  data[5] = 0x08;
 8005468:	2308      	movs	r3, #8
 800546a:	737b      	strb	r3, [r7, #13]
  data[6] = 0x4E;
 800546c:	234e      	movs	r3, #78	; 0x4e
 800546e:	73bb      	strb	r3, [r7, #14]
  data[7] = 0xF1;
 8005470:	23f1      	movs	r3, #241	; 0xf1
 8005472:	73fb      	strb	r3, [r7, #15]
  data[8] = 0x37;
 8005474:	2337      	movs	r3, #55	; 0x37
 8005476:	743b      	strb	r3, [r7, #16]
  data[9] = 0x07;
 8005478:	2307      	movs	r3, #7
 800547a:	747b      	strb	r3, [r7, #17]
  data[10] = 0x10;
 800547c:	2310      	movs	r3, #16
 800547e:	74bb      	strb	r3, [r7, #18]
  data[11] = 0x03;
 8005480:	2303      	movs	r3, #3
 8005482:	74fb      	strb	r3, [r7, #19]
  data[12] = 0x0E;
 8005484:	230e      	movs	r3, #14
 8005486:	753b      	strb	r3, [r7, #20]
  data[13] = 0x09;
 8005488:	2309      	movs	r3, #9
 800548a:	757b      	strb	r3, [r7, #21]
  data[14] = 0x00;
 800548c:	2300      	movs	r3, #0
 800548e:	75bb      	strb	r3, [r7, #22]
  TFT9341_SendCommand(0xE0);
 8005490:	20e0      	movs	r0, #224	; 0xe0
 8005492:	f7ff fbeb 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 15);
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	210f      	movs	r1, #15
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fc15 	bl	8004ccc <TFT9341_WriteData>
  //Negative Gamma  Correction
  data[0] = 0x00;
 80054a2:	2300      	movs	r3, #0
 80054a4:	723b      	strb	r3, [r7, #8]
  data[1] = 0x0E;
 80054a6:	230e      	movs	r3, #14
 80054a8:	727b      	strb	r3, [r7, #9]
  data[2] = 0x14;
 80054aa:	2314      	movs	r3, #20
 80054ac:	72bb      	strb	r3, [r7, #10]
  data[3] = 0x03;
 80054ae:	2303      	movs	r3, #3
 80054b0:	72fb      	strb	r3, [r7, #11]
  data[4] = 0x11;
 80054b2:	2311      	movs	r3, #17
 80054b4:	733b      	strb	r3, [r7, #12]
  data[5] = 0x07;
 80054b6:	2307      	movs	r3, #7
 80054b8:	737b      	strb	r3, [r7, #13]
  data[6] = 0x31;
 80054ba:	2331      	movs	r3, #49	; 0x31
 80054bc:	73bb      	strb	r3, [r7, #14]
  data[7] = 0xC1;
 80054be:	23c1      	movs	r3, #193	; 0xc1
 80054c0:	73fb      	strb	r3, [r7, #15]
  data[8] = 0x48;
 80054c2:	2348      	movs	r3, #72	; 0x48
 80054c4:	743b      	strb	r3, [r7, #16]
  data[9] = 0x08;
 80054c6:	2308      	movs	r3, #8
 80054c8:	747b      	strb	r3, [r7, #17]
  data[10] = 0x0F;
 80054ca:	230f      	movs	r3, #15
 80054cc:	74bb      	strb	r3, [r7, #18]
  data[11] = 0x0C;
 80054ce:	230c      	movs	r3, #12
 80054d0:	74fb      	strb	r3, [r7, #19]
  data[12] = 0x31;
 80054d2:	2331      	movs	r3, #49	; 0x31
 80054d4:	753b      	strb	r3, [r7, #20]
  data[13] = 0x36;
 80054d6:	2336      	movs	r3, #54	; 0x36
 80054d8:	757b      	strb	r3, [r7, #21]
  data[14] = 0x0F;
 80054da:	230f      	movs	r3, #15
 80054dc:	75bb      	strb	r3, [r7, #22]
  TFT9341_SendCommand(0xE1);
 80054de:	20e1      	movs	r0, #225	; 0xe1
 80054e0:	f7ff fbc4 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 15);
 80054e4:	f107 0308 	add.w	r3, r7, #8
 80054e8:	210f      	movs	r1, #15
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fbee 	bl	8004ccc <TFT9341_WriteData>
  TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 80054f0:	2011      	movs	r0, #17
 80054f2:	f7ff fbbb 	bl	8004c6c <TFT9341_SendCommand>
  HAL_Delay(120);
 80054f6:	2078      	movs	r0, #120	; 0x78
 80054f8:	f001 f8e2 	bl	80066c0 <HAL_Delay>
  //Display ON
  data[0] = TFT9341_ROTATION;
 80054fc:	2348      	movs	r3, #72	; 0x48
 80054fe:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0x29);
 8005500:	2029      	movs	r0, #41	; 0x29
 8005502:	f7ff fbb3 	bl	8004c6c <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 8005506:	f107 0308 	add.w	r3, r7, #8
 800550a:	2101      	movs	r1, #1
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fbdd 	bl	8004ccc <TFT9341_WriteData>
  TFT9341_WIDTH = w_size;
 8005512:	4a07      	ldr	r2, [pc, #28]	; (8005530 <TFT9341_ini+0x2a8>)
 8005514:	88fb      	ldrh	r3, [r7, #6]
 8005516:	8013      	strh	r3, [r2, #0]
  TFT9341_HEIGHT = h_size;
 8005518:	4a06      	ldr	r2, [pc, #24]	; (8005534 <TFT9341_ini+0x2ac>)
 800551a:	88bb      	ldrh	r3, [r7, #4]
 800551c:	8013      	strh	r3, [r2, #0]
  TFT9341_FontsIni();
 800551e:	f7ff fe77 	bl	8005210 <TFT9341_FontsIni>
}
 8005522:	bf00      	nop
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40020000 	.word	0x40020000
 8005530:	20000c38 	.word	0x20000c38
 8005534:	20000c2c 	.word	0x20000c2c

08005538 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8005540:	4a04      	ldr	r2, [pc, #16]	; (8005554 <DS3231_Init+0x1c>)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6013      	str	r3, [r2, #0]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000c3c 	.word	0x20000c3c

08005558 <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af02      	add	r7, sp, #8
 800555e:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8005560:	2300      	movs	r3, #0
 8005562:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8005564:	2300      	movs	r3, #0
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	f107 030c 	add.w	r3, r7, #12
 800556c:	2100      	movs	r1, #0
 800556e:	460a      	mov	r2, r1
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	460a      	mov	r2, r1
 8005574:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8005576:	4b35      	ldr	r3, [pc, #212]	; (800564c <DS3231_GetTime+0xf4>)
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	f107 020f 	add.w	r2, r7, #15
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	2301      	movs	r3, #1
 8005586:	21d0      	movs	r1, #208	; 0xd0
 8005588:	f001 fcfc 	bl	8006f84 <HAL_I2C_Master_Transmit>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <DS3231_GetTime+0x3e>
 8005592:	2300      	movs	r3, #0
 8005594:	e055      	b.n	8005642 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8005596:	4b2d      	ldr	r3, [pc, #180]	; (800564c <DS3231_GetTime+0xf4>)
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	f107 0208 	add.w	r2, r7, #8
 800559e:	f04f 33ff 	mov.w	r3, #4294967295
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	2307      	movs	r3, #7
 80055a6:	21d0      	movs	r1, #208	; 0xd0
 80055a8:	f001 fdea 	bl	8007180 <HAL_I2C_Master_Receive>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <DS3231_GetTime+0x5e>
 80055b2:	2300      	movs	r3, #0
 80055b4:	e045      	b.n	8005642 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 80055b6:	7a3b      	ldrb	r3, [r7, #8]
 80055b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f892 	bl	80056e8 <B2D>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 80055cc:	7a7b      	ldrb	r3, [r7, #9]
 80055ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 f887 	bl	80056e8 <B2D>
 80055da:	4603      	mov	r3, r0
 80055dc:	461a      	mov	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 80055e2:	7abb      	ldrb	r3, [r7, #10]
 80055e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f87c 	bl	80056e8 <B2D>
 80055f0:	4603      	mov	r3, r0
 80055f2:	461a      	mov	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 80055f8:	7afb      	ldrb	r3, [r7, #11]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8005604:	7b3b      	ldrb	r3, [r7, #12]
 8005606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800560a:	b2db      	uxtb	r3, r3
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f86b 	bl	80056e8 <B2D>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 800561a:	7b7b      	ldrb	r3, [r7, #13]
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	b2db      	uxtb	r3, r3
 8005622:	4618      	mov	r0, r3
 8005624:	f000 f860 	bl	80056e8 <B2D>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8005630:	7bbb      	ldrb	r3, [r7, #14]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 f858 	bl	80056e8 <B2D>
 8005638:	4603      	mov	r3, r0
 800563a:	461a      	mov	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	701a      	strb	r2, [r3, #0]

  return true;
 8005640:	2301      	movs	r3, #1
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000c3c 	.word	0x20000c3c

08005650 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8005658:	2300      	movs	r3, #0
 800565a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	733b      	strb	r3, [r7, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	799b      	ldrb	r3, [r3, #6]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 f859 	bl	800571c <D2B>
 800566a:	4603      	mov	r3, r0
 800566c:	737b      	strb	r3, [r7, #13]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	795b      	ldrb	r3, [r3, #5]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f852 	bl	800571c <D2B>
 8005678:	4603      	mov	r3, r0
 800567a:	73bb      	strb	r3, [r7, #14]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	791b      	ldrb	r3, [r3, #4]
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f84b 	bl	800571c <D2B>
 8005686:	4603      	mov	r3, r0
 8005688:	73fb      	strb	r3, [r7, #15]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	743b      	strb	r3, [r7, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	789b      	ldrb	r3, [r3, #2]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f841 	bl	800571c <D2B>
 800569a:	4603      	mov	r3, r0
 800569c:	747b      	strb	r3, [r7, #17]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f83a 	bl	800571c <D2B>
 80056a8:	4603      	mov	r3, r0
 80056aa:	74bb      	strb	r3, [r7, #18]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 f833 	bl	800571c <D2B>
 80056b6:	4603      	mov	r3, r0
 80056b8:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <DS3231_SetTime+0x94>)
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	f107 020c 	add.w	r2, r7, #12
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2308      	movs	r3, #8
 80056ca:	21d0      	movs	r1, #208	; 0xd0
 80056cc:	f001 fc5a 	bl	8006f84 <HAL_I2C_Master_Transmit>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <DS3231_SetTime+0x8a>
 80056d6:	2300      	movs	r3, #0
 80056d8:	e000      	b.n	80056dc <DS3231_SetTime+0x8c>

  return true;
 80056da:	2301      	movs	r3, #1
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20000c3c 	.word	0x20000c3c

080056e8 <B2D>:

  return true;
}

static uint8_t B2D(uint8_t bcd)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	091b      	lsrs	r3, r3, #4
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	0092      	lsls	r2, r2, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	b2da      	uxtb	r2, r3
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	b2db      	uxtb	r3, r3
 800570a:	4413      	add	r3, r2
 800570c:	b2db      	uxtb	r3, r3
}
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	4a0d      	ldr	r2, [pc, #52]	; (8005760 <D2B+0x44>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	08db      	lsrs	r3, r3, #3
 8005730:	b2db      	uxtb	r3, r3
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	b258      	sxtb	r0, r3
 8005736:	79fa      	ldrb	r2, [r7, #7]
 8005738:	4b09      	ldr	r3, [pc, #36]	; (8005760 <D2B+0x44>)
 800573a:	fba3 1302 	umull	r1, r3, r3, r2
 800573e:	08d9      	lsrs	r1, r3, #3
 8005740:	460b      	mov	r3, r1
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	b2db      	uxtb	r3, r3
 800574c:	b25b      	sxtb	r3, r3
 800574e:	4303      	orrs	r3, r0
 8005750:	b25b      	sxtb	r3, r3
 8005752:	b2db      	uxtb	r3, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	cccccccd 	.word	0xcccccccd

08005764 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800576a:	2300      	movs	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <HAL_MspInit+0x4c>)
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005772:	4a0f      	ldr	r2, [pc, #60]	; (80057b0 <HAL_MspInit+0x4c>)
 8005774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005778:	6453      	str	r3, [r2, #68]	; 0x44
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <HAL_MspInit+0x4c>)
 800577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005786:	2300      	movs	r3, #0
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <HAL_MspInit+0x4c>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <HAL_MspInit+0x4c>)
 8005790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005794:	6413      	str	r3, [r2, #64]	; 0x40
 8005796:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <HAL_MspInit+0x4c>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40023800 	.word	0x40023800

080057b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	609a      	str	r2, [r3, #8]
 80057c8:	60da      	str	r2, [r3, #12]
 80057ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a19      	ldr	r2, [pc, #100]	; (8005838 <HAL_I2C_MspInit+0x84>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d12b      	bne.n	800582e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	4b18      	ldr	r3, [pc, #96]	; (800583c <HAL_I2C_MspInit+0x88>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	4a17      	ldr	r2, [pc, #92]	; (800583c <HAL_I2C_MspInit+0x88>)
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	6313      	str	r3, [r2, #48]	; 0x30
 80057e6:	4b15      	ldr	r3, [pc, #84]	; (800583c <HAL_I2C_MspInit+0x88>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80057f2:	23c0      	movs	r3, #192	; 0xc0
 80057f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057f6:	2312      	movs	r3, #18
 80057f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057fa:	2301      	movs	r3, #1
 80057fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057fe:	2303      	movs	r3, #3
 8005800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005802:	2304      	movs	r3, #4
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005806:	f107 0314 	add.w	r3, r7, #20
 800580a:	4619      	mov	r1, r3
 800580c:	480c      	ldr	r0, [pc, #48]	; (8005840 <HAL_I2C_MspInit+0x8c>)
 800580e:	f001 f88d 	bl	800692c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <HAL_I2C_MspInit+0x88>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	4a08      	ldr	r2, [pc, #32]	; (800583c <HAL_I2C_MspInit+0x88>)
 800581c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005820:	6413      	str	r3, [r2, #64]	; 0x40
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <HAL_I2C_MspInit+0x88>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800582e:	bf00      	nop
 8005830:	3728      	adds	r7, #40	; 0x28
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40005400 	.word	0x40005400
 800583c:	40023800 	.word	0x40023800
 8005840:	40020400 	.word	0x40020400

08005844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08c      	sub	sp, #48	; 0x30
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800584c:	f107 031c 	add.w	r3, r7, #28
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	605a      	str	r2, [r3, #4]
 8005856:	609a      	str	r2, [r3, #8]
 8005858:	60da      	str	r2, [r3, #12]
 800585a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a32      	ldr	r2, [pc, #200]	; (800592c <HAL_SPI_MspInit+0xe8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d12c      	bne.n	80058c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005866:	2300      	movs	r3, #0
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	4b31      	ldr	r3, [pc, #196]	; (8005930 <HAL_SPI_MspInit+0xec>)
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	4a30      	ldr	r2, [pc, #192]	; (8005930 <HAL_SPI_MspInit+0xec>)
 8005870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005874:	6453      	str	r3, [r2, #68]	; 0x44
 8005876:	4b2e      	ldr	r3, [pc, #184]	; (8005930 <HAL_SPI_MspInit+0xec>)
 8005878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	4b2a      	ldr	r3, [pc, #168]	; (8005930 <HAL_SPI_MspInit+0xec>)
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	4a29      	ldr	r2, [pc, #164]	; (8005930 <HAL_SPI_MspInit+0xec>)
 800588c:	f043 0301 	orr.w	r3, r3, #1
 8005890:	6313      	str	r3, [r2, #48]	; 0x30
 8005892:	4b27      	ldr	r3, [pc, #156]	; (8005930 <HAL_SPI_MspInit+0xec>)
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800589e:	23a0      	movs	r3, #160	; 0xa0
 80058a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a2:	2302      	movs	r3, #2
 80058a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058aa:	2303      	movs	r3, #3
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80058ae:	2305      	movs	r3, #5
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058b2:	f107 031c 	add.w	r3, r7, #28
 80058b6:	4619      	mov	r1, r3
 80058b8:	481e      	ldr	r0, [pc, #120]	; (8005934 <HAL_SPI_MspInit+0xf0>)
 80058ba:	f001 f837 	bl	800692c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80058be:	e031      	b.n	8005924 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <HAL_SPI_MspInit+0xf4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d12c      	bne.n	8005924 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	4b18      	ldr	r3, [pc, #96]	; (8005930 <HAL_SPI_MspInit+0xec>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	4a17      	ldr	r2, [pc, #92]	; (8005930 <HAL_SPI_MspInit+0xec>)
 80058d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d8:	6413      	str	r3, [r2, #64]	; 0x40
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <HAL_SPI_MspInit+0xec>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	4b11      	ldr	r3, [pc, #68]	; (8005930 <HAL_SPI_MspInit+0xec>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	4a10      	ldr	r2, [pc, #64]	; (8005930 <HAL_SPI_MspInit+0xec>)
 80058f0:	f043 0302 	orr.w	r3, r3, #2
 80058f4:	6313      	str	r3, [r2, #48]	; 0x30
 80058f6:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <HAL_SPI_MspInit+0xec>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8005902:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8005906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005908:	2302      	movs	r3, #2
 800590a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590c:	2300      	movs	r3, #0
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005910:	2303      	movs	r3, #3
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005914:	2305      	movs	r3, #5
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005918:	f107 031c 	add.w	r3, r7, #28
 800591c:	4619      	mov	r1, r3
 800591e:	4807      	ldr	r0, [pc, #28]	; (800593c <HAL_SPI_MspInit+0xf8>)
 8005920:	f001 f804 	bl	800692c <HAL_GPIO_Init>
}
 8005924:	bf00      	nop
 8005926:	3730      	adds	r7, #48	; 0x30
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40013000 	.word	0x40013000
 8005930:	40023800 	.word	0x40023800
 8005934:	40020000 	.word	0x40020000
 8005938:	40003800 	.word	0x40003800
 800593c:	40020400 	.word	0x40020400

08005940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a3d      	ldr	r2, [pc, #244]	; (8005a44 <HAL_TIM_Base_MspInit+0x104>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10e      	bne.n	8005970 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	4b3c      	ldr	r3, [pc, #240]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	4a3b      	ldr	r2, [pc, #236]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	6453      	str	r3, [r2, #68]	; 0x44
 8005962:	4b39      	ldr	r3, [pc, #228]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800596e:	e062      	b.n	8005a36 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM2)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005978:	d10e      	bne.n	8005998 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	4b32      	ldr	r3, [pc, #200]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	4a31      	ldr	r2, [pc, #196]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6413      	str	r3, [r2, #64]	; 0x40
 800598a:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	61bb      	str	r3, [r7, #24]
 8005994:	69bb      	ldr	r3, [r7, #24]
}
 8005996:	e04e      	b.n	8005a36 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM3)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d10e      	bne.n	80059c0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	4b28      	ldr	r3, [pc, #160]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	4a27      	ldr	r2, [pc, #156]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	6413      	str	r3, [r2, #64]	; 0x40
 80059b2:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	697b      	ldr	r3, [r7, #20]
}
 80059be:	e03a      	b.n	8005a36 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM4)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <HAL_TIM_Base_MspInit+0x110>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d10e      	bne.n	80059e8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	4a1d      	ldr	r2, [pc, #116]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 80059d4:	f043 0304 	orr.w	r3, r3, #4
 80059d8:	6413      	str	r3, [r2, #64]	; 0x40
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	693b      	ldr	r3, [r7, #16]
}
 80059e6:	e026      	b.n	8005a36 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM10)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <HAL_TIM_Base_MspInit+0x114>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d10e      	bne.n	8005a10 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 80059fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a00:	6453      	str	r3, [r2, #68]	; 0x44
 8005a02:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
}
 8005a0e:	e012      	b.n	8005a36 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM11)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <HAL_TIM_Base_MspInit+0x118>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d10d      	bne.n	8005a36 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 8005a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a28:	6453      	str	r3, [r2, #68]	; 0x44
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	68bb      	ldr	r3, [r7, #8]
}
 8005a36:	bf00      	nop
 8005a38:	3724      	adds	r7, #36	; 0x24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40000800 	.word	0x40000800
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800

08005a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a64:	f107 030c 	add.w	r3, r7, #12
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	60da      	str	r2, [r3, #12]
 8005a72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a12      	ldr	r2, [pc, #72]	; (8005ac4 <HAL_TIM_MspPostInit+0x68>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d11e      	bne.n	8005abc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <HAL_TIM_MspPostInit+0x6c>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	4a10      	ldr	r2, [pc, #64]	; (8005ac8 <HAL_TIM_MspPostInit+0x6c>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <HAL_TIM_MspPostInit+0x6c>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	60bb      	str	r3, [r7, #8]
 8005a98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = BLED_Pin;
 8005a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005aac:	2301      	movs	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLED_GPIO_Port, &GPIO_InitStruct);
 8005ab0:	f107 030c 	add.w	r3, r7, #12
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4805      	ldr	r0, [pc, #20]	; (8005acc <HAL_TIM_MspPostInit+0x70>)
 8005ab8:	f000 ff38 	bl	800692c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005abc:	bf00      	nop
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40020000 	.word	0x40020000

08005ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ad4:	e7fe      	b.n	8005ad4 <NMI_Handler+0x4>

08005ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ada:	e7fe      	b.n	8005ada <HardFault_Handler+0x4>

08005adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ae0:	e7fe      	b.n	8005ae0 <MemManage_Handler+0x4>

08005ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ae6:	e7fe      	b.n	8005ae6 <BusFault_Handler+0x4>

08005ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005aec:	e7fe      	b.n	8005aec <UsageFault_Handler+0x4>

08005aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005aee:	b480      	push	{r7}
 8005af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005af2:	bf00      	nop
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b00:	bf00      	nop
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b0e:	bf00      	nop
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b1c:	f000 fdb0 	bl	8006680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b20:	bf00      	nop
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005b28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005b2c:	f001 f8ce 	bl	8006ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005b30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005b34:	f001 f8ca 	bl	8006ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005b38:	bf00      	nop
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b44:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <_sbrk+0x5c>)
 8005b46:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <_sbrk+0x60>)
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b50:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <_sbrk+0x64>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b58:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <_sbrk+0x64>)
 8005b5a:	4a12      	ldr	r2, [pc, #72]	; (8005ba4 <_sbrk+0x68>)
 8005b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <_sbrk+0x64>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d207      	bcs.n	8005b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b6c:	f004 f924 	bl	8009db8 <__errno>
 8005b70:	4603      	mov	r3, r0
 8005b72:	220c      	movs	r2, #12
 8005b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7a:	e009      	b.n	8005b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b7c:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <_sbrk+0x64>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <_sbrk+0x64>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4413      	add	r3, r2
 8005b8a:	4a05      	ldr	r2, [pc, #20]	; (8005ba0 <_sbrk+0x64>)
 8005b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20020000 	.word	0x20020000
 8005b9c:	00000400 	.word	0x00000400
 8005ba0:	200008dc 	.word	0x200008dc
 8005ba4:	20000c90 	.word	0x20000c90

08005ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <SystemInit+0x20>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb2:	4a05      	ldr	r2, [pc, #20]	; (8005bc8 <SystemInit+0x20>)
 8005bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005bbc:	bf00      	nop
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	e000ed00 	.word	0xe000ed00

08005bcc <play_tone>:
//extern long tone_old,tone_diff,tone_now;
int tone_time_old;
int tone_time_new;
int tone_time_diff;
void play_tone(char note[3],int length)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
	motor_driver(1);
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	f7fb fd96 	bl	8001708 <motor_driver>
	//plays a single instance of the right frequency
	if(timer_reset==false)
 8005bdc:	4b44      	ldr	r3, [pc, #272]	; (8005cf0 <play_tone+0x124>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f083 0301 	eor.w	r3, r3, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d02b      	beq.n	8005c42 <play_tone+0x76>
	{
		TIM3->CNT = 0;
 8005bea:	4b42      	ldr	r3, [pc, #264]	; (8005cf4 <play_tone+0x128>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	625a      	str	r2, [r3, #36]	; 0x24
		for(int i=0;i<48;i++)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e019      	b.n	8005c2a <play_tone+0x5e>
		{
			if(strcmp(note,ladder_text[i])==0)
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4413      	add	r3, r2
 8005bfe:	4a3e      	ldr	r2, [pc, #248]	; (8005cf8 <play_tone+0x12c>)
 8005c00:	4413      	add	r3, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fa faeb 	bl	80001e0 <strcmp>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d109      	bne.n	8005c24 <play_tone+0x58>
			{
				curr_tone=ladder[i];
 8005c10:	4a3a      	ldr	r2, [pc, #232]	; (8005cfc <play_tone+0x130>)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005c18:	4b39      	ldr	r3, [pc, #228]	; (8005d00 <play_tone+0x134>)
 8005c1a:	801a      	strh	r2, [r3, #0]
				match=i;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	b21a      	sxth	r2, r3
 8005c20:	4b38      	ldr	r3, [pc, #224]	; (8005d04 <play_tone+0x138>)
 8005c22:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<48;i++)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c2e:	dde2      	ble.n	8005bf6 <play_tone+0x2a>
			}
		}
		timer_reset=true;
 8005c30:	4b2f      	ldr	r3, [pc, #188]	; (8005cf0 <play_tone+0x124>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
		tone_time_old=TIM2->CNT;
 8005c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4b32      	ldr	r3, [pc, #200]	; (8005d08 <play_tone+0x13c>)
 8005c40:	601a      	str	r2, [r3, #0]
	}
	//if(timer_reset==true)
	tone_time_new=TIM2->CNT;
 8005c42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b30      	ldr	r3, [pc, #192]	; (8005d0c <play_tone+0x140>)
 8005c4c:	601a      	str	r2, [r3, #0]
	tone_time_diff=0;
 8005c4e:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <play_tone+0x144>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]
	while(tone_time_diff<length || count!=0)
 8005c54:	e037      	b.n	8005cc6 <play_tone+0xfa>
	{
			tone_time_diff=(tone_time_new-tone_time_old);
 8005c56:	4b2d      	ldr	r3, [pc, #180]	; (8005d0c <play_tone+0x140>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	4b2b      	ldr	r3, [pc, #172]	; (8005d08 <play_tone+0x13c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	4a2b      	ldr	r2, [pc, #172]	; (8005d10 <play_tone+0x144>)
 8005c62:	6013      	str	r3, [r2, #0]
			tone_time_new=TIM2->CNT;
 8005c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <play_tone+0x140>)
 8005c6e:	601a      	str	r2, [r3, #0]
			if(TIM3->CNT>curr_tone) //ladder[match]
 8005c70:	4b20      	ldr	r3, [pc, #128]	; (8005cf4 <play_tone+0x128>)
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <play_tone+0x134>)
 8005c76:	8812      	ldrh	r2, [r2, #0]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d924      	bls.n	8005cc6 <play_tone+0xfa>
			{

				HAL_GPIO_TogglePin(STEP_GPIO_Port,STEP_Pin);
 8005c7c:	2110      	movs	r1, #16
 8005c7e:	4825      	ldr	r0, [pc, #148]	; (8005d14 <play_tone+0x148>)
 8005c80:	f001 f809 	bl	8006c96 <HAL_GPIO_TogglePin>
				TIM3->CNT = 0;
 8005c84:	4b1b      	ldr	r3, [pc, #108]	; (8005cf4 <play_tone+0x128>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24
				count++;
 8005c8a:	4b23      	ldr	r3, [pc, #140]	; (8005d18 <play_tone+0x14c>)
 8005c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3301      	adds	r3, #1
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	b21a      	sxth	r2, r3
 8005c98:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <play_tone+0x14c>)
 8005c9a:	801a      	strh	r2, [r3, #0]
				//HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin,GPIO_PIN_SET);

			if(count==2)
 8005c9c:	4b1e      	ldr	r3, [pc, #120]	; (8005d18 <play_tone+0x14c>)
 8005c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d103      	bne.n	8005cae <play_tone+0xe2>
			{
				HAL_GPIO_TogglePin(DIR_GPIO_Port,DIR_Pin);
 8005ca6:	2120      	movs	r1, #32
 8005ca8:	481a      	ldr	r0, [pc, #104]	; (8005d14 <play_tone+0x148>)
 8005caa:	f000 fff4 	bl	8006c96 <HAL_GPIO_TogglePin>
				//count=0;
			}
			if(count==4)
 8005cae:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <play_tone+0x14c>)
 8005cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d106      	bne.n	8005cc6 <play_tone+0xfa>
			{
				count=0;
 8005cb8:	4b17      	ldr	r3, [pc, #92]	; (8005d18 <play_tone+0x14c>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_TogglePin(DIR_GPIO_Port,DIR_Pin);
 8005cbe:	2120      	movs	r1, #32
 8005cc0:	4814      	ldr	r0, [pc, #80]	; (8005d14 <play_tone+0x148>)
 8005cc2:	f000 ffe8 	bl	8006c96 <HAL_GPIO_TogglePin>
	while(tone_time_diff<length || count!=0)
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <play_tone+0x144>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	dcc2      	bgt.n	8005c56 <play_tone+0x8a>
 8005cd0:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <play_tone+0x14c>)
 8005cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1bd      	bne.n	8005c56 <play_tone+0x8a>
	if(tone_time_new-tone_time_old>length)
	{

		//match=-1;
	}
	timer_reset=false;
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <play_tone+0x124>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	701a      	strb	r2, [r3, #0]
	motor_driver(0);
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f7fb fd11 	bl	8001708 <motor_driver>
	return;
 8005ce6:	bf00      	nop


}
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	200008e0 	.word	0x200008e0
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	20000790 	.word	0x20000790
 8005cfc:	20000730 	.word	0x20000730
 8005d00:	20000c44 	.word	0x20000c44
 8005d04:	20000820 	.word	0x20000820
 8005d08:	20000c4c 	.word	0x20000c4c
 8005d0c:	20000c48 	.word	0x20000c48
 8005d10:	20000c40 	.word	0x20000c40
 8005d14:	40020400 	.word	0x40020400
 8005d18:	200008e2 	.word	0x200008e2

08005d1c <play_tune>:

void play_tune(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
	play_tone("c4",800);
	play_tone("c3",800);
	play_tone("g3",1600);
	*/

	play_tone("d4",200);
 8005d20:	21c8      	movs	r1, #200	; 0xc8
 8005d22:	480b      	ldr	r0, [pc, #44]	; (8005d50 <play_tune+0x34>)
 8005d24:	f7ff ff52 	bl	8005bcc <play_tone>
	play_tone("e4",200);
 8005d28:	21c8      	movs	r1, #200	; 0xc8
 8005d2a:	480a      	ldr	r0, [pc, #40]	; (8005d54 <play_tune+0x38>)
 8005d2c:	f7ff ff4e 	bl	8005bcc <play_tone>
	play_tone("c4",200);
 8005d30:	21c8      	movs	r1, #200	; 0xc8
 8005d32:	4809      	ldr	r0, [pc, #36]	; (8005d58 <play_tune+0x3c>)
 8005d34:	f7ff ff4a 	bl	8005bcc <play_tone>
	play_tone("c3",200);
 8005d38:	21c8      	movs	r1, #200	; 0xc8
 8005d3a:	4808      	ldr	r0, [pc, #32]	; (8005d5c <play_tune+0x40>)
 8005d3c:	f7ff ff46 	bl	8005bcc <play_tone>
	play_tone("g3",400);
 8005d40:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d44:	4806      	ldr	r0, [pc, #24]	; (8005d60 <play_tune+0x44>)
 8005d46:	f7ff ff41 	bl	8005bcc <play_tone>
	play_tone("c4",900);
	play_tone("d4",900);
	play_tone("e4",900);
	play_tone("f4",900);
	*/
}
 8005d4a:	bf00      	nop
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	0800ab60 	.word	0x0800ab60
 8005d54:	0800ab64 	.word	0x0800ab64
 8005d58:	0800ab68 	.word	0x0800ab68
 8005d5c:	0800ab6c 	.word	0x0800ab6c
 8005d60:	0800ab70 	.word	0x0800ab70

08005d64 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8005d6e:	f107 020f 	add.w	r2, r7, #15
 8005d72:	1df9      	adds	r1, r7, #7
 8005d74:	2364      	movs	r3, #100	; 0x64
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4804      	ldr	r0, [pc, #16]	; (8005d8c <W25qxx_Spi+0x28>)
 8005d7c:	f002 fe88 	bl	8008a90 <HAL_SPI_TransmitReceive>
	return ret;	
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2000090c 	.word	0x2000090c

08005d90 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	2300      	movs	r3, #0
 8005da4:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005da6:	2200      	movs	r2, #0
 8005da8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dac:	4813      	ldr	r0, [pc, #76]	; (8005dfc <W25qxx_ReadID+0x6c>)
 8005dae:	f000 ff59 	bl	8006c64 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8005db2:	209f      	movs	r0, #159	; 0x9f
 8005db4:	f7ff ffd6 	bl	8005d64 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005db8:	20a5      	movs	r0, #165	; 0xa5
 8005dba:	f7ff ffd3 	bl	8005d64 <W25qxx_Spi>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005dc2:	20a5      	movs	r0, #165	; 0xa5
 8005dc4:	f7ff ffce 	bl	8005d64 <W25qxx_Spi>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005dcc:	20a5      	movs	r0, #165	; 0xa5
 8005dce:	f7ff ffc9 	bl	8005d64 <W25qxx_Spi>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ddc:	4807      	ldr	r0, [pc, #28]	; (8005dfc <W25qxx_ReadID+0x6c>)
 8005dde:	f000 ff41 	bl	8006c64 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	041a      	lsls	r2, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	4313      	orrs	r3, r2
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
  return Temp;
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40020400 	.word	0x40020400

08005e00 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005e06:	2200      	movs	r2, #0
 8005e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e0c:	4816      	ldr	r0, [pc, #88]	; (8005e68 <W25qxx_ReadUniqID+0x68>)
 8005e0e:	f000 ff29 	bl	8006c64 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8005e12:	204b      	movs	r0, #75	; 0x4b
 8005e14:	f7ff ffa6 	bl	8005d64 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	71fb      	strb	r3, [r7, #7]
 8005e1c:	e005      	b.n	8005e2a <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005e1e:	20a5      	movs	r0, #165	; 0xa5
 8005e20:	f7ff ffa0 	bl	8005d64 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	3301      	adds	r3, #1
 8005e28:	71fb      	strb	r3, [r7, #7]
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d9f6      	bls.n	8005e1e <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 8005e30:	2300      	movs	r3, #0
 8005e32:	71bb      	strb	r3, [r7, #6]
 8005e34:	e00b      	b.n	8005e4e <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005e36:	79bc      	ldrb	r4, [r7, #6]
 8005e38:	20a5      	movs	r0, #165	; 0xa5
 8005e3a:	f7ff ff93 	bl	8005d64 <W25qxx_Spi>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	461a      	mov	r2, r3
 8005e42:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <W25qxx_ReadUniqID+0x6c>)
 8005e44:	4423      	add	r3, r4
 8005e46:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8005e48:	79bb      	ldrb	r3, [r7, #6]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	71bb      	strb	r3, [r7, #6]
 8005e4e:	79bb      	ldrb	r3, [r7, #6]
 8005e50:	2b07      	cmp	r3, #7
 8005e52:	d9f0      	bls.n	8005e36 <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005e54:	2201      	movs	r2, #1
 8005e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e5a:	4803      	ldr	r0, [pc, #12]	; (8005e68 <W25qxx_ReadUniqID+0x68>)
 8005e5c:	f000 ff02 	bl	8006c64 <HAL_GPIO_WritePin>
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd90      	pop	{r4, r7, pc}
 8005e68:	40020400 	.word	0x40020400
 8005e6c:	20000c50 	.word	0x20000c50

08005e70 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005e74:	2200      	movs	r2, #0
 8005e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e7a:	4808      	ldr	r0, [pc, #32]	; (8005e9c <W25qxx_WriteEnable+0x2c>)
 8005e7c:	f000 fef2 	bl	8006c64 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8005e80:	2006      	movs	r0, #6
 8005e82:	f7ff ff6f 	bl	8005d64 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005e86:	2201      	movs	r2, #1
 8005e88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e8c:	4803      	ldr	r0, [pc, #12]	; (8005e9c <W25qxx_WriteEnable+0x2c>)
 8005e8e:	f000 fee9 	bl	8006c64 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8005e92:	2001      	movs	r0, #1
 8005e94:	f000 fc14 	bl	80066c0 <HAL_Delay>
}
 8005e98:	bf00      	nop
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40020400 	.word	0x40020400

08005ea0 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005eb4:	481c      	ldr	r0, [pc, #112]	; (8005f28 <W25qxx_ReadStatusRegister+0x88>)
 8005eb6:	f000 fed5 	bl	8006c64 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d10c      	bne.n	8005eda <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8005ec0:	2005      	movs	r0, #5
 8005ec2:	f7ff ff4f 	bl	8005d64 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8005ec6:	20a5      	movs	r0, #165	; 0xa5
 8005ec8:	f7ff ff4c 	bl	8005d64 <W25qxx_Spi>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8005ed0:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <W25qxx_ReadStatusRegister+0x8c>)
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8005ed8:	e01b      	b.n	8005f12 <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d10c      	bne.n	8005efa <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8005ee0:	2035      	movs	r0, #53	; 0x35
 8005ee2:	f7ff ff3f 	bl	8005d64 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8005ee6:	20a5      	movs	r0, #165	; 0xa5
 8005ee8:	f7ff ff3c 	bl	8005d64 <W25qxx_Spi>
 8005eec:	4603      	mov	r3, r0
 8005eee:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8005ef0:	4a0e      	ldr	r2, [pc, #56]	; (8005f2c <W25qxx_ReadStatusRegister+0x8c>)
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8005ef8:	e00b      	b.n	8005f12 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8005efa:	2015      	movs	r0, #21
 8005efc:	f7ff ff32 	bl	8005d64 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8005f00:	20a5      	movs	r0, #165	; 0xa5
 8005f02:	f7ff ff2f 	bl	8005d64 <W25qxx_Spi>
 8005f06:	4603      	mov	r3, r0
 8005f08:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8005f0a:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <W25qxx_ReadStatusRegister+0x8c>)
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005f12:	2201      	movs	r2, #1
 8005f14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f18:	4803      	ldr	r0, [pc, #12]	; (8005f28 <W25qxx_ReadStatusRegister+0x88>)
 8005f1a:	f000 fea3 	bl	8006c64 <HAL_GPIO_WritePin>
	return status;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40020400 	.word	0x40020400
 8005f2c:	20000c50 	.word	0x20000c50

08005f30 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8005f34:	2001      	movs	r0, #1
 8005f36:	f000 fbc3 	bl	80066c0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f40:	480f      	ldr	r0, [pc, #60]	; (8005f80 <W25qxx_WaitForWriteEnd+0x50>)
 8005f42:	f000 fe8f 	bl	8006c64 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8005f46:	2005      	movs	r0, #5
 8005f48:	f7ff ff0c 	bl	8005d64 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005f4c:	20a5      	movs	r0, #165	; 0xa5
 8005f4e:	f7ff ff09 	bl	8005d64 <W25qxx_Spi>
 8005f52:	4603      	mov	r3, r0
 8005f54:	461a      	mov	r2, r3
 8005f56:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <W25qxx_WaitForWriteEnd+0x54>)
 8005f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8005f5c:	2001      	movs	r0, #1
 8005f5e:	f000 fbaf 	bl	80066c0 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8005f62:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <W25qxx_WaitForWriteEnd+0x54>)
 8005f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1ed      	bne.n	8005f4c <W25qxx_WaitForWriteEnd+0x1c>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005f70:	2201      	movs	r2, #1
 8005f72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f76:	4802      	ldr	r0, [pc, #8]	; (8005f80 <W25qxx_WaitForWriteEnd+0x50>)
 8005f78:	f000 fe74 	bl	8006c64 <HAL_GPIO_WritePin>
}
 8005f7c:	bf00      	nop
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40020400 	.word	0x40020400
 8005f84:	20000c50 	.word	0x20000c50

08005f88 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
  w25qxx.Lock=1;	
 8005f8e:	4b65      	ldr	r3, [pc, #404]	; (8006124 <W25qxx_Init+0x19c>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  while(HAL_GetTick()<100)
 8005f96:	e002      	b.n	8005f9e <W25qxx_Init+0x16>
    W25qxx_Delay(1);
 8005f98:	2001      	movs	r0, #1
 8005f9a:	f000 fb91 	bl	80066c0 <HAL_Delay>
  while(HAL_GetTick()<100)
 8005f9e:	f000 fb83 	bl	80066a8 <HAL_GetTick>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b63      	cmp	r3, #99	; 0x63
 8005fa6:	d9f7      	bls.n	8005f98 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fae:	485e      	ldr	r0, [pc, #376]	; (8006128 <W25qxx_Init+0x1a0>)
 8005fb0:	f000 fe58 	bl	8006c64 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8005fb4:	2064      	movs	r0, #100	; 0x64
 8005fb6:	f000 fb83 	bl	80066c0 <HAL_Delay>
  uint32_t	id;
  #if (_W25QXX_DEBUG==1)
  printf("w25qxx Init Begin...\r\n");
  #endif
  id=W25qxx_ReadID();
 8005fba:	f7ff fee9 	bl	8005d90 <W25qxx_ReadID>
 8005fbe:	6078      	str	r0, [r7, #4]
	
  #if (_W25QXX_DEBUG==1)
  printf("w25qxx ID:0x%X\r\n", id);
  #endif
  switch(id & 0x000000FF)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	3b11      	subs	r3, #17
 8005fc6:	2b0f      	cmp	r3, #15
 8005fc8:	d86b      	bhi.n	80060a2 <W25qxx_Init+0x11a>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <W25qxx_Init+0x48>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08006095 	.word	0x08006095
 8005fd4:	08006087 	.word	0x08006087
 8005fd8:	08006079 	.word	0x08006079
 8005fdc:	0800606b 	.word	0x0800606b
 8005fe0:	0800605d 	.word	0x0800605d
 8005fe4:	0800604f 	.word	0x0800604f
 8005fe8:	08006041 	.word	0x08006041
 8005fec:	08006031 	.word	0x08006031
 8005ff0:	08006021 	.word	0x08006021
 8005ff4:	080060a3 	.word	0x080060a3
 8005ff8:	080060a3 	.word	0x080060a3
 8005ffc:	080060a3 	.word	0x080060a3
 8006000:	080060a3 	.word	0x080060a3
 8006004:	080060a3 	.word	0x080060a3
 8006008:	080060a3 	.word	0x080060a3
 800600c:	08006011 	.word	0x08006011
  {
		case 0x20:	// 	w25q512
			w25qxx.ID=W25Q512;
 8006010:	4b44      	ldr	r3, [pc, #272]	; (8006124 <W25qxx_Init+0x19c>)
 8006012:	2205      	movs	r2, #5
 8006014:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8006016:	4b43      	ldr	r3, [pc, #268]	; (8006124 <W25qxx_Init+0x19c>)
 8006018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800601c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 800601e:	e046      	b.n	80060ae <W25qxx_Init+0x126>
		case 0x19:	// 	w25q256
			w25qxx.ID=W25Q256;
 8006020:	4b40      	ldr	r3, [pc, #256]	; (8006124 <W25qxx_Init+0x19c>)
 8006022:	2204      	movs	r2, #4
 8006024:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8006026:	4b3f      	ldr	r3, [pc, #252]	; (8006124 <W25qxx_Init+0x19c>)
 8006028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800602c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 800602e:	e03e      	b.n	80060ae <W25qxx_Init+0x126>
		case 0x18:	// 	w25q128
			w25qxx.ID=W25Q128;
 8006030:	4b3c      	ldr	r3, [pc, #240]	; (8006124 <W25qxx_Init+0x19c>)
 8006032:	2203      	movs	r2, #3
 8006034:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8006036:	4b3b      	ldr	r3, [pc, #236]	; (8006124 <W25qxx_Init+0x19c>)
 8006038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800603c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 800603e:	e036      	b.n	80060ae <W25qxx_Init+0x126>
		case 0x17:	//	w25q64
			w25qxx.ID=W25Q64;
 8006040:	4b38      	ldr	r3, [pc, #224]	; (8006124 <W25qxx_Init+0x19c>)
 8006042:	2202      	movs	r2, #2
 8006044:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8006046:	4b37      	ldr	r3, [pc, #220]	; (8006124 <W25qxx_Init+0x19c>)
 8006048:	2280      	movs	r2, #128	; 0x80
 800604a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 800604c:	e02f      	b.n	80060ae <W25qxx_Init+0x126>
		case 0x16:	//	w25q32
			w25qxx.ID=W25Q32;
 800604e:	4b35      	ldr	r3, [pc, #212]	; (8006124 <W25qxx_Init+0x19c>)
 8006050:	2201      	movs	r2, #1
 8006052:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8006054:	4b33      	ldr	r3, [pc, #204]	; (8006124 <W25qxx_Init+0x19c>)
 8006056:	2240      	movs	r2, #64	; 0x40
 8006058:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 800605a:	e028      	b.n	80060ae <W25qxx_Init+0x126>
		case 0x15:	//	w25q16
			w25qxx.ID=W25Q16;
 800605c:	4b31      	ldr	r3, [pc, #196]	; (8006124 <W25qxx_Init+0x19c>)
 800605e:	2204      	movs	r2, #4
 8006060:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8006062:	4b30      	ldr	r3, [pc, #192]	; (8006124 <W25qxx_Init+0x19c>)
 8006064:	2220      	movs	r2, #32
 8006066:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8006068:	e021      	b.n	80060ae <W25qxx_Init+0x126>
		case 0x14:	//	w25q80
			w25qxx.ID=W25Q80;
 800606a:	4b2e      	ldr	r3, [pc, #184]	; (8006124 <W25qxx_Init+0x19c>)
 800606c:	2203      	movs	r2, #3
 800606e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8006070:	4b2c      	ldr	r3, [pc, #176]	; (8006124 <W25qxx_Init+0x19c>)
 8006072:	2210      	movs	r2, #16
 8006074:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8006076:	e01a      	b.n	80060ae <W25qxx_Init+0x126>
		case 0x13:	//	w25q40
			w25qxx.ID=W25Q40;
 8006078:	4b2a      	ldr	r3, [pc, #168]	; (8006124 <W25qxx_Init+0x19c>)
 800607a:	2202      	movs	r2, #2
 800607c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800607e:	4b29      	ldr	r3, [pc, #164]	; (8006124 <W25qxx_Init+0x19c>)
 8006080:	2208      	movs	r2, #8
 8006082:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8006084:	e013      	b.n	80060ae <W25qxx_Init+0x126>
		case 0x12:	//	w25q20
			w25qxx.ID=W25Q20;
 8006086:	4b27      	ldr	r3, [pc, #156]	; (8006124 <W25qxx_Init+0x19c>)
 8006088:	2201      	movs	r2, #1
 800608a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 800608c:	4b25      	ldr	r3, [pc, #148]	; (8006124 <W25qxx_Init+0x19c>)
 800608e:	2204      	movs	r2, #4
 8006090:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8006092:	e00c      	b.n	80060ae <W25qxx_Init+0x126>
		case 0x11:	//	w25q10
			w25qxx.ID=W25Q10;
 8006094:	4b23      	ldr	r3, [pc, #140]	; (8006124 <W25qxx_Init+0x19c>)
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 800609a:	4b22      	ldr	r3, [pc, #136]	; (8006124 <W25qxx_Init+0x19c>)
 800609c:	2202      	movs	r2, #2
 800609e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 80060a0:	e005      	b.n	80060ae <W25qxx_Init+0x126>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 80060a2:	4b20      	ldr	r3, [pc, #128]	; (8006124 <W25qxx_Init+0x19c>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e036      	b.n	800611c <W25qxx_Init+0x194>
				
	}		
	w25qxx.PageSize=256;
 80060ae:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <W25qxx_Init+0x19c>)
 80060b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060b4:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 80060b6:	4b1b      	ldr	r3, [pc, #108]	; (8006124 <W25qxx_Init+0x19c>)
 80060b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060bc:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80060be:	4b19      	ldr	r3, [pc, #100]	; (8006124 <W25qxx_Init+0x19c>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	4a17      	ldr	r2, [pc, #92]	; (8006124 <W25qxx_Init+0x19c>)
 80060c6:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80060c8:	4b16      	ldr	r3, [pc, #88]	; (8006124 <W25qxx_Init+0x19c>)
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <W25qxx_Init+0x19c>)
 80060ce:	6912      	ldr	r2, [r2, #16]
 80060d0:	fb02 f303 	mul.w	r3, r2, r3
 80060d4:	4a13      	ldr	r2, [pc, #76]	; (8006124 <W25qxx_Init+0x19c>)
 80060d6:	8952      	ldrh	r2, [r2, #10]
 80060d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060dc:	4a11      	ldr	r2, [pc, #68]	; (8006124 <W25qxx_Init+0x19c>)
 80060de:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80060e0:	4b10      	ldr	r3, [pc, #64]	; (8006124 <W25qxx_Init+0x19c>)
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	4a0f      	ldr	r2, [pc, #60]	; (8006124 <W25qxx_Init+0x19c>)
 80060e8:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80060ea:	4b0e      	ldr	r3, [pc, #56]	; (8006124 <W25qxx_Init+0x19c>)
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	4a0d      	ldr	r2, [pc, #52]	; (8006124 <W25qxx_Init+0x19c>)
 80060f0:	6912      	ldr	r2, [r2, #16]
 80060f2:	fb02 f303 	mul.w	r3, r2, r3
 80060f6:	0a9b      	lsrs	r3, r3, #10
 80060f8:	4a0a      	ldr	r2, [pc, #40]	; (8006124 <W25qxx_Init+0x19c>)
 80060fa:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80060fc:	f7ff fe80 	bl	8005e00 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8006100:	2001      	movs	r0, #1
 8006102:	f7ff fecd 	bl	8005ea0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8006106:	2002      	movs	r0, #2
 8006108:	f7ff feca 	bl	8005ea0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800610c:	2003      	movs	r0, #3
 800610e:	f7ff fec7 	bl	8005ea0 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8006112:	4b04      	ldr	r3, [pc, #16]	; (8006124 <W25qxx_Init+0x19c>)
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800611a:	2301      	movs	r3, #1
}	
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20000c50 	.word	0x20000c50
 8006128:	40020400 	.word	0x40020400

0800612c <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;	
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8006134:	e002      	b.n	800613c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8006136:	2001      	movs	r0, #1
 8006138:	f000 fac2 	bl	80066c0 <HAL_Delay>
	while(w25qxx.Lock==1)
 800613c:	4b24      	ldr	r3, [pc, #144]	; (80061d0 <W25qxx_EraseSector+0xa4>)
 800613e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006142:	2b01      	cmp	r3, #1
 8006144:	d0f7      	beq.n	8006136 <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 8006146:	4b22      	ldr	r3, [pc, #136]	; (80061d0 <W25qxx_EraseSector+0xa4>)
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 800614e:	f7ff feef 	bl	8005f30 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8006152:	4b1f      	ldr	r3, [pc, #124]	; (80061d0 <W25qxx_EraseSector+0xa4>)
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	fb02 f303 	mul.w	r3, r2, r3
 800615c:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 800615e:	f7ff fe87 	bl	8005e70 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8006162:	2200      	movs	r2, #0
 8006164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006168:	481a      	ldr	r0, [pc, #104]	; (80061d4 <W25qxx_EraseSector+0xa8>)
 800616a:	f000 fd7b 	bl	8006c64 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 800616e:	2020      	movs	r0, #32
 8006170:	f7ff fdf8 	bl	8005d64 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8006174:	4b16      	ldr	r3, [pc, #88]	; (80061d0 <W25qxx_EraseSector+0xa4>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d905      	bls.n	8006188 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	0e1b      	lsrs	r3, r3, #24
 8006180:	b2db      	uxtb	r3, r3
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fdee 	bl	8005d64 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	0c1b      	lsrs	r3, r3, #16
 800618c:	b2db      	uxtb	r3, r3
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fde8 	bl	8005d64 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	b2db      	uxtb	r3, r3
 800619a:	4618      	mov	r0, r3
 800619c:	f7ff fde2 	bl	8005d64 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fddd 	bl	8005d64 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80061aa:	2201      	movs	r2, #1
 80061ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061b0:	4808      	ldr	r0, [pc, #32]	; (80061d4 <W25qxx_EraseSector+0xa8>)
 80061b2:	f000 fd57 	bl	8006c64 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80061b6:	f7ff febb 	bl	8005f30 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 80061ba:	2001      	movs	r0, #1
 80061bc:	f000 fa80 	bl	80066c0 <HAL_Delay>
	w25qxx.Lock=0;
 80061c0:	4b03      	ldr	r3, [pc, #12]	; (80061d0 <W25qxx_EraseSector+0xa4>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000c50 	.word	0x20000c50
 80061d4:	40020400 	.word	0x40020400

080061d8 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <W25qxx_SectorToPage+0x28>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	4a05      	ldr	r2, [pc, #20]	; (8006200 <W25qxx_SectorToPage+0x28>)
 80061ec:	8952      	ldrh	r2, [r2, #10]
 80061ee:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20000c50 	.word	0x20000c50

08006204 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8006212:	e002      	b.n	800621a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8006214:	2001      	movs	r0, #1
 8006216:	f000 fa53 	bl	80066c0 <HAL_Delay>
	while(w25qxx.Lock==1)
 800621a:	4b38      	ldr	r3, [pc, #224]	; (80062fc <W25qxx_WritePage+0xf8>)
 800621c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006220:	2b01      	cmp	r3, #1
 8006222:	d0f7      	beq.n	8006214 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8006224:	4b35      	ldr	r3, [pc, #212]	; (80062fc <W25qxx_WritePage+0xf8>)
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4413      	add	r3, r2
 8006232:	4a32      	ldr	r2, [pc, #200]	; (80062fc <W25qxx_WritePage+0xf8>)
 8006234:	8952      	ldrh	r2, [r2, #10]
 8006236:	4293      	cmp	r3, r2
 8006238:	d802      	bhi.n	8006240 <W25qxx_WritePage+0x3c>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d105      	bne.n	800624c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8006240:	4b2e      	ldr	r3, [pc, #184]	; (80062fc <W25qxx_WritePage+0xf8>)
 8006242:	895b      	ldrh	r3, [r3, #10]
 8006244:	461a      	mov	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	4413      	add	r3, r2
 8006252:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <W25qxx_WritePage+0xf8>)
 8006254:	8952      	ldrh	r2, [r2, #10]
 8006256:	4293      	cmp	r3, r2
 8006258:	d905      	bls.n	8006266 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 800625a:	4b28      	ldr	r3, [pc, #160]	; (80062fc <W25qxx_WritePage+0xf8>)
 800625c:	895b      	ldrh	r3, [r3, #10]
 800625e:	461a      	mov	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 8006266:	f7ff fe63 	bl	8005f30 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 800626a:	f7ff fe01 	bl	8005e70 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800626e:	2200      	movs	r2, #0
 8006270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006274:	4822      	ldr	r0, [pc, #136]	; (8006300 <W25qxx_WritePage+0xfc>)
 8006276:	f000 fcf5 	bl	8006c64 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 800627a:	2002      	movs	r0, #2
 800627c:	f7ff fd72 	bl	8005d64 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8006280:	4b1e      	ldr	r3, [pc, #120]	; (80062fc <W25qxx_WritePage+0xf8>)
 8006282:	895b      	ldrh	r3, [r3, #10]
 8006284:	461a      	mov	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	fb03 f302 	mul.w	r3, r3, r2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	4413      	add	r3, r2
 8006290:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8006292:	4b1a      	ldr	r3, [pc, #104]	; (80062fc <W25qxx_WritePage+0xf8>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b03      	cmp	r3, #3
 8006298:	d905      	bls.n	80062a6 <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	0e1b      	lsrs	r3, r3, #24
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fd5f 	bl	8005d64 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	0c1b      	lsrs	r3, r3, #16
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff fd59 	bl	8005d64 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	0a1b      	lsrs	r3, r3, #8
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fd53 	bl	8005d64 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff fd4e 	bl	8005d64 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	2364      	movs	r3, #100	; 0x64
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	480c      	ldr	r0, [pc, #48]	; (8006304 <W25qxx_WritePage+0x100>)
 80062d2:	f002 f990 	bl	80085f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80062d6:	2201      	movs	r2, #1
 80062d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062dc:	4808      	ldr	r0, [pc, #32]	; (8006300 <W25qxx_WritePage+0xfc>)
 80062de:	f000 fcc1 	bl	8006c64 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80062e2:	f7ff fe25 	bl	8005f30 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 80062e6:	2001      	movs	r0, #1
 80062e8:	f000 f9ea 	bl	80066c0 <HAL_Delay>
	w25qxx.Lock=0;
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <W25qxx_WritePage+0xf8>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20000c50 	.word	0x20000c50
 8006300:	40020400 	.word	0x40020400
 8006304:	2000090c 	.word	0x2000090c

08006308 <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 8006316:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <W25qxx_WriteSector+0xc0>)
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d802      	bhi.n	8006326 <W25qxx_WriteSector+0x1e>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 8006326:	4b28      	ldr	r3, [pc, #160]	; (80063c8 <W25qxx_WriteSector+0xc0>)
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 800632c:	4b26      	ldr	r3, [pc, #152]	; (80063c8 <W25qxx_WriteSector+0xc0>)
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d243      	bcs.n	80063be <W25qxx_WriteSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	441a      	add	r2, r3
 800633c:	4b22      	ldr	r3, [pc, #136]	; (80063c8 <W25qxx_WriteSector+0xc0>)
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	429a      	cmp	r2, r3
 8006342:	d905      	bls.n	8006350 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 8006344:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <W25qxx_WriteSector+0xc0>)
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e001      	b.n	8006354 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8006354:	68b8      	ldr	r0, [r7, #8]
 8006356:	f7ff ff3f 	bl	80061d8 <W25qxx_SectorToPage>
 800635a:	4602      	mov	r2, r0
 800635c:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <W25qxx_WriteSector+0xc0>)
 800635e:	895b      	ldrh	r3, [r3, #10]
 8006360:	4619      	mov	r1, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	fbb3 f3f1 	udiv	r3, r3, r1
 8006368:	4413      	add	r3, r2
 800636a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 800636c:	4b16      	ldr	r3, [pc, #88]	; (80063c8 <W25qxx_WriteSector+0xc0>)
 800636e:	895b      	ldrh	r3, [r3, #10]
 8006370:	461a      	mov	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	fbb3 f1f2 	udiv	r1, r3, r2
 8006378:	fb02 f201 	mul.w	r2, r2, r1
 800637c:	1a9b      	subs	r3, r3, r2
 800637e:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	69f9      	ldr	r1, [r7, #28]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff ff3c 	bl	8006204 <W25qxx_WritePage>
		StartPage++;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	3301      	adds	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8006392:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <W25qxx_WriteSector+0xc0>)
 8006394:	895b      	ldrh	r3, [r3, #10]
 8006396:	461a      	mov	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	1a9a      	subs	r2, r3, r2
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	4413      	add	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80063a2:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <W25qxx_WriteSector+0xc0>)
 80063a4:	895b      	ldrh	r3, [r3, #10]
 80063a6:	461a      	mov	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	dce1      	bgt.n	8006380 <W25qxx_WriteSector+0x78>
 80063bc:	e000      	b.n	80063c0 <W25qxx_WriteSector+0xb8>
		return;
 80063be:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000c50 	.word	0x20000c50

080063cc <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 80063da:	e002      	b.n	80063e2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80063dc:	2001      	movs	r0, #1
 80063de:	f000 f96f 	bl	80066c0 <HAL_Delay>
	while(w25qxx.Lock==1)
 80063e2:	4b35      	ldr	r3, [pc, #212]	; (80064b8 <W25qxx_ReadPage+0xec>)
 80063e4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d0f7      	beq.n	80063dc <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 80063ec:	4b32      	ldr	r3, [pc, #200]	; (80064b8 <W25qxx_ReadPage+0xec>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 80063f4:	4b30      	ldr	r3, [pc, #192]	; (80064b8 <W25qxx_ReadPage+0xec>)
 80063f6:	895b      	ldrh	r3, [r3, #10]
 80063f8:	461a      	mov	r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d802      	bhi.n	8006406 <W25qxx_ReadPage+0x3a>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8006406:	4b2c      	ldr	r3, [pc, #176]	; (80064b8 <W25qxx_ReadPage+0xec>)
 8006408:	895b      	ldrh	r3, [r3, #10]
 800640a:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	4413      	add	r3, r2
 8006412:	4a29      	ldr	r2, [pc, #164]	; (80064b8 <W25qxx_ReadPage+0xec>)
 8006414:	8952      	ldrh	r2, [r2, #10]
 8006416:	4293      	cmp	r3, r2
 8006418:	d905      	bls.n	8006426 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 800641a:	4b27      	ldr	r3, [pc, #156]	; (80064b8 <W25qxx_ReadPage+0xec>)
 800641c:	895b      	ldrh	r3, [r3, #10]
 800641e:	461a      	mov	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 8006426:	4b24      	ldr	r3, [pc, #144]	; (80064b8 <W25qxx_ReadPage+0xec>)
 8006428:	895b      	ldrh	r3, [r3, #10]
 800642a:	461a      	mov	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	fb03 f302 	mul.w	r3, r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	4413      	add	r3, r2
 8006436:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8006438:	2200      	movs	r2, #0
 800643a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800643e:	481f      	ldr	r0, [pc, #124]	; (80064bc <W25qxx_ReadPage+0xf0>)
 8006440:	f000 fc10 	bl	8006c64 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8006444:	200b      	movs	r0, #11
 8006446:	f7ff fc8d 	bl	8005d64 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 800644a:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <W25qxx_ReadPage+0xec>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b03      	cmp	r3, #3
 8006450:	d905      	bls.n	800645e <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	0e1b      	lsrs	r3, r3, #24
 8006456:	b2db      	uxtb	r3, r3
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff fc83 	bl	8005d64 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	b2db      	uxtb	r3, r3
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fc7d 	bl	8005d64 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	0a1b      	lsrs	r3, r3, #8
 800646e:	b2db      	uxtb	r3, r3
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fc77 	bl	8005d64 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fc72 	bl	8005d64 <W25qxx_Spi>
	W25qxx_Spi(0);
 8006480:	2000      	movs	r0, #0
 8006482:	f7ff fc6f 	bl	8005d64 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);	
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	b29a      	uxth	r2, r3
 800648a:	2364      	movs	r3, #100	; 0x64
 800648c:	68f9      	ldr	r1, [r7, #12]
 800648e:	480c      	ldr	r0, [pc, #48]	; (80064c0 <W25qxx_ReadPage+0xf4>)
 8006490:	f002 f9ed 	bl	800886e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006494:	2201      	movs	r2, #1
 8006496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800649a:	4808      	ldr	r0, [pc, #32]	; (80064bc <W25qxx_ReadPage+0xf0>)
 800649c:	f000 fbe2 	bl	8006c64 <HAL_GPIO_WritePin>
	}	
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 80064a0:	2001      	movs	r0, #1
 80064a2:	f000 f90d 	bl	80066c0 <HAL_Delay>
	w25qxx.Lock=0;
 80064a6:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <W25qxx_ReadPage+0xec>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000c50 	.word	0x20000c50
 80064bc:	40020400 	.word	0x40020400
 80064c0:	2000090c 	.word	0x2000090c

080064c4 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{	
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 80064d2:	4b2c      	ldr	r3, [pc, #176]	; (8006584 <W25qxx_ReadSector+0xc0>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d802      	bhi.n	80064e2 <W25qxx_ReadSector+0x1e>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d102      	bne.n	80064e8 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 80064e2:	4b28      	ldr	r3, [pc, #160]	; (8006584 <W25qxx_ReadSector+0xc0>)
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 80064e8:	4b26      	ldr	r3, [pc, #152]	; (8006584 <W25qxx_ReadSector+0xc0>)
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d243      	bcs.n	800657a <W25qxx_ReadSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	441a      	add	r2, r3
 80064f8:	4b22      	ldr	r3, [pc, #136]	; (8006584 <W25qxx_ReadSector+0xc0>)
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d905      	bls.n	800650c <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 8006500:	4b20      	ldr	r3, [pc, #128]	; (8006584 <W25qxx_ReadSector+0xc0>)
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	e001      	b.n	8006510 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;	
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8006510:	68b8      	ldr	r0, [r7, #8]
 8006512:	f7ff fe61 	bl	80061d8 <W25qxx_SectorToPage>
 8006516:	4602      	mov	r2, r0
 8006518:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <W25qxx_ReadSector+0xc0>)
 800651a:	895b      	ldrh	r3, [r3, #10]
 800651c:	4619      	mov	r1, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	fbb3 f3f1 	udiv	r3, r3, r1
 8006524:	4413      	add	r3, r2
 8006526:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8006528:	4b16      	ldr	r3, [pc, #88]	; (8006584 <W25qxx_ReadSector+0xc0>)
 800652a:	895b      	ldrh	r3, [r3, #10]
 800652c:	461a      	mov	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	fbb3 f1f2 	udiv	r1, r3, r2
 8006534:	fb02 f201 	mul.w	r2, r2, r1
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	69f9      	ldr	r1, [r7, #28]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f7ff ff42 	bl	80063cc <W25qxx_ReadPage>
		StartPage++;
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	3301      	adds	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 800654e:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <W25qxx_ReadSector+0xc0>)
 8006550:	895b      	ldrh	r3, [r3, #10]
 8006552:	461a      	mov	r2, r3
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	1a9a      	subs	r2, r3, r2
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	4413      	add	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <W25qxx_ReadSector+0xc0>)
 8006560:	895b      	ldrh	r3, [r3, #10]
 8006562:	461a      	mov	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	dce1      	bgt.n	800653c <W25qxx_ReadSector+0x78>
 8006578:	e000      	b.n	800657c <W25qxx_ReadSector+0xb8>
		return;
 800657a:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 800657c:	3720      	adds	r7, #32
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000c50 	.word	0x20000c50

08006588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800658c:	480d      	ldr	r0, [pc, #52]	; (80065c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800658e:	490e      	ldr	r1, [pc, #56]	; (80065c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006590:	4a0e      	ldr	r2, [pc, #56]	; (80065cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006594:	e002      	b.n	800659c <LoopCopyDataInit>

08006596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800659a:	3304      	adds	r3, #4

0800659c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800659c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800659e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80065a0:	d3f9      	bcc.n	8006596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80065a2:	4a0b      	ldr	r2, [pc, #44]	; (80065d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80065a4:	4c0b      	ldr	r4, [pc, #44]	; (80065d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80065a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80065a8:	e001      	b.n	80065ae <LoopFillZerobss>

080065aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80065aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80065ac:	3204      	adds	r2, #4

080065ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80065ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80065b0:	d3fb      	bcc.n	80065aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80065b2:	f7ff faf9 	bl	8005ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065b6:	f003 fc05 	bl	8009dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065ba:	f7fd fc5b 	bl	8003e74 <main>
  bx  lr    
 80065be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80065c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80065c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80065c8:	20000890 	.word	0x20000890
  ldr r2, =_sidata
 80065cc:	0800e8ac 	.word	0x0800e8ac
  ldr r2, =_sbss
 80065d0:	20000890 	.word	0x20000890
  ldr r4, =_ebss
 80065d4:	20000c8c 	.word	0x20000c8c

080065d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065d8:	e7fe      	b.n	80065d8 <ADC_IRQHandler>
	...

080065dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065e0:	4b0e      	ldr	r3, [pc, #56]	; (800661c <HAL_Init+0x40>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a0d      	ldr	r2, [pc, #52]	; (800661c <HAL_Init+0x40>)
 80065e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_Init+0x40>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a0a      	ldr	r2, [pc, #40]	; (800661c <HAL_Init+0x40>)
 80065f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <HAL_Init+0x40>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a07      	ldr	r2, [pc, #28]	; (800661c <HAL_Init+0x40>)
 80065fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006604:	2003      	movs	r0, #3
 8006606:	f000 f94f 	bl	80068a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800660a:	2000      	movs	r0, #0
 800660c:	f000 f808 	bl	8006620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006610:	f7ff f8a8 	bl	8005764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40023c00 	.word	0x40023c00

08006620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006628:	4b12      	ldr	r3, [pc, #72]	; (8006674 <HAL_InitTick+0x54>)
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	4b12      	ldr	r3, [pc, #72]	; (8006678 <HAL_InitTick+0x58>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	4619      	mov	r1, r3
 8006632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006636:	fbb3 f3f1 	udiv	r3, r3, r1
 800663a:	fbb2 f3f3 	udiv	r3, r2, r3
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f967 	bl	8006912 <HAL_SYSTICK_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e00e      	b.n	800666c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b0f      	cmp	r3, #15
 8006652:	d80a      	bhi.n	800666a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006654:	2200      	movs	r2, #0
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	f000 f92f 	bl	80068be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006660:	4a06      	ldr	r2, [pc, #24]	; (800667c <HAL_InitTick+0x5c>)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	e000      	b.n	800666c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	2000072c 	.word	0x2000072c
 8006678:	20000828 	.word	0x20000828
 800667c:	20000824 	.word	0x20000824

08006680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006684:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <HAL_IncTick+0x20>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <HAL_IncTick+0x24>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4413      	add	r3, r2
 8006690:	4a04      	ldr	r2, [pc, #16]	; (80066a4 <HAL_IncTick+0x24>)
 8006692:	6013      	str	r3, [r2, #0]
}
 8006694:	bf00      	nop
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000828 	.word	0x20000828
 80066a4:	20000c78 	.word	0x20000c78

080066a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  return uwTick;
 80066ac:	4b03      	ldr	r3, [pc, #12]	; (80066bc <HAL_GetTick+0x14>)
 80066ae:	681b      	ldr	r3, [r3, #0]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000c78 	.word	0x20000c78

080066c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066c8:	f7ff ffee 	bl	80066a8 <HAL_GetTick>
 80066cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d005      	beq.n	80066e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066da:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <HAL_Delay+0x44>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80066e6:	bf00      	nop
 80066e8:	f7ff ffde 	bl	80066a8 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d8f7      	bhi.n	80066e8 <HAL_Delay+0x28>
  {
  }
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000828 	.word	0x20000828

08006708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006718:	4b0c      	ldr	r3, [pc, #48]	; (800674c <__NVIC_SetPriorityGrouping+0x44>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006724:	4013      	ands	r3, r2
 8006726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800673a:	4a04      	ldr	r2, [pc, #16]	; (800674c <__NVIC_SetPriorityGrouping+0x44>)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	60d3      	str	r3, [r2, #12]
}
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	e000ed00 	.word	0xe000ed00

08006750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006754:	4b04      	ldr	r3, [pc, #16]	; (8006768 <__NVIC_GetPriorityGrouping+0x18>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	0a1b      	lsrs	r3, r3, #8
 800675a:	f003 0307 	and.w	r3, r3, #7
}
 800675e:	4618      	mov	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	e000ed00 	.word	0xe000ed00

0800676c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677a:	2b00      	cmp	r3, #0
 800677c:	db0b      	blt.n	8006796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	f003 021f 	and.w	r2, r3, #31
 8006784:	4907      	ldr	r1, [pc, #28]	; (80067a4 <__NVIC_EnableIRQ+0x38>)
 8006786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	2001      	movs	r0, #1
 800678e:	fa00 f202 	lsl.w	r2, r0, r2
 8006792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	e000e100 	.word	0xe000e100

080067a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	6039      	str	r1, [r7, #0]
 80067b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	db0a      	blt.n	80067d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	490c      	ldr	r1, [pc, #48]	; (80067f4 <__NVIC_SetPriority+0x4c>)
 80067c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c6:	0112      	lsls	r2, r2, #4
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	440b      	add	r3, r1
 80067cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067d0:	e00a      	b.n	80067e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	4908      	ldr	r1, [pc, #32]	; (80067f8 <__NVIC_SetPriority+0x50>)
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	3b04      	subs	r3, #4
 80067e0:	0112      	lsls	r2, r2, #4
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	440b      	add	r3, r1
 80067e6:	761a      	strb	r2, [r3, #24]
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	e000e100 	.word	0xe000e100
 80067f8:	e000ed00 	.word	0xe000ed00

080067fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b089      	sub	sp, #36	; 0x24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f1c3 0307 	rsb	r3, r3, #7
 8006816:	2b04      	cmp	r3, #4
 8006818:	bf28      	it	cs
 800681a:	2304      	movcs	r3, #4
 800681c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	3304      	adds	r3, #4
 8006822:	2b06      	cmp	r3, #6
 8006824:	d902      	bls.n	800682c <NVIC_EncodePriority+0x30>
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	3b03      	subs	r3, #3
 800682a:	e000      	b.n	800682e <NVIC_EncodePriority+0x32>
 800682c:	2300      	movs	r3, #0
 800682e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006830:	f04f 32ff 	mov.w	r2, #4294967295
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	43da      	mvns	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	401a      	ands	r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006844:	f04f 31ff 	mov.w	r1, #4294967295
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	fa01 f303 	lsl.w	r3, r1, r3
 800684e:	43d9      	mvns	r1, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006854:	4313      	orrs	r3, r2
         );
}
 8006856:	4618      	mov	r0, r3
 8006858:	3724      	adds	r7, #36	; 0x24
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3b01      	subs	r3, #1
 8006870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006874:	d301      	bcc.n	800687a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006876:	2301      	movs	r3, #1
 8006878:	e00f      	b.n	800689a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800687a:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <SysTick_Config+0x40>)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3b01      	subs	r3, #1
 8006880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006882:	210f      	movs	r1, #15
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	f7ff ff8e 	bl	80067a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <SysTick_Config+0x40>)
 800688e:	2200      	movs	r2, #0
 8006890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006892:	4b04      	ldr	r3, [pc, #16]	; (80068a4 <SysTick_Config+0x40>)
 8006894:	2207      	movs	r2, #7
 8006896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	e000e010 	.word	0xe000e010

080068a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff ff29 	bl	8006708 <__NVIC_SetPriorityGrouping>
}
 80068b6:	bf00      	nop
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068be:	b580      	push	{r7, lr}
 80068c0:	b086      	sub	sp, #24
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	4603      	mov	r3, r0
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
 80068ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068d0:	f7ff ff3e 	bl	8006750 <__NVIC_GetPriorityGrouping>
 80068d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	6978      	ldr	r0, [r7, #20]
 80068dc:	f7ff ff8e 	bl	80067fc <NVIC_EncodePriority>
 80068e0:	4602      	mov	r2, r0
 80068e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e6:	4611      	mov	r1, r2
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff ff5d 	bl	80067a8 <__NVIC_SetPriority>
}
 80068ee:	bf00      	nop
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	4603      	mov	r3, r0
 80068fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff ff31 	bl	800676c <__NVIC_EnableIRQ>
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff ffa2 	bl	8006864 <SysTick_Config>
 8006920:	4603      	mov	r3, r0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800692c:	b480      	push	{r7}
 800692e:	b089      	sub	sp, #36	; 0x24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800693a:	2300      	movs	r3, #0
 800693c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800693e:	2300      	movs	r3, #0
 8006940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	e159      	b.n	8006bfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006948:	2201      	movs	r2, #1
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4013      	ands	r3, r2
 800695a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	429a      	cmp	r2, r3
 8006962:	f040 8148 	bne.w	8006bf6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	2b01      	cmp	r3, #1
 8006970:	d005      	beq.n	800697e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800697a:	2b02      	cmp	r3, #2
 800697c:	d130      	bne.n	80069e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	2203      	movs	r2, #3
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	43db      	mvns	r3, r3
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	4013      	ands	r3, r2
 8006994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069b4:	2201      	movs	r2, #1
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	43db      	mvns	r3, r3
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	4013      	ands	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	091b      	lsrs	r3, r3, #4
 80069ca:	f003 0201 	and.w	r2, r3, #1
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d017      	beq.n	8006a1c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	2203      	movs	r2, #3
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	43db      	mvns	r3, r3
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	4013      	ands	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d123      	bne.n	8006a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	08da      	lsrs	r2, r3, #3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3208      	adds	r2, #8
 8006a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	220f      	movs	r2, #15
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	43db      	mvns	r3, r3
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	08da      	lsrs	r2, r3, #3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3208      	adds	r2, #8
 8006a6a:	69b9      	ldr	r1, [r7, #24]
 8006a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	43db      	mvns	r3, r3
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4013      	ands	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f003 0203 	and.w	r2, r3, #3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 80a2 	beq.w	8006bf6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
 8006ab6:	4b57      	ldr	r3, [pc, #348]	; (8006c14 <HAL_GPIO_Init+0x2e8>)
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	4a56      	ldr	r2, [pc, #344]	; (8006c14 <HAL_GPIO_Init+0x2e8>)
 8006abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ac2:	4b54      	ldr	r3, [pc, #336]	; (8006c14 <HAL_GPIO_Init+0x2e8>)
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ace:	4a52      	ldr	r2, [pc, #328]	; (8006c18 <HAL_GPIO_Init+0x2ec>)
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	089b      	lsrs	r3, r3, #2
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	220f      	movs	r2, #15
 8006ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aea:	43db      	mvns	r3, r3
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	4013      	ands	r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a49      	ldr	r2, [pc, #292]	; (8006c1c <HAL_GPIO_Init+0x2f0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d019      	beq.n	8006b2e <HAL_GPIO_Init+0x202>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a48      	ldr	r2, [pc, #288]	; (8006c20 <HAL_GPIO_Init+0x2f4>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <HAL_GPIO_Init+0x1fe>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a47      	ldr	r2, [pc, #284]	; (8006c24 <HAL_GPIO_Init+0x2f8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00d      	beq.n	8006b26 <HAL_GPIO_Init+0x1fa>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a46      	ldr	r2, [pc, #280]	; (8006c28 <HAL_GPIO_Init+0x2fc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d007      	beq.n	8006b22 <HAL_GPIO_Init+0x1f6>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a45      	ldr	r2, [pc, #276]	; (8006c2c <HAL_GPIO_Init+0x300>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d101      	bne.n	8006b1e <HAL_GPIO_Init+0x1f2>
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	e008      	b.n	8006b30 <HAL_GPIO_Init+0x204>
 8006b1e:	2307      	movs	r3, #7
 8006b20:	e006      	b.n	8006b30 <HAL_GPIO_Init+0x204>
 8006b22:	2303      	movs	r3, #3
 8006b24:	e004      	b.n	8006b30 <HAL_GPIO_Init+0x204>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e002      	b.n	8006b30 <HAL_GPIO_Init+0x204>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <HAL_GPIO_Init+0x204>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	f002 0203 	and.w	r2, r2, #3
 8006b36:	0092      	lsls	r2, r2, #2
 8006b38:	4093      	lsls	r3, r2
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b40:	4935      	ldr	r1, [pc, #212]	; (8006c18 <HAL_GPIO_Init+0x2ec>)
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	089b      	lsrs	r3, r3, #2
 8006b46:	3302      	adds	r3, #2
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b4e:	4b38      	ldr	r3, [pc, #224]	; (8006c30 <HAL_GPIO_Init+0x304>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	43db      	mvns	r3, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b72:	4a2f      	ldr	r2, [pc, #188]	; (8006c30 <HAL_GPIO_Init+0x304>)
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006b78:	4b2d      	ldr	r3, [pc, #180]	; (8006c30 <HAL_GPIO_Init+0x304>)
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	43db      	mvns	r3, r3
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	4013      	ands	r3, r2
 8006b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b9c:	4a24      	ldr	r2, [pc, #144]	; (8006c30 <HAL_GPIO_Init+0x304>)
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ba2:	4b23      	ldr	r3, [pc, #140]	; (8006c30 <HAL_GPIO_Init+0x304>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	43db      	mvns	r3, r3
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006bc6:	4a1a      	ldr	r2, [pc, #104]	; (8006c30 <HAL_GPIO_Init+0x304>)
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006bcc:	4b18      	ldr	r3, [pc, #96]	; (8006c30 <HAL_GPIO_Init+0x304>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bf0:	4a0f      	ldr	r2, [pc, #60]	; (8006c30 <HAL_GPIO_Init+0x304>)
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	61fb      	str	r3, [r7, #28]
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2b0f      	cmp	r3, #15
 8006c00:	f67f aea2 	bls.w	8006948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	3724      	adds	r7, #36	; 0x24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40023800 	.word	0x40023800
 8006c18:	40013800 	.word	0x40013800
 8006c1c:	40020000 	.word	0x40020000
 8006c20:	40020400 	.word	0x40020400
 8006c24:	40020800 	.word	0x40020800
 8006c28:	40020c00 	.word	0x40020c00
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	40013c00 	.word	0x40013c00

08006c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	887b      	ldrh	r3, [r7, #2]
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	73fb      	strb	r3, [r7, #15]
 8006c50:	e001      	b.n	8006c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	807b      	strh	r3, [r7, #2]
 8006c70:	4613      	mov	r3, r2
 8006c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c74:	787b      	ldrb	r3, [r7, #1]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c7a:	887a      	ldrh	r2, [r7, #2]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c80:	e003      	b.n	8006c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c82:	887b      	ldrh	r3, [r7, #2]
 8006c84:	041a      	lsls	r2, r3, #16
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	619a      	str	r2, [r3, #24]
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ca8:	887a      	ldrh	r2, [r7, #2]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4013      	ands	r3, r2
 8006cae:	041a      	lsls	r2, r3, #16
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	43d9      	mvns	r1, r3
 8006cb4:	887b      	ldrh	r3, [r7, #2]
 8006cb6:	400b      	ands	r3, r1
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	619a      	str	r2, [r3, #24]
}
 8006cbe:	bf00      	nop
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
	...

08006ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006cd6:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cd8:	695a      	ldr	r2, [r3, #20]
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d006      	beq.n	8006cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ce2:	4a05      	ldr	r2, [pc, #20]	; (8006cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fd ff40 	bl	8004b70 <HAL_GPIO_EXTI_Callback>
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40013c00 	.word	0x40013c00

08006cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e12b      	b.n	8006f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fe fd46 	bl	80057b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0201 	bic.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d60:	f001 fbac 	bl	80084bc <HAL_RCC_GetPCLK1Freq>
 8006d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4a81      	ldr	r2, [pc, #516]	; (8006f70 <HAL_I2C_Init+0x274>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d807      	bhi.n	8006d80 <HAL_I2C_Init+0x84>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a80      	ldr	r2, [pc, #512]	; (8006f74 <HAL_I2C_Init+0x278>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	bf94      	ite	ls
 8006d78:	2301      	movls	r3, #1
 8006d7a:	2300      	movhi	r3, #0
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	e006      	b.n	8006d8e <HAL_I2C_Init+0x92>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4a7d      	ldr	r2, [pc, #500]	; (8006f78 <HAL_I2C_Init+0x27c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	bf94      	ite	ls
 8006d88:	2301      	movls	r3, #1
 8006d8a:	2300      	movhi	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e0e7      	b.n	8006f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a78      	ldr	r2, [pc, #480]	; (8006f7c <HAL_I2C_Init+0x280>)
 8006d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9e:	0c9b      	lsrs	r3, r3, #18
 8006da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a6a      	ldr	r2, [pc, #424]	; (8006f70 <HAL_I2C_Init+0x274>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d802      	bhi.n	8006dd0 <HAL_I2C_Init+0xd4>
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	e009      	b.n	8006de4 <HAL_I2C_Init+0xe8>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	4a69      	ldr	r2, [pc, #420]	; (8006f80 <HAL_I2C_Init+0x284>)
 8006ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8006de0:	099b      	lsrs	r3, r3, #6
 8006de2:	3301      	adds	r3, #1
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6812      	ldr	r2, [r2, #0]
 8006de8:	430b      	orrs	r3, r1
 8006dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	495c      	ldr	r1, [pc, #368]	; (8006f70 <HAL_I2C_Init+0x274>)
 8006e00:	428b      	cmp	r3, r1
 8006e02:	d819      	bhi.n	8006e38 <HAL_I2C_Init+0x13c>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	1e59      	subs	r1, r3, #1
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e12:	1c59      	adds	r1, r3, #1
 8006e14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e18:	400b      	ands	r3, r1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <HAL_I2C_Init+0x138>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1e59      	subs	r1, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e32:	e051      	b.n	8006ed8 <HAL_I2C_Init+0x1dc>
 8006e34:	2304      	movs	r3, #4
 8006e36:	e04f      	b.n	8006ed8 <HAL_I2C_Init+0x1dc>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d111      	bne.n	8006e64 <HAL_I2C_Init+0x168>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	1e58      	subs	r0, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6859      	ldr	r1, [r3, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	440b      	add	r3, r1
 8006e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e52:	3301      	adds	r3, #1
 8006e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	e012      	b.n	8006e8a <HAL_I2C_Init+0x18e>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	1e58      	subs	r0, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6859      	ldr	r1, [r3, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	0099      	lsls	r1, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bf0c      	ite	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	2300      	movne	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_I2C_Init+0x196>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e022      	b.n	8006ed8 <HAL_I2C_Init+0x1dc>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10e      	bne.n	8006eb8 <HAL_I2C_Init+0x1bc>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	1e58      	subs	r0, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6859      	ldr	r1, [r3, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	440b      	add	r3, r1
 8006ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eac:	3301      	adds	r3, #1
 8006eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb6:	e00f      	b.n	8006ed8 <HAL_I2C_Init+0x1dc>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	1e58      	subs	r0, r3, #1
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6859      	ldr	r1, [r3, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	0099      	lsls	r1, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ece:	3301      	adds	r3, #1
 8006ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	6809      	ldr	r1, [r1, #0]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69da      	ldr	r2, [r3, #28]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6911      	ldr	r1, [r2, #16]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	68d2      	ldr	r2, [r2, #12]
 8006f12:	4311      	orrs	r1, r2
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6812      	ldr	r2, [r2, #0]
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695a      	ldr	r2, [r3, #20]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	000186a0 	.word	0x000186a0
 8006f74:	001e847f 	.word	0x001e847f
 8006f78:	003d08ff 	.word	0x003d08ff
 8006f7c:	431bde83 	.word	0x431bde83
 8006f80:	10624dd3 	.word	0x10624dd3

08006f84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	460b      	mov	r3, r1
 8006f92:	817b      	strh	r3, [r7, #10]
 8006f94:	4613      	mov	r3, r2
 8006f96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f98:	f7ff fb86 	bl	80066a8 <HAL_GetTick>
 8006f9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	f040 80e0 	bne.w	800716c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	2319      	movs	r3, #25
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4970      	ldr	r1, [pc, #448]	; (8007178 <HAL_I2C_Master_Transmit+0x1f4>)
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 fc58 	bl	800786c <I2C_WaitOnFlagUntilTimeout>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e0d3      	b.n	800716e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_I2C_Master_Transmit+0x50>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e0cc      	b.n	800716e <HAL_I2C_Master_Transmit+0x1ea>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d007      	beq.n	8006ffa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007008:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2221      	movs	r2, #33	; 0x21
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2210      	movs	r2, #16
 8007016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	893a      	ldrh	r2, [r7, #8]
 800702a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a50      	ldr	r2, [pc, #320]	; (800717c <HAL_I2C_Master_Transmit+0x1f8>)
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800703c:	8979      	ldrh	r1, [r7, #10]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	6a3a      	ldr	r2, [r7, #32]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fac2 	bl	80075cc <I2C_MasterRequestWrite>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e08d      	b.n	800716e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007052:	2300      	movs	r3, #0
 8007054:	613b      	str	r3, [r7, #16]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	613b      	str	r3, [r7, #16]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	613b      	str	r3, [r7, #16]
 8007066:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007068:	e066      	b.n	8007138 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	6a39      	ldr	r1, [r7, #32]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fcd2 	bl	8007a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00d      	beq.n	8007096 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	2b04      	cmp	r3, #4
 8007080:	d107      	bne.n	8007092 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007090:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e06b      	b.n	800716e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	781a      	ldrb	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d11b      	bne.n	800710c <HAL_I2C_Master_Transmit+0x188>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d017      	beq.n	800710c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	6a39      	ldr	r1, [r7, #32]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fcc2 	bl	8007a9a <I2C_WaitOnBTFFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00d      	beq.n	8007138 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	2b04      	cmp	r3, #4
 8007122:	d107      	bne.n	8007134 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007132:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e01a      	b.n	800716e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713c:	2b00      	cmp	r3, #0
 800713e:	d194      	bne.n	800706a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800714e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2220      	movs	r2, #32
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	e000      	b.n	800716e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800716c:	2302      	movs	r3, #2
  }
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	00100002 	.word	0x00100002
 800717c:	ffff0000 	.word	0xffff0000

08007180 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08c      	sub	sp, #48	; 0x30
 8007184:	af02      	add	r7, sp, #8
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	607a      	str	r2, [r7, #4]
 800718a:	461a      	mov	r2, r3
 800718c:	460b      	mov	r3, r1
 800718e:	817b      	strh	r3, [r7, #10]
 8007190:	4613      	mov	r3, r2
 8007192:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007194:	f7ff fa88 	bl	80066a8 <HAL_GetTick>
 8007198:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	f040 820b 	bne.w	80075be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	2319      	movs	r3, #25
 80071ae:	2201      	movs	r2, #1
 80071b0:	497c      	ldr	r1, [pc, #496]	; (80073a4 <HAL_I2C_Master_Receive+0x224>)
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fb5a 	bl	800786c <I2C_WaitOnFlagUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80071be:	2302      	movs	r3, #2
 80071c0:	e1fe      	b.n	80075c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_I2C_Master_Receive+0x50>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e1f7      	b.n	80075c0 <HAL_I2C_Master_Receive+0x440>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d007      	beq.n	80071f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0201 	orr.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007204:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2222      	movs	r2, #34	; 0x22
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2210      	movs	r2, #16
 8007212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	893a      	ldrh	r2, [r7, #8]
 8007226:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4a5c      	ldr	r2, [pc, #368]	; (80073a8 <HAL_I2C_Master_Receive+0x228>)
 8007236:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007238:	8979      	ldrh	r1, [r7, #10]
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fa46 	bl	80076d0 <I2C_MasterRequestRead>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e1b8      	b.n	80075c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	d113      	bne.n	800727e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007256:	2300      	movs	r3, #0
 8007258:	623b      	str	r3, [r7, #32]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	623b      	str	r3, [r7, #32]
 800726a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e18c      	b.n	8007598 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007282:	2b01      	cmp	r3, #1
 8007284:	d11b      	bne.n	80072be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007294:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007296:	2300      	movs	r3, #0
 8007298:	61fb      	str	r3, [r7, #28]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	61fb      	str	r3, [r7, #28]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	e16c      	b.n	8007598 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d11b      	bne.n	80072fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072e6:	2300      	movs	r3, #0
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	61bb      	str	r3, [r7, #24]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	61bb      	str	r3, [r7, #24]
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	e14c      	b.n	8007598 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800730c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007324:	e138      	b.n	8007598 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732a:	2b03      	cmp	r3, #3
 800732c:	f200 80f1 	bhi.w	8007512 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007334:	2b01      	cmp	r3, #1
 8007336:	d123      	bne.n	8007380 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fbed 	bl	8007b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e139      	b.n	80075c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007368:	3b01      	subs	r3, #1
 800736a:	b29a      	uxth	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800737e:	e10b      	b.n	8007598 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007384:	2b02      	cmp	r3, #2
 8007386:	d14e      	bne.n	8007426 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	2200      	movs	r2, #0
 8007390:	4906      	ldr	r1, [pc, #24]	; (80073ac <HAL_I2C_Master_Receive+0x22c>)
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 fa6a 	bl	800786c <I2C_WaitOnFlagUntilTimeout>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d008      	beq.n	80073b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e10e      	b.n	80075c0 <HAL_I2C_Master_Receive+0x440>
 80073a2:	bf00      	nop
 80073a4:	00100002 	.word	0x00100002
 80073a8:	ffff0000 	.word	0xffff0000
 80073ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691a      	ldr	r2, [r3, #16]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073dc:	3b01      	subs	r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	691a      	ldr	r2, [r3, #16]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	b2d2      	uxtb	r2, r2
 80073fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740e:	3b01      	subs	r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007424:	e0b8      	b.n	8007598 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	2200      	movs	r2, #0
 800742e:	4966      	ldr	r1, [pc, #408]	; (80075c8 <HAL_I2C_Master_Receive+0x448>)
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 fa1b 	bl	800786c <I2C_WaitOnFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e0bf      	b.n	80075c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800744e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691a      	ldr	r2, [r3, #16]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	b2d2      	uxtb	r2, r2
 800745c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	2200      	movs	r2, #0
 800748a:	494f      	ldr	r1, [pc, #316]	; (80075c8 <HAL_I2C_Master_Receive+0x448>)
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f9ed 	bl	800786c <I2C_WaitOnFlagUntilTimeout>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e091      	b.n	80075c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691a      	ldr	r2, [r3, #16]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	b2d2      	uxtb	r2, r2
 80074ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007510:	e042      	b.n	8007598 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007514:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fb00 	bl	8007b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e04c      	b.n	80075c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b04      	cmp	r3, #4
 8007564:	d118      	bne.n	8007598 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759c:	2b00      	cmp	r3, #0
 800759e:	f47f aec2 	bne.w	8007326 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e000      	b.n	80075c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80075be:	2302      	movs	r3, #2
  }
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3728      	adds	r7, #40	; 0x28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	00010004 	.word	0x00010004

080075cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af02      	add	r7, sp, #8
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	460b      	mov	r3, r1
 80075da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d006      	beq.n	80075f6 <I2C_MasterRequestWrite+0x2a>
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d003      	beq.n	80075f6 <I2C_MasterRequestWrite+0x2a>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075f4:	d108      	bne.n	8007608 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	e00b      	b.n	8007620 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	2b12      	cmp	r3, #18
 800760e:	d107      	bne.n	8007620 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800761e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 f91d 	bl	800786c <I2C_WaitOnFlagUntilTimeout>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00d      	beq.n	8007654 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007646:	d103      	bne.n	8007650 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800764e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e035      	b.n	80076c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800765c:	d108      	bne.n	8007670 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800765e:	897b      	ldrh	r3, [r7, #10]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800766c:	611a      	str	r2, [r3, #16]
 800766e:	e01b      	b.n	80076a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007670:	897b      	ldrh	r3, [r7, #10]
 8007672:	11db      	asrs	r3, r3, #7
 8007674:	b2db      	uxtb	r3, r3
 8007676:	f003 0306 	and.w	r3, r3, #6
 800767a:	b2db      	uxtb	r3, r3
 800767c:	f063 030f 	orn	r3, r3, #15
 8007680:	b2da      	uxtb	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	490e      	ldr	r1, [pc, #56]	; (80076c8 <I2C_MasterRequestWrite+0xfc>)
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 f943 	bl	800791a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e010      	b.n	80076c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800769e:	897b      	ldrh	r3, [r7, #10]
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	4907      	ldr	r1, [pc, #28]	; (80076cc <I2C_MasterRequestWrite+0x100>)
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 f933 	bl	800791a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	00010008 	.word	0x00010008
 80076cc:	00010002 	.word	0x00010002

080076d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	607a      	str	r2, [r7, #4]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	460b      	mov	r3, r1
 80076de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d006      	beq.n	800770a <I2C_MasterRequestRead+0x3a>
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d003      	beq.n	800770a <I2C_MasterRequestRead+0x3a>
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007708:	d108      	bne.n	800771c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	e00b      	b.n	8007734 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007720:	2b11      	cmp	r3, #17
 8007722:	d107      	bne.n	8007734 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007732:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f893 	bl	800786c <I2C_WaitOnFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00d      	beq.n	8007768 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800775a:	d103      	bne.n	8007764 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007762:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e079      	b.n	800785c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007770:	d108      	bne.n	8007784 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007772:	897b      	ldrh	r3, [r7, #10]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f043 0301 	orr.w	r3, r3, #1
 800777a:	b2da      	uxtb	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	611a      	str	r2, [r3, #16]
 8007782:	e05f      	b.n	8007844 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007784:	897b      	ldrh	r3, [r7, #10]
 8007786:	11db      	asrs	r3, r3, #7
 8007788:	b2db      	uxtb	r3, r3
 800778a:	f003 0306 	and.w	r3, r3, #6
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f063 030f 	orn	r3, r3, #15
 8007794:	b2da      	uxtb	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	4930      	ldr	r1, [pc, #192]	; (8007864 <I2C_MasterRequestRead+0x194>)
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 f8b9 	bl	800791a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e054      	b.n	800785c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80077b2:	897b      	ldrh	r3, [r7, #10]
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	4929      	ldr	r1, [pc, #164]	; (8007868 <I2C_MasterRequestRead+0x198>)
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f8a9 	bl	800791a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e044      	b.n	800785c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077d2:	2300      	movs	r3, #0
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	613b      	str	r3, [r7, #16]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	613b      	str	r3, [r7, #16]
 80077e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f831 	bl	800786c <I2C_WaitOnFlagUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00d      	beq.n	800782c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800781e:	d103      	bne.n	8007828 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007826:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e017      	b.n	800785c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800782c:	897b      	ldrh	r3, [r7, #10]
 800782e:	11db      	asrs	r3, r3, #7
 8007830:	b2db      	uxtb	r3, r3
 8007832:	f003 0306 	and.w	r3, r3, #6
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f063 030e 	orn	r3, r3, #14
 800783c:	b2da      	uxtb	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4907      	ldr	r1, [pc, #28]	; (8007868 <I2C_MasterRequestRead+0x198>)
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f865 	bl	800791a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	00010008 	.word	0x00010008
 8007868:	00010002 	.word	0x00010002

0800786c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	4613      	mov	r3, r2
 800787a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800787c:	e025      	b.n	80078ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d021      	beq.n	80078ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007886:	f7fe ff0f 	bl	80066a8 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d302      	bcc.n	800789c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d116      	bne.n	80078ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	f043 0220 	orr.w	r2, r3, #32
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e023      	b.n	8007912 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	0c1b      	lsrs	r3, r3, #16
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d10d      	bne.n	80078f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	43da      	mvns	r2, r3
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4013      	ands	r3, r2
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	bf0c      	ite	eq
 80078e6:	2301      	moveq	r3, #1
 80078e8:	2300      	movne	r3, #0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	e00c      	b.n	800790a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	43da      	mvns	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	4013      	ands	r3, r2
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	bf0c      	ite	eq
 8007902:	2301      	moveq	r3, #1
 8007904:	2300      	movne	r3, #0
 8007906:	b2db      	uxtb	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	429a      	cmp	r2, r3
 800790e:	d0b6      	beq.n	800787e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
 8007926:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007928:	e051      	b.n	80079ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007938:	d123      	bne.n	8007982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007948:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007952:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	f043 0204 	orr.w	r2, r3, #4
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e046      	b.n	8007a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007988:	d021      	beq.n	80079ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800798a:	f7fe fe8d 	bl	80066a8 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	429a      	cmp	r2, r3
 8007998:	d302      	bcc.n	80079a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d116      	bne.n	80079ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f043 0220 	orr.w	r2, r3, #32
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e020      	b.n	8007a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	0c1b      	lsrs	r3, r3, #16
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d10c      	bne.n	80079f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	43da      	mvns	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4013      	ands	r3, r2
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bf14      	ite	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	2300      	moveq	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	e00b      	b.n	8007a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	43da      	mvns	r2, r3
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	4013      	ands	r3, r2
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf14      	ite	ne
 8007a04:	2301      	movne	r3, #1
 8007a06:	2300      	moveq	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d18d      	bne.n	800792a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a24:	e02d      	b.n	8007a82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f8ce 	bl	8007bc8 <I2C_IsAcknowledgeFailed>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e02d      	b.n	8007a92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3c:	d021      	beq.n	8007a82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a3e:	f7fe fe33 	bl	80066a8 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d302      	bcc.n	8007a54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d116      	bne.n	8007a82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	f043 0220 	orr.w	r2, r3, #32
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e007      	b.n	8007a92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8c:	2b80      	cmp	r3, #128	; 0x80
 8007a8e:	d1ca      	bne.n	8007a26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007aa6:	e02d      	b.n	8007b04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f88d 	bl	8007bc8 <I2C_IsAcknowledgeFailed>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e02d      	b.n	8007b14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abe:	d021      	beq.n	8007b04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac0:	f7fe fdf2 	bl	80066a8 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d302      	bcc.n	8007ad6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d116      	bne.n	8007b04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	f043 0220 	orr.w	r2, r3, #32
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e007      	b.n	8007b14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d1ca      	bne.n	8007aa8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b28:	e042      	b.n	8007bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b10      	cmp	r3, #16
 8007b36:	d119      	bne.n	8007b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0210 	mvn.w	r2, #16
 8007b40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e029      	b.n	8007bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b6c:	f7fe fd9c 	bl	80066a8 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d302      	bcc.n	8007b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d116      	bne.n	8007bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	f043 0220 	orr.w	r2, r3, #32
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e007      	b.n	8007bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d1b5      	bne.n	8007b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bde:	d11b      	bne.n	8007c18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007be8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	f043 0204 	orr.w	r2, r3, #4
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
	...

08007c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e264      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d075      	beq.n	8007d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c46:	4ba3      	ldr	r3, [pc, #652]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f003 030c 	and.w	r3, r3, #12
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d00c      	beq.n	8007c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c52:	4ba0      	ldr	r3, [pc, #640]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	d112      	bne.n	8007c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c5e:	4b9d      	ldr	r3, [pc, #628]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c6a:	d10b      	bne.n	8007c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c6c:	4b99      	ldr	r3, [pc, #612]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d05b      	beq.n	8007d30 <HAL_RCC_OscConfig+0x108>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d157      	bne.n	8007d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e23f      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8c:	d106      	bne.n	8007c9c <HAL_RCC_OscConfig+0x74>
 8007c8e:	4b91      	ldr	r3, [pc, #580]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a90      	ldr	r2, [pc, #576]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	e01d      	b.n	8007cd8 <HAL_RCC_OscConfig+0xb0>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ca4:	d10c      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x98>
 8007ca6:	4b8b      	ldr	r3, [pc, #556]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a8a      	ldr	r2, [pc, #552]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	4b88      	ldr	r3, [pc, #544]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a87      	ldr	r2, [pc, #540]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	e00b      	b.n	8007cd8 <HAL_RCC_OscConfig+0xb0>
 8007cc0:	4b84      	ldr	r3, [pc, #528]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a83      	ldr	r2, [pc, #524]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	4b81      	ldr	r3, [pc, #516]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a80      	ldr	r2, [pc, #512]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d013      	beq.n	8007d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ce0:	f7fe fce2 	bl	80066a8 <HAL_GetTick>
 8007ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ce8:	f7fe fcde 	bl	80066a8 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b64      	cmp	r3, #100	; 0x64
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e204      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cfa:	4b76      	ldr	r3, [pc, #472]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f0      	beq.n	8007ce8 <HAL_RCC_OscConfig+0xc0>
 8007d06:	e014      	b.n	8007d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d08:	f7fe fcce 	bl	80066a8 <HAL_GetTick>
 8007d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d0e:	e008      	b.n	8007d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d10:	f7fe fcca 	bl	80066a8 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	2b64      	cmp	r3, #100	; 0x64
 8007d1c:	d901      	bls.n	8007d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e1f0      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d22:	4b6c      	ldr	r3, [pc, #432]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1f0      	bne.n	8007d10 <HAL_RCC_OscConfig+0xe8>
 8007d2e:	e000      	b.n	8007d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d063      	beq.n	8007e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d3e:	4b65      	ldr	r3, [pc, #404]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f003 030c 	and.w	r3, r3, #12
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00b      	beq.n	8007d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d4a:	4b62      	ldr	r3, [pc, #392]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d52:	2b08      	cmp	r3, #8
 8007d54:	d11c      	bne.n	8007d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d56:	4b5f      	ldr	r3, [pc, #380]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d116      	bne.n	8007d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d62:	4b5c      	ldr	r3, [pc, #368]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d005      	beq.n	8007d7a <HAL_RCC_OscConfig+0x152>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d001      	beq.n	8007d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e1c4      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d7a:	4b56      	ldr	r3, [pc, #344]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	4952      	ldr	r1, [pc, #328]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d8e:	e03a      	b.n	8007e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d020      	beq.n	8007dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d98:	4b4f      	ldr	r3, [pc, #316]	; (8007ed8 <HAL_RCC_OscConfig+0x2b0>)
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d9e:	f7fe fc83 	bl	80066a8 <HAL_GetTick>
 8007da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007da4:	e008      	b.n	8007db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007da6:	f7fe fc7f 	bl	80066a8 <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d901      	bls.n	8007db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e1a5      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007db8:	4b46      	ldr	r3, [pc, #280]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0f0      	beq.n	8007da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dc4:	4b43      	ldr	r3, [pc, #268]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	4940      	ldr	r1, [pc, #256]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	600b      	str	r3, [r1, #0]
 8007dd8:	e015      	b.n	8007e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dda:	4b3f      	ldr	r3, [pc, #252]	; (8007ed8 <HAL_RCC_OscConfig+0x2b0>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de0:	f7fe fc62 	bl	80066a8 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007de8:	f7fe fc5e 	bl	80066a8 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e184      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dfa:	4b36      	ldr	r3, [pc, #216]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f0      	bne.n	8007de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0308 	and.w	r3, r3, #8
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d030      	beq.n	8007e74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d016      	beq.n	8007e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e1a:	4b30      	ldr	r3, [pc, #192]	; (8007edc <HAL_RCC_OscConfig+0x2b4>)
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e20:	f7fe fc42 	bl	80066a8 <HAL_GetTick>
 8007e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e26:	e008      	b.n	8007e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e28:	f7fe fc3e 	bl	80066a8 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e164      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e3a:	4b26      	ldr	r3, [pc, #152]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0f0      	beq.n	8007e28 <HAL_RCC_OscConfig+0x200>
 8007e46:	e015      	b.n	8007e74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e48:	4b24      	ldr	r3, [pc, #144]	; (8007edc <HAL_RCC_OscConfig+0x2b4>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e4e:	f7fe fc2b 	bl	80066a8 <HAL_GetTick>
 8007e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e54:	e008      	b.n	8007e68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e56:	f7fe fc27 	bl	80066a8 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d901      	bls.n	8007e68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e14d      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e68:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1f0      	bne.n	8007e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 80a0 	beq.w	8007fc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e86:	4b13      	ldr	r3, [pc, #76]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10f      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e92:	2300      	movs	r3, #0
 8007e94:	60bb      	str	r3, [r7, #8]
 8007e96:	4b0f      	ldr	r3, [pc, #60]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	4a0e      	ldr	r2, [pc, #56]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <HAL_RCC_OscConfig+0x2ac>)
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eaa:	60bb      	str	r3, [r7, #8]
 8007eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <HAL_RCC_OscConfig+0x2b8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d121      	bne.n	8007f02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ebe:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <HAL_RCC_OscConfig+0x2b8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a07      	ldr	r2, [pc, #28]	; (8007ee0 <HAL_RCC_OscConfig+0x2b8>)
 8007ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eca:	f7fe fbed 	bl	80066a8 <HAL_GetTick>
 8007ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ed0:	e011      	b.n	8007ef6 <HAL_RCC_OscConfig+0x2ce>
 8007ed2:	bf00      	nop
 8007ed4:	40023800 	.word	0x40023800
 8007ed8:	42470000 	.word	0x42470000
 8007edc:	42470e80 	.word	0x42470e80
 8007ee0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ee4:	f7fe fbe0 	bl	80066a8 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e106      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ef6:	4b85      	ldr	r3, [pc, #532]	; (800810c <HAL_RCC_OscConfig+0x4e4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0f0      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d106      	bne.n	8007f18 <HAL_RCC_OscConfig+0x2f0>
 8007f0a:	4b81      	ldr	r3, [pc, #516]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0e:	4a80      	ldr	r2, [pc, #512]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f10:	f043 0301 	orr.w	r3, r3, #1
 8007f14:	6713      	str	r3, [r2, #112]	; 0x70
 8007f16:	e01c      	b.n	8007f52 <HAL_RCC_OscConfig+0x32a>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b05      	cmp	r3, #5
 8007f1e:	d10c      	bne.n	8007f3a <HAL_RCC_OscConfig+0x312>
 8007f20:	4b7b      	ldr	r3, [pc, #492]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f24:	4a7a      	ldr	r2, [pc, #488]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f26:	f043 0304 	orr.w	r3, r3, #4
 8007f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f2c:	4b78      	ldr	r3, [pc, #480]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f30:	4a77      	ldr	r2, [pc, #476]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	6713      	str	r3, [r2, #112]	; 0x70
 8007f38:	e00b      	b.n	8007f52 <HAL_RCC_OscConfig+0x32a>
 8007f3a:	4b75      	ldr	r3, [pc, #468]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3e:	4a74      	ldr	r2, [pc, #464]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f40:	f023 0301 	bic.w	r3, r3, #1
 8007f44:	6713      	str	r3, [r2, #112]	; 0x70
 8007f46:	4b72      	ldr	r3, [pc, #456]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	4a71      	ldr	r2, [pc, #452]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f4c:	f023 0304 	bic.w	r3, r3, #4
 8007f50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d015      	beq.n	8007f86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f5a:	f7fe fba5 	bl	80066a8 <HAL_GetTick>
 8007f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f60:	e00a      	b.n	8007f78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f62:	f7fe fba1 	bl	80066a8 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e0c5      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f78:	4b65      	ldr	r3, [pc, #404]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0ee      	beq.n	8007f62 <HAL_RCC_OscConfig+0x33a>
 8007f84:	e014      	b.n	8007fb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f86:	f7fe fb8f 	bl	80066a8 <HAL_GetTick>
 8007f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f8c:	e00a      	b.n	8007fa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f8e:	f7fe fb8b 	bl	80066a8 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e0af      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fa4:	4b5a      	ldr	r3, [pc, #360]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1ee      	bne.n	8007f8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d105      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fb6:	4b56      	ldr	r3, [pc, #344]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	4a55      	ldr	r2, [pc, #340]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 809b 	beq.w	8008102 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fcc:	4b50      	ldr	r3, [pc, #320]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f003 030c 	and.w	r3, r3, #12
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d05c      	beq.n	8008092 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d141      	bne.n	8008064 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fe0:	4b4c      	ldr	r3, [pc, #304]	; (8008114 <HAL_RCC_OscConfig+0x4ec>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fe6:	f7fe fb5f 	bl	80066a8 <HAL_GetTick>
 8007fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fec:	e008      	b.n	8008000 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fee:	f7fe fb5b 	bl	80066a8 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e081      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008000:	4b43      	ldr	r3, [pc, #268]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1f0      	bne.n	8007fee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	69da      	ldr	r2, [r3, #28]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	431a      	orrs	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	019b      	lsls	r3, r3, #6
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	3b01      	subs	r3, #1
 8008026:	041b      	lsls	r3, r3, #16
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	061b      	lsls	r3, r3, #24
 8008030:	4937      	ldr	r1, [pc, #220]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8008032:	4313      	orrs	r3, r2
 8008034:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008036:	4b37      	ldr	r3, [pc, #220]	; (8008114 <HAL_RCC_OscConfig+0x4ec>)
 8008038:	2201      	movs	r2, #1
 800803a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800803c:	f7fe fb34 	bl	80066a8 <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008044:	f7fe fb30 	bl	80066a8 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e056      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008056:	4b2e      	ldr	r3, [pc, #184]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0f0      	beq.n	8008044 <HAL_RCC_OscConfig+0x41c>
 8008062:	e04e      	b.n	8008102 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008064:	4b2b      	ldr	r3, [pc, #172]	; (8008114 <HAL_RCC_OscConfig+0x4ec>)
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800806a:	f7fe fb1d 	bl	80066a8 <HAL_GetTick>
 800806e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008070:	e008      	b.n	8008084 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008072:	f7fe fb19 	bl	80066a8 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	d901      	bls.n	8008084 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e03f      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008084:	4b22      	ldr	r3, [pc, #136]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1f0      	bne.n	8008072 <HAL_RCC_OscConfig+0x44a>
 8008090:	e037      	b.n	8008102 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e032      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800809e:	4b1c      	ldr	r3, [pc, #112]	; (8008110 <HAL_RCC_OscConfig+0x4e8>)
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d028      	beq.n	80080fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d121      	bne.n	80080fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d11a      	bne.n	80080fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80080ce:	4013      	ands	r3, r2
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d111      	bne.n	80080fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e4:	085b      	lsrs	r3, r3, #1
 80080e6:	3b01      	subs	r3, #1
 80080e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d107      	bne.n	80080fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d001      	beq.n	8008102 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e000      	b.n	8008104 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	40007000 	.word	0x40007000
 8008110:	40023800 	.word	0x40023800
 8008114:	42470060 	.word	0x42470060

08008118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e0cc      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800812c:	4b68      	ldr	r3, [pc, #416]	; (80082d0 <HAL_RCC_ClockConfig+0x1b8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d90c      	bls.n	8008154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800813a:	4b65      	ldr	r3, [pc, #404]	; (80082d0 <HAL_RCC_ClockConfig+0x1b8>)
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	b2d2      	uxtb	r2, r2
 8008140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008142:	4b63      	ldr	r3, [pc, #396]	; (80082d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	429a      	cmp	r2, r3
 800814e:	d001      	beq.n	8008154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e0b8      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d020      	beq.n	80081a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800816c:	4b59      	ldr	r3, [pc, #356]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	4a58      	ldr	r2, [pc, #352]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	2b00      	cmp	r3, #0
 8008182:	d005      	beq.n	8008190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008184:	4b53      	ldr	r3, [pc, #332]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	4a52      	ldr	r2, [pc, #328]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 800818a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800818e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008190:	4b50      	ldr	r3, [pc, #320]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	494d      	ldr	r1, [pc, #308]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d044      	beq.n	8008238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d107      	bne.n	80081c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081b6:	4b47      	ldr	r3, [pc, #284]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d119      	bne.n	80081f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e07f      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d003      	beq.n	80081d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d107      	bne.n	80081e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081d6:	4b3f      	ldr	r3, [pc, #252]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d109      	bne.n	80081f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e06f      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081e6:	4b3b      	ldr	r3, [pc, #236]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e067      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081f6:	4b37      	ldr	r3, [pc, #220]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f023 0203 	bic.w	r2, r3, #3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	4934      	ldr	r1, [pc, #208]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008204:	4313      	orrs	r3, r2
 8008206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008208:	f7fe fa4e 	bl	80066a8 <HAL_GetTick>
 800820c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800820e:	e00a      	b.n	8008226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008210:	f7fe fa4a 	bl	80066a8 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	f241 3288 	movw	r2, #5000	; 0x1388
 800821e:	4293      	cmp	r3, r2
 8008220:	d901      	bls.n	8008226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e04f      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008226:	4b2b      	ldr	r3, [pc, #172]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 020c 	and.w	r2, r3, #12
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	429a      	cmp	r2, r3
 8008236:	d1eb      	bne.n	8008210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008238:	4b25      	ldr	r3, [pc, #148]	; (80082d0 <HAL_RCC_ClockConfig+0x1b8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0307 	and.w	r3, r3, #7
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d20c      	bcs.n	8008260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008246:	4b22      	ldr	r3, [pc, #136]	; (80082d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800824e:	4b20      	ldr	r3, [pc, #128]	; (80082d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	429a      	cmp	r2, r3
 800825a:	d001      	beq.n	8008260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e032      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d008      	beq.n	800827e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800826c:	4b19      	ldr	r3, [pc, #100]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	4916      	ldr	r1, [pc, #88]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 800827a:	4313      	orrs	r3, r2
 800827c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d009      	beq.n	800829e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	490e      	ldr	r1, [pc, #56]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 800829a:	4313      	orrs	r3, r2
 800829c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800829e:	f000 f821 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 80082a2:	4602      	mov	r2, r0
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	091b      	lsrs	r3, r3, #4
 80082aa:	f003 030f 	and.w	r3, r3, #15
 80082ae:	490a      	ldr	r1, [pc, #40]	; (80082d8 <HAL_RCC_ClockConfig+0x1c0>)
 80082b0:	5ccb      	ldrb	r3, [r1, r3]
 80082b2:	fa22 f303 	lsr.w	r3, r2, r3
 80082b6:	4a09      	ldr	r2, [pc, #36]	; (80082dc <HAL_RCC_ClockConfig+0x1c4>)
 80082b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80082ba:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <HAL_RCC_ClockConfig+0x1c8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe f9ae 	bl	8006620 <HAL_InitTick>

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	40023c00 	.word	0x40023c00
 80082d4:	40023800 	.word	0x40023800
 80082d8:	0800e850 	.word	0x0800e850
 80082dc:	2000072c 	.word	0x2000072c
 80082e0:	20000824 	.word	0x20000824

080082e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	607b      	str	r3, [r7, #4]
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	2300      	movs	r3, #0
 80082f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082fc:	4b67      	ldr	r3, [pc, #412]	; (800849c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f003 030c 	and.w	r3, r3, #12
 8008304:	2b08      	cmp	r3, #8
 8008306:	d00d      	beq.n	8008324 <HAL_RCC_GetSysClockFreq+0x40>
 8008308:	2b08      	cmp	r3, #8
 800830a:	f200 80bd 	bhi.w	8008488 <HAL_RCC_GetSysClockFreq+0x1a4>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <HAL_RCC_GetSysClockFreq+0x34>
 8008312:	2b04      	cmp	r3, #4
 8008314:	d003      	beq.n	800831e <HAL_RCC_GetSysClockFreq+0x3a>
 8008316:	e0b7      	b.n	8008488 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008318:	4b61      	ldr	r3, [pc, #388]	; (80084a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800831a:	60bb      	str	r3, [r7, #8]
       break;
 800831c:	e0b7      	b.n	800848e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800831e:	4b60      	ldr	r3, [pc, #384]	; (80084a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008320:	60bb      	str	r3, [r7, #8]
      break;
 8008322:	e0b4      	b.n	800848e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008324:	4b5d      	ldr	r3, [pc, #372]	; (800849c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800832c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800832e:	4b5b      	ldr	r3, [pc, #364]	; (800849c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d04d      	beq.n	80083d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800833a:	4b58      	ldr	r3, [pc, #352]	; (800849c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	099b      	lsrs	r3, r3, #6
 8008340:	461a      	mov	r2, r3
 8008342:	f04f 0300 	mov.w	r3, #0
 8008346:	f240 10ff 	movw	r0, #511	; 0x1ff
 800834a:	f04f 0100 	mov.w	r1, #0
 800834e:	ea02 0800 	and.w	r8, r2, r0
 8008352:	ea03 0901 	and.w	r9, r3, r1
 8008356:	4640      	mov	r0, r8
 8008358:	4649      	mov	r1, r9
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	f04f 0300 	mov.w	r3, #0
 8008362:	014b      	lsls	r3, r1, #5
 8008364:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008368:	0142      	lsls	r2, r0, #5
 800836a:	4610      	mov	r0, r2
 800836c:	4619      	mov	r1, r3
 800836e:	ebb0 0008 	subs.w	r0, r0, r8
 8008372:	eb61 0109 	sbc.w	r1, r1, r9
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	f04f 0300 	mov.w	r3, #0
 800837e:	018b      	lsls	r3, r1, #6
 8008380:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008384:	0182      	lsls	r2, r0, #6
 8008386:	1a12      	subs	r2, r2, r0
 8008388:	eb63 0301 	sbc.w	r3, r3, r1
 800838c:	f04f 0000 	mov.w	r0, #0
 8008390:	f04f 0100 	mov.w	r1, #0
 8008394:	00d9      	lsls	r1, r3, #3
 8008396:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800839a:	00d0      	lsls	r0, r2, #3
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	eb12 0208 	adds.w	r2, r2, r8
 80083a4:	eb43 0309 	adc.w	r3, r3, r9
 80083a8:	f04f 0000 	mov.w	r0, #0
 80083ac:	f04f 0100 	mov.w	r1, #0
 80083b0:	0299      	lsls	r1, r3, #10
 80083b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80083b6:	0290      	lsls	r0, r2, #10
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4610      	mov	r0, r2
 80083be:	4619      	mov	r1, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	461a      	mov	r2, r3
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	f7f7 ff72 	bl	80002b0 <__aeabi_uldivmod>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	4613      	mov	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e04a      	b.n	800846c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083d6:	4b31      	ldr	r3, [pc, #196]	; (800849c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	099b      	lsrs	r3, r3, #6
 80083dc:	461a      	mov	r2, r3
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80083e6:	f04f 0100 	mov.w	r1, #0
 80083ea:	ea02 0400 	and.w	r4, r2, r0
 80083ee:	ea03 0501 	and.w	r5, r3, r1
 80083f2:	4620      	mov	r0, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	f04f 0300 	mov.w	r3, #0
 80083fe:	014b      	lsls	r3, r1, #5
 8008400:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008404:	0142      	lsls	r2, r0, #5
 8008406:	4610      	mov	r0, r2
 8008408:	4619      	mov	r1, r3
 800840a:	1b00      	subs	r0, r0, r4
 800840c:	eb61 0105 	sbc.w	r1, r1, r5
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	f04f 0300 	mov.w	r3, #0
 8008418:	018b      	lsls	r3, r1, #6
 800841a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800841e:	0182      	lsls	r2, r0, #6
 8008420:	1a12      	subs	r2, r2, r0
 8008422:	eb63 0301 	sbc.w	r3, r3, r1
 8008426:	f04f 0000 	mov.w	r0, #0
 800842a:	f04f 0100 	mov.w	r1, #0
 800842e:	00d9      	lsls	r1, r3, #3
 8008430:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008434:	00d0      	lsls	r0, r2, #3
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	1912      	adds	r2, r2, r4
 800843c:	eb45 0303 	adc.w	r3, r5, r3
 8008440:	f04f 0000 	mov.w	r0, #0
 8008444:	f04f 0100 	mov.w	r1, #0
 8008448:	0299      	lsls	r1, r3, #10
 800844a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800844e:	0290      	lsls	r0, r2, #10
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4610      	mov	r0, r2
 8008456:	4619      	mov	r1, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	461a      	mov	r2, r3
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	f7f7 ff26 	bl	80002b0 <__aeabi_uldivmod>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4613      	mov	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800846c:	4b0b      	ldr	r3, [pc, #44]	; (800849c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	0c1b      	lsrs	r3, r3, #16
 8008472:	f003 0303 	and.w	r3, r3, #3
 8008476:	3301      	adds	r3, #1
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	fbb2 f3f3 	udiv	r3, r2, r3
 8008484:	60bb      	str	r3, [r7, #8]
      break;
 8008486:	e002      	b.n	800848e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008488:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800848a:	60bb      	str	r3, [r7, #8]
      break;
 800848c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800848e:	68bb      	ldr	r3, [r7, #8]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800849a:	bf00      	nop
 800849c:	40023800 	.word	0x40023800
 80084a0:	00f42400 	.word	0x00f42400

080084a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084a8:	4b03      	ldr	r3, [pc, #12]	; (80084b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80084aa:	681b      	ldr	r3, [r3, #0]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	2000072c 	.word	0x2000072c

080084bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80084c0:	f7ff fff0 	bl	80084a4 <HAL_RCC_GetHCLKFreq>
 80084c4:	4602      	mov	r2, r0
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	0a9b      	lsrs	r3, r3, #10
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	4903      	ldr	r1, [pc, #12]	; (80084e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084d2:	5ccb      	ldrb	r3, [r1, r3]
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084d8:	4618      	mov	r0, r3
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	40023800 	.word	0x40023800
 80084e0:	0800e860 	.word	0x0800e860

080084e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e07b      	b.n	80085ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d108      	bne.n	8008510 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008506:	d009      	beq.n	800851c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	61da      	str	r2, [r3, #28]
 800850e:	e005      	b.n	800851c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d106      	bne.n	800853c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7fd f984 	bl	8005844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008552:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008564:	431a      	orrs	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	431a      	orrs	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	431a      	orrs	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008596:	431a      	orrs	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a0:	ea42 0103 	orr.w	r1, r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	0c1b      	lsrs	r3, r3, #16
 80085ba:	f003 0104 	and.w	r1, r3, #4
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	f003 0210 	and.w	r2, r3, #16
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	69da      	ldr	r2, [r3, #28]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b088      	sub	sp, #32
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	603b      	str	r3, [r7, #0]
 8008602:	4613      	mov	r3, r2
 8008604:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <HAL_SPI_Transmit+0x22>
 8008614:	2302      	movs	r3, #2
 8008616:	e126      	b.n	8008866 <HAL_SPI_Transmit+0x270>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008620:	f7fe f842 	bl	80066a8 <HAL_GetTick>
 8008624:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008626:	88fb      	ldrh	r3, [r7, #6]
 8008628:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b01      	cmp	r3, #1
 8008634:	d002      	beq.n	800863c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008636:	2302      	movs	r3, #2
 8008638:	77fb      	strb	r3, [r7, #31]
    goto error;
 800863a:	e10b      	b.n	8008854 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <HAL_SPI_Transmit+0x52>
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800864c:	e102      	b.n	8008854 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2203      	movs	r2, #3
 8008652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	88fa      	ldrh	r2, [r7, #6]
 8008666:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	88fa      	ldrh	r2, [r7, #6]
 800866c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008694:	d10f      	bne.n	80086b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c0:	2b40      	cmp	r3, #64	; 0x40
 80086c2:	d007      	beq.n	80086d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086dc:	d14b      	bne.n	8008776 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <HAL_SPI_Transmit+0xf6>
 80086e6:	8afb      	ldrh	r3, [r7, #22]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d13e      	bne.n	800876a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f0:	881a      	ldrh	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fc:	1c9a      	adds	r2, r3, #2
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008706:	b29b      	uxth	r3, r3
 8008708:	3b01      	subs	r3, #1
 800870a:	b29a      	uxth	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008710:	e02b      	b.n	800876a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b02      	cmp	r3, #2
 800871e:	d112      	bne.n	8008746 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008724:	881a      	ldrh	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008730:	1c9a      	adds	r2, r3, #2
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800873a:	b29b      	uxth	r3, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	86da      	strh	r2, [r3, #54]	; 0x36
 8008744:	e011      	b.n	800876a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008746:	f7fd ffaf 	bl	80066a8 <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	429a      	cmp	r2, r3
 8008754:	d803      	bhi.n	800875e <HAL_SPI_Transmit+0x168>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875c:	d102      	bne.n	8008764 <HAL_SPI_Transmit+0x16e>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d102      	bne.n	800876a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008768:	e074      	b.n	8008854 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1ce      	bne.n	8008712 <HAL_SPI_Transmit+0x11c>
 8008774:	e04c      	b.n	8008810 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <HAL_SPI_Transmit+0x18e>
 800877e:	8afb      	ldrh	r3, [r7, #22]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d140      	bne.n	8008806 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	330c      	adds	r3, #12
 800878e:	7812      	ldrb	r2, [r2, #0]
 8008790:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80087aa:	e02c      	b.n	8008806 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d113      	bne.n	80087e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	330c      	adds	r3, #12
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	3b01      	subs	r3, #1
 80087da:	b29a      	uxth	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	86da      	strh	r2, [r3, #54]	; 0x36
 80087e0:	e011      	b.n	8008806 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087e2:	f7fd ff61 	bl	80066a8 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d803      	bhi.n	80087fa <HAL_SPI_Transmit+0x204>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d102      	bne.n	8008800 <HAL_SPI_Transmit+0x20a>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008804:	e026      	b.n	8008854 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800880a:	b29b      	uxth	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1cd      	bne.n	80087ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 fbcb 	bl	8008fb0 <SPI_EndRxTxTransaction>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2220      	movs	r2, #32
 8008824:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800882e:	2300      	movs	r3, #0
 8008830:	613b      	str	r3, [r7, #16]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	613b      	str	r3, [r7, #16]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	613b      	str	r3, [r7, #16]
 8008842:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	77fb      	strb	r3, [r7, #31]
 8008850:	e000      	b.n	8008854 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008852:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008864:	7ffb      	ldrb	r3, [r7, #31]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3720      	adds	r7, #32
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b088      	sub	sp, #32
 8008872:	af02      	add	r7, sp, #8
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	603b      	str	r3, [r7, #0]
 800887a:	4613      	mov	r3, r2
 800887c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800888a:	d112      	bne.n	80088b2 <HAL_SPI_Receive+0x44>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10e      	bne.n	80088b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2204      	movs	r2, #4
 8008898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800889c:	88fa      	ldrh	r2, [r7, #6]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	4613      	mov	r3, r2
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f8f1 	bl	8008a90 <HAL_SPI_TransmitReceive>
 80088ae:	4603      	mov	r3, r0
 80088b0:	e0ea      	b.n	8008a88 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d101      	bne.n	80088c0 <HAL_SPI_Receive+0x52>
 80088bc:	2302      	movs	r3, #2
 80088be:	e0e3      	b.n	8008a88 <HAL_SPI_Receive+0x21a>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088c8:	f7fd feee 	bl	80066a8 <HAL_GetTick>
 80088cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d002      	beq.n	80088e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80088da:	2302      	movs	r3, #2
 80088dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80088de:	e0ca      	b.n	8008a76 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <HAL_SPI_Receive+0x7e>
 80088e6:	88fb      	ldrh	r3, [r7, #6]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80088f0:	e0c1      	b.n	8008a76 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2204      	movs	r2, #4
 80088f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	88fa      	ldrh	r2, [r7, #6]
 800890a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	88fa      	ldrh	r2, [r7, #6]
 8008910:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008938:	d10f      	bne.n	800895a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008948:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008958:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008964:	2b40      	cmp	r3, #64	; 0x40
 8008966:	d007      	beq.n	8008978 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008976:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d162      	bne.n	8008a46 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008980:	e02e      	b.n	80089e0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b01      	cmp	r3, #1
 800898e:	d115      	bne.n	80089bc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f103 020c 	add.w	r2, r3, #12
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	7812      	ldrb	r2, [r2, #0]
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	1c5a      	adds	r2, r3, #1
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3b01      	subs	r3, #1
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089ba:	e011      	b.n	80089e0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089bc:	f7fd fe74 	bl	80066a8 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d803      	bhi.n	80089d4 <HAL_SPI_Receive+0x166>
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d2:	d102      	bne.n	80089da <HAL_SPI_Receive+0x16c>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d102      	bne.n	80089e0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089de:	e04a      	b.n	8008a76 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1cb      	bne.n	8008982 <HAL_SPI_Receive+0x114>
 80089ea:	e031      	b.n	8008a50 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d113      	bne.n	8008a22 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a04:	b292      	uxth	r2, r2
 8008a06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0c:	1c9a      	adds	r2, r3, #2
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a20:	e011      	b.n	8008a46 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a22:	f7fd fe41 	bl	80066a8 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d803      	bhi.n	8008a3a <HAL_SPI_Receive+0x1cc>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d102      	bne.n	8008a40 <HAL_SPI_Receive+0x1d2>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d102      	bne.n	8008a46 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a44:	e017      	b.n	8008a76 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1cd      	bne.n	80089ec <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fa45 	bl	8008ee4 <SPI_EndRxTransaction>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2220      	movs	r2, #32
 8008a64:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	75fb      	strb	r3, [r7, #23]
 8008a72:	e000      	b.n	8008a76 <HAL_SPI_Receive+0x208>
  }

error :
 8008a74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08c      	sub	sp, #48	; 0x30
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d101      	bne.n	8008ab6 <HAL_SPI_TransmitReceive+0x26>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	e18a      	b.n	8008dcc <HAL_SPI_TransmitReceive+0x33c>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008abe:	f7fd fdf3 	bl	80066a8 <HAL_GetTick>
 8008ac2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008ad4:	887b      	ldrh	r3, [r7, #2]
 8008ad6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d00f      	beq.n	8008b00 <HAL_SPI_TransmitReceive+0x70>
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ae6:	d107      	bne.n	8008af8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d103      	bne.n	8008af8 <HAL_SPI_TransmitReceive+0x68>
 8008af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008af4:	2b04      	cmp	r3, #4
 8008af6:	d003      	beq.n	8008b00 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008af8:	2302      	movs	r3, #2
 8008afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008afe:	e15b      	b.n	8008db8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d005      	beq.n	8008b12 <HAL_SPI_TransmitReceive+0x82>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <HAL_SPI_TransmitReceive+0x82>
 8008b0c:	887b      	ldrh	r3, [r7, #2]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d103      	bne.n	8008b1a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b18:	e14e      	b.n	8008db8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d003      	beq.n	8008b2e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2205      	movs	r2, #5
 8008b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	887a      	ldrh	r2, [r7, #2]
 8008b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	887a      	ldrh	r2, [r7, #2]
 8008b44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	887a      	ldrh	r2, [r7, #2]
 8008b50:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	887a      	ldrh	r2, [r7, #2]
 8008b56:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6e:	2b40      	cmp	r3, #64	; 0x40
 8008b70:	d007      	beq.n	8008b82 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b8a:	d178      	bne.n	8008c7e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <HAL_SPI_TransmitReceive+0x10a>
 8008b94:	8b7b      	ldrh	r3, [r7, #26]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d166      	bne.n	8008c68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9e:	881a      	ldrh	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	1c9a      	adds	r2, r3, #2
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bbe:	e053      	b.n	8008c68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d11b      	bne.n	8008c06 <HAL_SPI_TransmitReceive+0x176>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d016      	beq.n	8008c06 <HAL_SPI_TransmitReceive+0x176>
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d113      	bne.n	8008c06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	881a      	ldrh	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bee:	1c9a      	adds	r2, r3, #2
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d119      	bne.n	8008c48 <HAL_SPI_TransmitReceive+0x1b8>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d014      	beq.n	8008c48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	b292      	uxth	r2, r2
 8008c2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	1c9a      	adds	r2, r3, #2
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c44:	2301      	movs	r3, #1
 8008c46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c48:	f7fd fd2e 	bl	80066a8 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d807      	bhi.n	8008c68 <HAL_SPI_TransmitReceive+0x1d8>
 8008c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5e:	d003      	beq.n	8008c68 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c66:	e0a7      	b.n	8008db8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1a6      	bne.n	8008bc0 <HAL_SPI_TransmitReceive+0x130>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1a1      	bne.n	8008bc0 <HAL_SPI_TransmitReceive+0x130>
 8008c7c:	e07c      	b.n	8008d78 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <HAL_SPI_TransmitReceive+0x1fc>
 8008c86:	8b7b      	ldrh	r3, [r7, #26]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d16b      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	330c      	adds	r3, #12
 8008c96:	7812      	ldrb	r2, [r2, #0]
 8008c98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	3b01      	subs	r3, #1
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cb2:	e057      	b.n	8008d64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f003 0302 	and.w	r3, r3, #2
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d11c      	bne.n	8008cfc <HAL_SPI_TransmitReceive+0x26c>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d017      	beq.n	8008cfc <HAL_SPI_TransmitReceive+0x26c>
 8008ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d114      	bne.n	8008cfc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	330c      	adds	r3, #12
 8008cdc:	7812      	ldrb	r2, [r2, #0]
 8008cde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d119      	bne.n	8008d3e <HAL_SPI_TransmitReceive+0x2ae>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d014      	beq.n	8008d3e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68da      	ldr	r2, [r3, #12]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1e:	b2d2      	uxtb	r2, r2
 8008d20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	3b01      	subs	r3, #1
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d3e:	f7fd fcb3 	bl	80066a8 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d803      	bhi.n	8008d56 <HAL_SPI_TransmitReceive+0x2c6>
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d54:	d102      	bne.n	8008d5c <HAL_SPI_TransmitReceive+0x2cc>
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d103      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d62:	e029      	b.n	8008db8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1a2      	bne.n	8008cb4 <HAL_SPI_TransmitReceive+0x224>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d19d      	bne.n	8008cb4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f917 	bl	8008fb0 <SPI_EndRxTxTransaction>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d006      	beq.n	8008d96 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2220      	movs	r2, #32
 8008d92:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008d94:	e010      	b.n	8008db8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10b      	bne.n	8008db6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d9e:	2300      	movs	r3, #0
 8008da0:	617b      	str	r3, [r7, #20]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	617b      	str	r3, [r7, #20]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	617b      	str	r3, [r7, #20]
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	e000      	b.n	8008db8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008db6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3730      	adds	r7, #48	; 0x30
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	603b      	str	r3, [r7, #0]
 8008de0:	4613      	mov	r3, r2
 8008de2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008de4:	f7fd fc60 	bl	80066a8 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4413      	add	r3, r2
 8008df2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008df4:	f7fd fc58 	bl	80066a8 <HAL_GetTick>
 8008df8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008dfa:	4b39      	ldr	r3, [pc, #228]	; (8008ee0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	015b      	lsls	r3, r3, #5
 8008e00:	0d1b      	lsrs	r3, r3, #20
 8008e02:	69fa      	ldr	r2, [r7, #28]
 8008e04:	fb02 f303 	mul.w	r3, r2, r3
 8008e08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e0a:	e054      	b.n	8008eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e12:	d050      	beq.n	8008eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e14:	f7fd fc48 	bl	80066a8 <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	69fa      	ldr	r2, [r7, #28]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d902      	bls.n	8008e2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d13d      	bne.n	8008ea6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e42:	d111      	bne.n	8008e68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e4c:	d004      	beq.n	8008e58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e56:	d107      	bne.n	8008e68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e70:	d10f      	bne.n	8008e92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e017      	b.n	8008ed6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	bf0c      	ite	eq
 8008ec6:	2301      	moveq	r3, #1
 8008ec8:	2300      	movne	r3, #0
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	461a      	mov	r2, r3
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d19b      	bne.n	8008e0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3720      	adds	r7, #32
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	2000072c 	.word	0x2000072c

08008ee4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af02      	add	r7, sp, #8
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ef8:	d111      	bne.n	8008f1e <SPI_EndRxTransaction+0x3a>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f02:	d004      	beq.n	8008f0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f0c:	d107      	bne.n	8008f1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f26:	d12a      	bne.n	8008f7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f30:	d012      	beq.n	8008f58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2180      	movs	r1, #128	; 0x80
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff ff49 	bl	8008dd4 <SPI_WaitFlagStateUntilTimeout>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d02d      	beq.n	8008fa4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f4c:	f043 0220 	orr.w	r2, r3, #32
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e026      	b.n	8008fa6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2101      	movs	r1, #1
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff ff36 	bl	8008dd4 <SPI_WaitFlagStateUntilTimeout>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01a      	beq.n	8008fa4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f72:	f043 0220 	orr.w	r2, r3, #32
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e013      	b.n	8008fa6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2200      	movs	r2, #0
 8008f86:	2101      	movs	r1, #1
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f7ff ff23 	bl	8008dd4 <SPI_WaitFlagStateUntilTimeout>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d007      	beq.n	8008fa4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f98:	f043 0220 	orr.w	r2, r3, #32
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e000      	b.n	8008fa6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008fbc:	4b1b      	ldr	r3, [pc, #108]	; (800902c <SPI_EndRxTxTransaction+0x7c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1b      	ldr	r2, [pc, #108]	; (8009030 <SPI_EndRxTxTransaction+0x80>)
 8008fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc6:	0d5b      	lsrs	r3, r3, #21
 8008fc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fcc:	fb02 f303 	mul.w	r3, r2, r3
 8008fd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fda:	d112      	bne.n	8009002 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2180      	movs	r1, #128	; 0x80
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff fef4 	bl	8008dd4 <SPI_WaitFlagStateUntilTimeout>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d016      	beq.n	8009020 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff6:	f043 0220 	orr.w	r2, r3, #32
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e00f      	b.n	8009022 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	3b01      	subs	r3, #1
 800900c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009018:	2b80      	cmp	r3, #128	; 0x80
 800901a:	d0f2      	beq.n	8009002 <SPI_EndRxTxTransaction+0x52>
 800901c:	e000      	b.n	8009020 <SPI_EndRxTxTransaction+0x70>
        break;
 800901e:	bf00      	nop
  }

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	2000072c 	.word	0x2000072c
 8009030:	165e9f81 	.word	0x165e9f81

08009034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e041      	b.n	80090ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7fc fc70 	bl	8005940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3304      	adds	r3, #4
 8009070:	4619      	mov	r1, r3
 8009072:	4610      	mov	r0, r2
 8009074:	f000 fb14 	bl	80096a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
	...

080090d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d001      	beq.n	80090ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e03c      	b.n	8009166 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1e      	ldr	r2, [pc, #120]	; (8009174 <HAL_TIM_Base_Start+0xa0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d018      	beq.n	8009130 <HAL_TIM_Base_Start+0x5c>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009106:	d013      	beq.n	8009130 <HAL_TIM_Base_Start+0x5c>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a1a      	ldr	r2, [pc, #104]	; (8009178 <HAL_TIM_Base_Start+0xa4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d00e      	beq.n	8009130 <HAL_TIM_Base_Start+0x5c>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a19      	ldr	r2, [pc, #100]	; (800917c <HAL_TIM_Base_Start+0xa8>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d009      	beq.n	8009130 <HAL_TIM_Base_Start+0x5c>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a17      	ldr	r2, [pc, #92]	; (8009180 <HAL_TIM_Base_Start+0xac>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d004      	beq.n	8009130 <HAL_TIM_Base_Start+0x5c>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a16      	ldr	r2, [pc, #88]	; (8009184 <HAL_TIM_Base_Start+0xb0>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d111      	bne.n	8009154 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b06      	cmp	r3, #6
 8009140:	d010      	beq.n	8009164 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f042 0201 	orr.w	r2, r2, #1
 8009150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009152:	e007      	b.n	8009164 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0201 	orr.w	r2, r2, #1
 8009162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	40010000 	.word	0x40010000
 8009178:	40000400 	.word	0x40000400
 800917c:	40000800 	.word	0x40000800
 8009180:	40000c00 	.word	0x40000c00
 8009184:	40014000 	.word	0x40014000

08009188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e041      	b.n	800921e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f839 	bl	8009226 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f000 fa6a 	bl	80096a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
	...

0800923c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d109      	bne.n	8009260 <HAL_TIM_PWM_Start+0x24>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b01      	cmp	r3, #1
 8009256:	bf14      	ite	ne
 8009258:	2301      	movne	r3, #1
 800925a:	2300      	moveq	r3, #0
 800925c:	b2db      	uxtb	r3, r3
 800925e:	e022      	b.n	80092a6 <HAL_TIM_PWM_Start+0x6a>
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b04      	cmp	r3, #4
 8009264:	d109      	bne.n	800927a <HAL_TIM_PWM_Start+0x3e>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b01      	cmp	r3, #1
 8009270:	bf14      	ite	ne
 8009272:	2301      	movne	r3, #1
 8009274:	2300      	moveq	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	e015      	b.n	80092a6 <HAL_TIM_PWM_Start+0x6a>
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b08      	cmp	r3, #8
 800927e:	d109      	bne.n	8009294 <HAL_TIM_PWM_Start+0x58>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b01      	cmp	r3, #1
 800928a:	bf14      	ite	ne
 800928c:	2301      	movne	r3, #1
 800928e:	2300      	moveq	r3, #0
 8009290:	b2db      	uxtb	r3, r3
 8009292:	e008      	b.n	80092a6 <HAL_TIM_PWM_Start+0x6a>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e068      	b.n	8009380 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d104      	bne.n	80092be <HAL_TIM_PWM_Start+0x82>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092bc:	e013      	b.n	80092e6 <HAL_TIM_PWM_Start+0xaa>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	d104      	bne.n	80092ce <HAL_TIM_PWM_Start+0x92>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092cc:	e00b      	b.n	80092e6 <HAL_TIM_PWM_Start+0xaa>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b08      	cmp	r3, #8
 80092d2:	d104      	bne.n	80092de <HAL_TIM_PWM_Start+0xa2>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2202      	movs	r2, #2
 80092d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092dc:	e003      	b.n	80092e6 <HAL_TIM_PWM_Start+0xaa>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2202      	movs	r2, #2
 80092e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2201      	movs	r2, #1
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 fc7c 	bl	8009bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a23      	ldr	r2, [pc, #140]	; (8009388 <HAL_TIM_PWM_Start+0x14c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d107      	bne.n	800930e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800930c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a1d      	ldr	r2, [pc, #116]	; (8009388 <HAL_TIM_PWM_Start+0x14c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d018      	beq.n	800934a <HAL_TIM_PWM_Start+0x10e>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009320:	d013      	beq.n	800934a <HAL_TIM_PWM_Start+0x10e>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a19      	ldr	r2, [pc, #100]	; (800938c <HAL_TIM_PWM_Start+0x150>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00e      	beq.n	800934a <HAL_TIM_PWM_Start+0x10e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a17      	ldr	r2, [pc, #92]	; (8009390 <HAL_TIM_PWM_Start+0x154>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d009      	beq.n	800934a <HAL_TIM_PWM_Start+0x10e>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a16      	ldr	r2, [pc, #88]	; (8009394 <HAL_TIM_PWM_Start+0x158>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d004      	beq.n	800934a <HAL_TIM_PWM_Start+0x10e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a14      	ldr	r2, [pc, #80]	; (8009398 <HAL_TIM_PWM_Start+0x15c>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d111      	bne.n	800936e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f003 0307 	and.w	r3, r3, #7
 8009354:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b06      	cmp	r3, #6
 800935a:	d010      	beq.n	800937e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f042 0201 	orr.w	r2, r2, #1
 800936a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800936c:	e007      	b.n	800937e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f042 0201 	orr.w	r2, r2, #1
 800937c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	40010000 	.word	0x40010000
 800938c:	40000400 	.word	0x40000400
 8009390:	40000800 	.word	0x40000800
 8009394:	40000c00 	.word	0x40000c00
 8009398:	40014000 	.word	0x40014000

0800939c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d101      	bne.n	80093b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e0ac      	b.n	8009510 <HAL_TIM_PWM_ConfigChannel+0x174>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b0c      	cmp	r3, #12
 80093c2:	f200 809f 	bhi.w	8009504 <HAL_TIM_PWM_ConfigChannel+0x168>
 80093c6:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80093c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093cc:	08009401 	.word	0x08009401
 80093d0:	08009505 	.word	0x08009505
 80093d4:	08009505 	.word	0x08009505
 80093d8:	08009505 	.word	0x08009505
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009505 	.word	0x08009505
 80093e4:	08009505 	.word	0x08009505
 80093e8:	08009505 	.word	0x08009505
 80093ec:	08009483 	.word	0x08009483
 80093f0:	08009505 	.word	0x08009505
 80093f4:	08009505 	.word	0x08009505
 80093f8:	08009505 	.word	0x08009505
 80093fc:	080094c3 	.word	0x080094c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	4618      	mov	r0, r3
 8009408:	f000 f9ca 	bl	80097a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	699a      	ldr	r2, [r3, #24]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0208 	orr.w	r2, r2, #8
 800941a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0204 	bic.w	r2, r2, #4
 800942a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6999      	ldr	r1, [r3, #24]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	691a      	ldr	r2, [r3, #16]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	619a      	str	r2, [r3, #24]
      break;
 800943e:	e062      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fa10 	bl	800986c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800945a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	699a      	ldr	r2, [r3, #24]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800946a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6999      	ldr	r1, [r3, #24]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	021a      	lsls	r2, r3, #8
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	619a      	str	r2, [r3, #24]
      break;
 8009480:	e041      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68b9      	ldr	r1, [r7, #8]
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fa5b 	bl	8009944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69da      	ldr	r2, [r3, #28]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f042 0208 	orr.w	r2, r2, #8
 800949c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69da      	ldr	r2, [r3, #28]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 0204 	bic.w	r2, r2, #4
 80094ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69d9      	ldr	r1, [r3, #28]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	691a      	ldr	r2, [r3, #16]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	61da      	str	r2, [r3, #28]
      break;
 80094c0:	e021      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 faa5 	bl	8009a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69da      	ldr	r2, [r3, #28]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69da      	ldr	r2, [r3, #28]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69d9      	ldr	r1, [r3, #28]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	021a      	lsls	r2, r3, #8
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	61da      	str	r2, [r3, #28]
      break;
 8009502:	e000      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009504:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009528:	2b01      	cmp	r3, #1
 800952a:	d101      	bne.n	8009530 <HAL_TIM_ConfigClockSource+0x18>
 800952c:	2302      	movs	r3, #2
 800952e:	e0b3      	b.n	8009698 <HAL_TIM_ConfigClockSource+0x180>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800954e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009556:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009568:	d03e      	beq.n	80095e8 <HAL_TIM_ConfigClockSource+0xd0>
 800956a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800956e:	f200 8087 	bhi.w	8009680 <HAL_TIM_ConfigClockSource+0x168>
 8009572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009576:	f000 8085 	beq.w	8009684 <HAL_TIM_ConfigClockSource+0x16c>
 800957a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800957e:	d87f      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x168>
 8009580:	2b70      	cmp	r3, #112	; 0x70
 8009582:	d01a      	beq.n	80095ba <HAL_TIM_ConfigClockSource+0xa2>
 8009584:	2b70      	cmp	r3, #112	; 0x70
 8009586:	d87b      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x168>
 8009588:	2b60      	cmp	r3, #96	; 0x60
 800958a:	d050      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x116>
 800958c:	2b60      	cmp	r3, #96	; 0x60
 800958e:	d877      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x168>
 8009590:	2b50      	cmp	r3, #80	; 0x50
 8009592:	d03c      	beq.n	800960e <HAL_TIM_ConfigClockSource+0xf6>
 8009594:	2b50      	cmp	r3, #80	; 0x50
 8009596:	d873      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x168>
 8009598:	2b40      	cmp	r3, #64	; 0x40
 800959a:	d058      	beq.n	800964e <HAL_TIM_ConfigClockSource+0x136>
 800959c:	2b40      	cmp	r3, #64	; 0x40
 800959e:	d86f      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x168>
 80095a0:	2b30      	cmp	r3, #48	; 0x30
 80095a2:	d064      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x156>
 80095a4:	2b30      	cmp	r3, #48	; 0x30
 80095a6:	d86b      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x168>
 80095a8:	2b20      	cmp	r3, #32
 80095aa:	d060      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x156>
 80095ac:	2b20      	cmp	r3, #32
 80095ae:	d867      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x168>
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d05c      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x156>
 80095b4:	2b10      	cmp	r3, #16
 80095b6:	d05a      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80095b8:	e062      	b.n	8009680 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	6899      	ldr	r1, [r3, #8]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f000 faef 	bl	8009bac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80095dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	609a      	str	r2, [r3, #8]
      break;
 80095e6:	e04e      	b.n	8009686 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	6899      	ldr	r1, [r3, #8]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f000 fad8 	bl	8009bac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800960a:	609a      	str	r2, [r3, #8]
      break;
 800960c:	e03b      	b.n	8009686 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	6859      	ldr	r1, [r3, #4]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	461a      	mov	r2, r3
 800961c:	f000 fa4c 	bl	8009ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2150      	movs	r1, #80	; 0x50
 8009626:	4618      	mov	r0, r3
 8009628:	f000 faa5 	bl	8009b76 <TIM_ITRx_SetConfig>
      break;
 800962c:	e02b      	b.n	8009686 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	6859      	ldr	r1, [r3, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	461a      	mov	r2, r3
 800963c:	f000 fa6b 	bl	8009b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2160      	movs	r1, #96	; 0x60
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fa95 	bl	8009b76 <TIM_ITRx_SetConfig>
      break;
 800964c:	e01b      	b.n	8009686 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	6859      	ldr	r1, [r3, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	461a      	mov	r2, r3
 800965c:	f000 fa2c 	bl	8009ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2140      	movs	r1, #64	; 0x40
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fa85 	bl	8009b76 <TIM_ITRx_SetConfig>
      break;
 800966c:	e00b      	b.n	8009686 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f000 fa7c 	bl	8009b76 <TIM_ITRx_SetConfig>
        break;
 800967e:	e002      	b.n	8009686 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009680:	bf00      	nop
 8009682:	e000      	b.n	8009686 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009684:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a34      	ldr	r2, [pc, #208]	; (8009784 <TIM_Base_SetConfig+0xe4>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d00f      	beq.n	80096d8 <TIM_Base_SetConfig+0x38>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096be:	d00b      	beq.n	80096d8 <TIM_Base_SetConfig+0x38>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a31      	ldr	r2, [pc, #196]	; (8009788 <TIM_Base_SetConfig+0xe8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d007      	beq.n	80096d8 <TIM_Base_SetConfig+0x38>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a30      	ldr	r2, [pc, #192]	; (800978c <TIM_Base_SetConfig+0xec>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d003      	beq.n	80096d8 <TIM_Base_SetConfig+0x38>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a2f      	ldr	r2, [pc, #188]	; (8009790 <TIM_Base_SetConfig+0xf0>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d108      	bne.n	80096ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a25      	ldr	r2, [pc, #148]	; (8009784 <TIM_Base_SetConfig+0xe4>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d01b      	beq.n	800972a <TIM_Base_SetConfig+0x8a>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f8:	d017      	beq.n	800972a <TIM_Base_SetConfig+0x8a>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a22      	ldr	r2, [pc, #136]	; (8009788 <TIM_Base_SetConfig+0xe8>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d013      	beq.n	800972a <TIM_Base_SetConfig+0x8a>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a21      	ldr	r2, [pc, #132]	; (800978c <TIM_Base_SetConfig+0xec>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d00f      	beq.n	800972a <TIM_Base_SetConfig+0x8a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a20      	ldr	r2, [pc, #128]	; (8009790 <TIM_Base_SetConfig+0xf0>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00b      	beq.n	800972a <TIM_Base_SetConfig+0x8a>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a1f      	ldr	r2, [pc, #124]	; (8009794 <TIM_Base_SetConfig+0xf4>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d007      	beq.n	800972a <TIM_Base_SetConfig+0x8a>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a1e      	ldr	r2, [pc, #120]	; (8009798 <TIM_Base_SetConfig+0xf8>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d003      	beq.n	800972a <TIM_Base_SetConfig+0x8a>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a1d      	ldr	r2, [pc, #116]	; (800979c <TIM_Base_SetConfig+0xfc>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d108      	bne.n	800973c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	4313      	orrs	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	4313      	orrs	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a08      	ldr	r2, [pc, #32]	; (8009784 <TIM_Base_SetConfig+0xe4>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d103      	bne.n	8009770 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	691a      	ldr	r2, [r3, #16]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	615a      	str	r2, [r3, #20]
}
 8009776:	bf00      	nop
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	40010000 	.word	0x40010000
 8009788:	40000400 	.word	0x40000400
 800978c:	40000800 	.word	0x40000800
 8009790:	40000c00 	.word	0x40000c00
 8009794:	40014000 	.word	0x40014000
 8009798:	40014400 	.word	0x40014400
 800979c:	40014800 	.word	0x40014800

080097a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	f023 0201 	bic.w	r2, r3, #1
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f023 0303 	bic.w	r3, r3, #3
 80097d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	4313      	orrs	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	f023 0302 	bic.w	r3, r3, #2
 80097e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a1c      	ldr	r2, [pc, #112]	; (8009868 <TIM_OC1_SetConfig+0xc8>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d10c      	bne.n	8009816 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f023 0308 	bic.w	r3, r3, #8
 8009802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	4313      	orrs	r3, r2
 800980c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	f023 0304 	bic.w	r3, r3, #4
 8009814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a13      	ldr	r2, [pc, #76]	; (8009868 <TIM_OC1_SetConfig+0xc8>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d111      	bne.n	8009842 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800982c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	4313      	orrs	r3, r2
 8009836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	4313      	orrs	r3, r2
 8009840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	621a      	str	r2, [r3, #32]
}
 800985c:	bf00      	nop
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	40010000 	.word	0x40010000

0800986c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	f023 0210 	bic.w	r2, r3, #16
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800989a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f023 0320 	bic.w	r3, r3, #32
 80098b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a1e      	ldr	r2, [pc, #120]	; (8009940 <TIM_OC2_SetConfig+0xd4>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d10d      	bne.n	80098e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	011b      	lsls	r3, r3, #4
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	4313      	orrs	r3, r2
 80098de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a15      	ldr	r2, [pc, #84]	; (8009940 <TIM_OC2_SetConfig+0xd4>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d113      	bne.n	8009918 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4313      	orrs	r3, r2
 800990a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	4313      	orrs	r3, r2
 8009916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	685a      	ldr	r2, [r3, #4]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	621a      	str	r2, [r3, #32]
}
 8009932:	bf00      	nop
 8009934:	371c      	adds	r7, #28
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	40010000 	.word	0x40010000

08009944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	69db      	ldr	r3, [r3, #28]
 800996a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0303 	bic.w	r3, r3, #3
 800997a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	4313      	orrs	r3, r2
 8009984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800998c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	4313      	orrs	r3, r2
 8009998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a1d      	ldr	r2, [pc, #116]	; (8009a14 <TIM_OC3_SetConfig+0xd0>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d10d      	bne.n	80099be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	021b      	lsls	r3, r3, #8
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a14      	ldr	r2, [pc, #80]	; (8009a14 <TIM_OC3_SetConfig+0xd0>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d113      	bne.n	80099ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	4313      	orrs	r3, r2
 80099e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	011b      	lsls	r3, r3, #4
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	621a      	str	r2, [r3, #32]
}
 8009a08:	bf00      	nop
 8009a0a:	371c      	adds	r7, #28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	40010000 	.word	0x40010000

08009a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	021b      	lsls	r3, r3, #8
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	031b      	lsls	r3, r3, #12
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a10      	ldr	r2, [pc, #64]	; (8009ab4 <TIM_OC4_SetConfig+0x9c>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d109      	bne.n	8009a8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	019b      	lsls	r3, r3, #6
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	621a      	str	r2, [r3, #32]
}
 8009aa6:	bf00      	nop
 8009aa8:	371c      	adds	r7, #28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	40010000 	.word	0x40010000

08009ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	f023 0201 	bic.w	r2, r3, #1
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	011b      	lsls	r3, r3, #4
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f023 030a 	bic.w	r3, r3, #10
 8009af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	621a      	str	r2, [r3, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b087      	sub	sp, #28
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	60f8      	str	r0, [r7, #12]
 8009b1e:	60b9      	str	r1, [r7, #8]
 8009b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	f023 0210 	bic.w	r2, r3, #16
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	031b      	lsls	r3, r3, #12
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	621a      	str	r2, [r3, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b085      	sub	sp, #20
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	f043 0307 	orr.w	r3, r3, #7
 8009b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	609a      	str	r2, [r3, #8]
}
 8009ba0:	bf00      	nop
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	021a      	lsls	r2, r3, #8
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	609a      	str	r2, [r3, #8]
}
 8009be0:	bf00      	nop
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b087      	sub	sp, #28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	f003 031f 	and.w	r3, r3, #31
 8009bfe:	2201      	movs	r2, #1
 8009c00:	fa02 f303 	lsl.w	r3, r2, r3
 8009c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a1a      	ldr	r2, [r3, #32]
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	43db      	mvns	r3, r3
 8009c0e:	401a      	ands	r2, r3
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6a1a      	ldr	r2, [r3, #32]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	f003 031f 	and.w	r3, r3, #31
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	fa01 f303 	lsl.w	r3, r1, r3
 8009c24:	431a      	orrs	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	621a      	str	r2, [r3, #32]
}
 8009c2a:	bf00      	nop
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e050      	b.n	8009cf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a1c      	ldr	r2, [pc, #112]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d018      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c9c:	d013      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a18      	ldr	r2, [pc, #96]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d00e      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a16      	ldr	r2, [pc, #88]	; (8009d08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d009      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a15      	ldr	r2, [pc, #84]	; (8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d004      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a13      	ldr	r2, [pc, #76]	; (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d10c      	bne.n	8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	40010000 	.word	0x40010000
 8009d04:	40000400 	.word	0x40000400
 8009d08:	40000800 	.word	0x40000800
 8009d0c:	40000c00 	.word	0x40000c00
 8009d10:	40014000 	.word	0x40014000

08009d14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d101      	bne.n	8009d30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	e03d      	b.n	8009dac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <__errno>:
 8009db8:	4b01      	ldr	r3, [pc, #4]	; (8009dc0 <__errno+0x8>)
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	2000082c 	.word	0x2000082c

08009dc4 <__libc_init_array>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4d0d      	ldr	r5, [pc, #52]	; (8009dfc <__libc_init_array+0x38>)
 8009dc8:	4c0d      	ldr	r4, [pc, #52]	; (8009e00 <__libc_init_array+0x3c>)
 8009dca:	1b64      	subs	r4, r4, r5
 8009dcc:	10a4      	asrs	r4, r4, #2
 8009dce:	2600      	movs	r6, #0
 8009dd0:	42a6      	cmp	r6, r4
 8009dd2:	d109      	bne.n	8009de8 <__libc_init_array+0x24>
 8009dd4:	4d0b      	ldr	r5, [pc, #44]	; (8009e04 <__libc_init_array+0x40>)
 8009dd6:	4c0c      	ldr	r4, [pc, #48]	; (8009e08 <__libc_init_array+0x44>)
 8009dd8:	f000 fc4e 	bl	800a678 <_init>
 8009ddc:	1b64      	subs	r4, r4, r5
 8009dde:	10a4      	asrs	r4, r4, #2
 8009de0:	2600      	movs	r6, #0
 8009de2:	42a6      	cmp	r6, r4
 8009de4:	d105      	bne.n	8009df2 <__libc_init_array+0x2e>
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dec:	4798      	blx	r3
 8009dee:	3601      	adds	r6, #1
 8009df0:	e7ee      	b.n	8009dd0 <__libc_init_array+0xc>
 8009df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df6:	4798      	blx	r3
 8009df8:	3601      	adds	r6, #1
 8009dfa:	e7f2      	b.n	8009de2 <__libc_init_array+0x1e>
 8009dfc:	0800e8a4 	.word	0x0800e8a4
 8009e00:	0800e8a4 	.word	0x0800e8a4
 8009e04:	0800e8a4 	.word	0x0800e8a4
 8009e08:	0800e8a8 	.word	0x0800e8a8

08009e0c <memset>:
 8009e0c:	4402      	add	r2, r0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d100      	bne.n	8009e16 <memset+0xa>
 8009e14:	4770      	bx	lr
 8009e16:	f803 1b01 	strb.w	r1, [r3], #1
 8009e1a:	e7f9      	b.n	8009e10 <memset+0x4>

08009e1c <siprintf>:
 8009e1c:	b40e      	push	{r1, r2, r3}
 8009e1e:	b500      	push	{lr}
 8009e20:	b09c      	sub	sp, #112	; 0x70
 8009e22:	ab1d      	add	r3, sp, #116	; 0x74
 8009e24:	9002      	str	r0, [sp, #8]
 8009e26:	9006      	str	r0, [sp, #24]
 8009e28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e2c:	4809      	ldr	r0, [pc, #36]	; (8009e54 <siprintf+0x38>)
 8009e2e:	9107      	str	r1, [sp, #28]
 8009e30:	9104      	str	r1, [sp, #16]
 8009e32:	4909      	ldr	r1, [pc, #36]	; (8009e58 <siprintf+0x3c>)
 8009e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e38:	9105      	str	r1, [sp, #20]
 8009e3a:	6800      	ldr	r0, [r0, #0]
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	a902      	add	r1, sp, #8
 8009e40:	f000 f868 	bl	8009f14 <_svfiprintf_r>
 8009e44:	9b02      	ldr	r3, [sp, #8]
 8009e46:	2200      	movs	r2, #0
 8009e48:	701a      	strb	r2, [r3, #0]
 8009e4a:	b01c      	add	sp, #112	; 0x70
 8009e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e50:	b003      	add	sp, #12
 8009e52:	4770      	bx	lr
 8009e54:	2000082c 	.word	0x2000082c
 8009e58:	ffff0208 	.word	0xffff0208

08009e5c <__ssputs_r>:
 8009e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e60:	688e      	ldr	r6, [r1, #8]
 8009e62:	429e      	cmp	r6, r3
 8009e64:	4682      	mov	sl, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	4690      	mov	r8, r2
 8009e6a:	461f      	mov	r7, r3
 8009e6c:	d838      	bhi.n	8009ee0 <__ssputs_r+0x84>
 8009e6e:	898a      	ldrh	r2, [r1, #12]
 8009e70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e74:	d032      	beq.n	8009edc <__ssputs_r+0x80>
 8009e76:	6825      	ldr	r5, [r4, #0]
 8009e78:	6909      	ldr	r1, [r1, #16]
 8009e7a:	eba5 0901 	sub.w	r9, r5, r1
 8009e7e:	6965      	ldr	r5, [r4, #20]
 8009e80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e88:	3301      	adds	r3, #1
 8009e8a:	444b      	add	r3, r9
 8009e8c:	106d      	asrs	r5, r5, #1
 8009e8e:	429d      	cmp	r5, r3
 8009e90:	bf38      	it	cc
 8009e92:	461d      	movcc	r5, r3
 8009e94:	0553      	lsls	r3, r2, #21
 8009e96:	d531      	bpl.n	8009efc <__ssputs_r+0xa0>
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f000 fb47 	bl	800a52c <_malloc_r>
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	b950      	cbnz	r0, 8009eb8 <__ssputs_r+0x5c>
 8009ea2:	230c      	movs	r3, #12
 8009ea4:	f8ca 3000 	str.w	r3, [sl]
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb8:	6921      	ldr	r1, [r4, #16]
 8009eba:	464a      	mov	r2, r9
 8009ebc:	f000 fabe 	bl	800a43c <memcpy>
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	6126      	str	r6, [r4, #16]
 8009ece:	6165      	str	r5, [r4, #20]
 8009ed0:	444e      	add	r6, r9
 8009ed2:	eba5 0509 	sub.w	r5, r5, r9
 8009ed6:	6026      	str	r6, [r4, #0]
 8009ed8:	60a5      	str	r5, [r4, #8]
 8009eda:	463e      	mov	r6, r7
 8009edc:	42be      	cmp	r6, r7
 8009ede:	d900      	bls.n	8009ee2 <__ssputs_r+0x86>
 8009ee0:	463e      	mov	r6, r7
 8009ee2:	4632      	mov	r2, r6
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	4641      	mov	r1, r8
 8009ee8:	f000 fab6 	bl	800a458 <memmove>
 8009eec:	68a3      	ldr	r3, [r4, #8]
 8009eee:	6822      	ldr	r2, [r4, #0]
 8009ef0:	1b9b      	subs	r3, r3, r6
 8009ef2:	4432      	add	r2, r6
 8009ef4:	60a3      	str	r3, [r4, #8]
 8009ef6:	6022      	str	r2, [r4, #0]
 8009ef8:	2000      	movs	r0, #0
 8009efa:	e7db      	b.n	8009eb4 <__ssputs_r+0x58>
 8009efc:	462a      	mov	r2, r5
 8009efe:	f000 fb6f 	bl	800a5e0 <_realloc_r>
 8009f02:	4606      	mov	r6, r0
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d1e1      	bne.n	8009ecc <__ssputs_r+0x70>
 8009f08:	6921      	ldr	r1, [r4, #16]
 8009f0a:	4650      	mov	r0, sl
 8009f0c:	f000 fabe 	bl	800a48c <_free_r>
 8009f10:	e7c7      	b.n	8009ea2 <__ssputs_r+0x46>
	...

08009f14 <_svfiprintf_r>:
 8009f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f18:	4698      	mov	r8, r3
 8009f1a:	898b      	ldrh	r3, [r1, #12]
 8009f1c:	061b      	lsls	r3, r3, #24
 8009f1e:	b09d      	sub	sp, #116	; 0x74
 8009f20:	4607      	mov	r7, r0
 8009f22:	460d      	mov	r5, r1
 8009f24:	4614      	mov	r4, r2
 8009f26:	d50e      	bpl.n	8009f46 <_svfiprintf_r+0x32>
 8009f28:	690b      	ldr	r3, [r1, #16]
 8009f2a:	b963      	cbnz	r3, 8009f46 <_svfiprintf_r+0x32>
 8009f2c:	2140      	movs	r1, #64	; 0x40
 8009f2e:	f000 fafd 	bl	800a52c <_malloc_r>
 8009f32:	6028      	str	r0, [r5, #0]
 8009f34:	6128      	str	r0, [r5, #16]
 8009f36:	b920      	cbnz	r0, 8009f42 <_svfiprintf_r+0x2e>
 8009f38:	230c      	movs	r3, #12
 8009f3a:	603b      	str	r3, [r7, #0]
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	e0d1      	b.n	800a0e6 <_svfiprintf_r+0x1d2>
 8009f42:	2340      	movs	r3, #64	; 0x40
 8009f44:	616b      	str	r3, [r5, #20]
 8009f46:	2300      	movs	r3, #0
 8009f48:	9309      	str	r3, [sp, #36]	; 0x24
 8009f4a:	2320      	movs	r3, #32
 8009f4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f54:	2330      	movs	r3, #48	; 0x30
 8009f56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a100 <_svfiprintf_r+0x1ec>
 8009f5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f5e:	f04f 0901 	mov.w	r9, #1
 8009f62:	4623      	mov	r3, r4
 8009f64:	469a      	mov	sl, r3
 8009f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f6a:	b10a      	cbz	r2, 8009f70 <_svfiprintf_r+0x5c>
 8009f6c:	2a25      	cmp	r2, #37	; 0x25
 8009f6e:	d1f9      	bne.n	8009f64 <_svfiprintf_r+0x50>
 8009f70:	ebba 0b04 	subs.w	fp, sl, r4
 8009f74:	d00b      	beq.n	8009f8e <_svfiprintf_r+0x7a>
 8009f76:	465b      	mov	r3, fp
 8009f78:	4622      	mov	r2, r4
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	f7ff ff6d 	bl	8009e5c <__ssputs_r>
 8009f82:	3001      	adds	r0, #1
 8009f84:	f000 80aa 	beq.w	800a0dc <_svfiprintf_r+0x1c8>
 8009f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f8a:	445a      	add	r2, fp
 8009f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f000 80a2 	beq.w	800a0dc <_svfiprintf_r+0x1c8>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fa2:	f10a 0a01 	add.w	sl, sl, #1
 8009fa6:	9304      	str	r3, [sp, #16]
 8009fa8:	9307      	str	r3, [sp, #28]
 8009faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fae:	931a      	str	r3, [sp, #104]	; 0x68
 8009fb0:	4654      	mov	r4, sl
 8009fb2:	2205      	movs	r2, #5
 8009fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb8:	4851      	ldr	r0, [pc, #324]	; (800a100 <_svfiprintf_r+0x1ec>)
 8009fba:	f7f6 f929 	bl	8000210 <memchr>
 8009fbe:	9a04      	ldr	r2, [sp, #16]
 8009fc0:	b9d8      	cbnz	r0, 8009ffa <_svfiprintf_r+0xe6>
 8009fc2:	06d0      	lsls	r0, r2, #27
 8009fc4:	bf44      	itt	mi
 8009fc6:	2320      	movmi	r3, #32
 8009fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fcc:	0711      	lsls	r1, r2, #28
 8009fce:	bf44      	itt	mi
 8009fd0:	232b      	movmi	r3, #43	; 0x2b
 8009fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009fda:	2b2a      	cmp	r3, #42	; 0x2a
 8009fdc:	d015      	beq.n	800a00a <_svfiprintf_r+0xf6>
 8009fde:	9a07      	ldr	r2, [sp, #28]
 8009fe0:	4654      	mov	r4, sl
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	f04f 0c0a 	mov.w	ip, #10
 8009fe8:	4621      	mov	r1, r4
 8009fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fee:	3b30      	subs	r3, #48	; 0x30
 8009ff0:	2b09      	cmp	r3, #9
 8009ff2:	d94e      	bls.n	800a092 <_svfiprintf_r+0x17e>
 8009ff4:	b1b0      	cbz	r0, 800a024 <_svfiprintf_r+0x110>
 8009ff6:	9207      	str	r2, [sp, #28]
 8009ff8:	e014      	b.n	800a024 <_svfiprintf_r+0x110>
 8009ffa:	eba0 0308 	sub.w	r3, r0, r8
 8009ffe:	fa09 f303 	lsl.w	r3, r9, r3
 800a002:	4313      	orrs	r3, r2
 800a004:	9304      	str	r3, [sp, #16]
 800a006:	46a2      	mov	sl, r4
 800a008:	e7d2      	b.n	8009fb0 <_svfiprintf_r+0x9c>
 800a00a:	9b03      	ldr	r3, [sp, #12]
 800a00c:	1d19      	adds	r1, r3, #4
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	9103      	str	r1, [sp, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	bfbb      	ittet	lt
 800a016:	425b      	neglt	r3, r3
 800a018:	f042 0202 	orrlt.w	r2, r2, #2
 800a01c:	9307      	strge	r3, [sp, #28]
 800a01e:	9307      	strlt	r3, [sp, #28]
 800a020:	bfb8      	it	lt
 800a022:	9204      	strlt	r2, [sp, #16]
 800a024:	7823      	ldrb	r3, [r4, #0]
 800a026:	2b2e      	cmp	r3, #46	; 0x2e
 800a028:	d10c      	bne.n	800a044 <_svfiprintf_r+0x130>
 800a02a:	7863      	ldrb	r3, [r4, #1]
 800a02c:	2b2a      	cmp	r3, #42	; 0x2a
 800a02e:	d135      	bne.n	800a09c <_svfiprintf_r+0x188>
 800a030:	9b03      	ldr	r3, [sp, #12]
 800a032:	1d1a      	adds	r2, r3, #4
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	9203      	str	r2, [sp, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bfb8      	it	lt
 800a03c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a040:	3402      	adds	r4, #2
 800a042:	9305      	str	r3, [sp, #20]
 800a044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a110 <_svfiprintf_r+0x1fc>
 800a048:	7821      	ldrb	r1, [r4, #0]
 800a04a:	2203      	movs	r2, #3
 800a04c:	4650      	mov	r0, sl
 800a04e:	f7f6 f8df 	bl	8000210 <memchr>
 800a052:	b140      	cbz	r0, 800a066 <_svfiprintf_r+0x152>
 800a054:	2340      	movs	r3, #64	; 0x40
 800a056:	eba0 000a 	sub.w	r0, r0, sl
 800a05a:	fa03 f000 	lsl.w	r0, r3, r0
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	4303      	orrs	r3, r0
 800a062:	3401      	adds	r4, #1
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a06a:	4826      	ldr	r0, [pc, #152]	; (800a104 <_svfiprintf_r+0x1f0>)
 800a06c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a070:	2206      	movs	r2, #6
 800a072:	f7f6 f8cd 	bl	8000210 <memchr>
 800a076:	2800      	cmp	r0, #0
 800a078:	d038      	beq.n	800a0ec <_svfiprintf_r+0x1d8>
 800a07a:	4b23      	ldr	r3, [pc, #140]	; (800a108 <_svfiprintf_r+0x1f4>)
 800a07c:	bb1b      	cbnz	r3, 800a0c6 <_svfiprintf_r+0x1b2>
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	3307      	adds	r3, #7
 800a082:	f023 0307 	bic.w	r3, r3, #7
 800a086:	3308      	adds	r3, #8
 800a088:	9303      	str	r3, [sp, #12]
 800a08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a08c:	4433      	add	r3, r6
 800a08e:	9309      	str	r3, [sp, #36]	; 0x24
 800a090:	e767      	b.n	8009f62 <_svfiprintf_r+0x4e>
 800a092:	fb0c 3202 	mla	r2, ip, r2, r3
 800a096:	460c      	mov	r4, r1
 800a098:	2001      	movs	r0, #1
 800a09a:	e7a5      	b.n	8009fe8 <_svfiprintf_r+0xd4>
 800a09c:	2300      	movs	r3, #0
 800a09e:	3401      	adds	r4, #1
 800a0a0:	9305      	str	r3, [sp, #20]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	f04f 0c0a 	mov.w	ip, #10
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ae:	3a30      	subs	r2, #48	; 0x30
 800a0b0:	2a09      	cmp	r2, #9
 800a0b2:	d903      	bls.n	800a0bc <_svfiprintf_r+0x1a8>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d0c5      	beq.n	800a044 <_svfiprintf_r+0x130>
 800a0b8:	9105      	str	r1, [sp, #20]
 800a0ba:	e7c3      	b.n	800a044 <_svfiprintf_r+0x130>
 800a0bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e7f0      	b.n	800a0a8 <_svfiprintf_r+0x194>
 800a0c6:	ab03      	add	r3, sp, #12
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	462a      	mov	r2, r5
 800a0cc:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <_svfiprintf_r+0x1f8>)
 800a0ce:	a904      	add	r1, sp, #16
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	f3af 8000 	nop.w
 800a0d6:	1c42      	adds	r2, r0, #1
 800a0d8:	4606      	mov	r6, r0
 800a0da:	d1d6      	bne.n	800a08a <_svfiprintf_r+0x176>
 800a0dc:	89ab      	ldrh	r3, [r5, #12]
 800a0de:	065b      	lsls	r3, r3, #25
 800a0e0:	f53f af2c 	bmi.w	8009f3c <_svfiprintf_r+0x28>
 800a0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0e6:	b01d      	add	sp, #116	; 0x74
 800a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ec:	ab03      	add	r3, sp, #12
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	462a      	mov	r2, r5
 800a0f2:	4b06      	ldr	r3, [pc, #24]	; (800a10c <_svfiprintf_r+0x1f8>)
 800a0f4:	a904      	add	r1, sp, #16
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	f000 f87a 	bl	800a1f0 <_printf_i>
 800a0fc:	e7eb      	b.n	800a0d6 <_svfiprintf_r+0x1c2>
 800a0fe:	bf00      	nop
 800a100:	0800e868 	.word	0x0800e868
 800a104:	0800e872 	.word	0x0800e872
 800a108:	00000000 	.word	0x00000000
 800a10c:	08009e5d 	.word	0x08009e5d
 800a110:	0800e86e 	.word	0x0800e86e

0800a114 <_printf_common>:
 800a114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a118:	4616      	mov	r6, r2
 800a11a:	4699      	mov	r9, r3
 800a11c:	688a      	ldr	r2, [r1, #8]
 800a11e:	690b      	ldr	r3, [r1, #16]
 800a120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a124:	4293      	cmp	r3, r2
 800a126:	bfb8      	it	lt
 800a128:	4613      	movlt	r3, r2
 800a12a:	6033      	str	r3, [r6, #0]
 800a12c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a130:	4607      	mov	r7, r0
 800a132:	460c      	mov	r4, r1
 800a134:	b10a      	cbz	r2, 800a13a <_printf_common+0x26>
 800a136:	3301      	adds	r3, #1
 800a138:	6033      	str	r3, [r6, #0]
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	0699      	lsls	r1, r3, #26
 800a13e:	bf42      	ittt	mi
 800a140:	6833      	ldrmi	r3, [r6, #0]
 800a142:	3302      	addmi	r3, #2
 800a144:	6033      	strmi	r3, [r6, #0]
 800a146:	6825      	ldr	r5, [r4, #0]
 800a148:	f015 0506 	ands.w	r5, r5, #6
 800a14c:	d106      	bne.n	800a15c <_printf_common+0x48>
 800a14e:	f104 0a19 	add.w	sl, r4, #25
 800a152:	68e3      	ldr	r3, [r4, #12]
 800a154:	6832      	ldr	r2, [r6, #0]
 800a156:	1a9b      	subs	r3, r3, r2
 800a158:	42ab      	cmp	r3, r5
 800a15a:	dc26      	bgt.n	800a1aa <_printf_common+0x96>
 800a15c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a160:	1e13      	subs	r3, r2, #0
 800a162:	6822      	ldr	r2, [r4, #0]
 800a164:	bf18      	it	ne
 800a166:	2301      	movne	r3, #1
 800a168:	0692      	lsls	r2, r2, #26
 800a16a:	d42b      	bmi.n	800a1c4 <_printf_common+0xb0>
 800a16c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a170:	4649      	mov	r1, r9
 800a172:	4638      	mov	r0, r7
 800a174:	47c0      	blx	r8
 800a176:	3001      	adds	r0, #1
 800a178:	d01e      	beq.n	800a1b8 <_printf_common+0xa4>
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	68e5      	ldr	r5, [r4, #12]
 800a17e:	6832      	ldr	r2, [r6, #0]
 800a180:	f003 0306 	and.w	r3, r3, #6
 800a184:	2b04      	cmp	r3, #4
 800a186:	bf08      	it	eq
 800a188:	1aad      	subeq	r5, r5, r2
 800a18a:	68a3      	ldr	r3, [r4, #8]
 800a18c:	6922      	ldr	r2, [r4, #16]
 800a18e:	bf0c      	ite	eq
 800a190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a194:	2500      	movne	r5, #0
 800a196:	4293      	cmp	r3, r2
 800a198:	bfc4      	itt	gt
 800a19a:	1a9b      	subgt	r3, r3, r2
 800a19c:	18ed      	addgt	r5, r5, r3
 800a19e:	2600      	movs	r6, #0
 800a1a0:	341a      	adds	r4, #26
 800a1a2:	42b5      	cmp	r5, r6
 800a1a4:	d11a      	bne.n	800a1dc <_printf_common+0xc8>
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	e008      	b.n	800a1bc <_printf_common+0xa8>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	4652      	mov	r2, sl
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	47c0      	blx	r8
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	d103      	bne.n	800a1c0 <_printf_common+0xac>
 800a1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c0:	3501      	adds	r5, #1
 800a1c2:	e7c6      	b.n	800a152 <_printf_common+0x3e>
 800a1c4:	18e1      	adds	r1, r4, r3
 800a1c6:	1c5a      	adds	r2, r3, #1
 800a1c8:	2030      	movs	r0, #48	; 0x30
 800a1ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1ce:	4422      	add	r2, r4
 800a1d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1d8:	3302      	adds	r3, #2
 800a1da:	e7c7      	b.n	800a16c <_printf_common+0x58>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	4622      	mov	r2, r4
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	47c0      	blx	r8
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	d0e6      	beq.n	800a1b8 <_printf_common+0xa4>
 800a1ea:	3601      	adds	r6, #1
 800a1ec:	e7d9      	b.n	800a1a2 <_printf_common+0x8e>
	...

0800a1f0 <_printf_i>:
 800a1f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f4:	460c      	mov	r4, r1
 800a1f6:	4691      	mov	r9, r2
 800a1f8:	7e27      	ldrb	r7, [r4, #24]
 800a1fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a1fc:	2f78      	cmp	r7, #120	; 0x78
 800a1fe:	4680      	mov	r8, r0
 800a200:	469a      	mov	sl, r3
 800a202:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a206:	d807      	bhi.n	800a218 <_printf_i+0x28>
 800a208:	2f62      	cmp	r7, #98	; 0x62
 800a20a:	d80a      	bhi.n	800a222 <_printf_i+0x32>
 800a20c:	2f00      	cmp	r7, #0
 800a20e:	f000 80d8 	beq.w	800a3c2 <_printf_i+0x1d2>
 800a212:	2f58      	cmp	r7, #88	; 0x58
 800a214:	f000 80a3 	beq.w	800a35e <_printf_i+0x16e>
 800a218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a21c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a220:	e03a      	b.n	800a298 <_printf_i+0xa8>
 800a222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a226:	2b15      	cmp	r3, #21
 800a228:	d8f6      	bhi.n	800a218 <_printf_i+0x28>
 800a22a:	a001      	add	r0, pc, #4	; (adr r0, 800a230 <_printf_i+0x40>)
 800a22c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a230:	0800a289 	.word	0x0800a289
 800a234:	0800a29d 	.word	0x0800a29d
 800a238:	0800a219 	.word	0x0800a219
 800a23c:	0800a219 	.word	0x0800a219
 800a240:	0800a219 	.word	0x0800a219
 800a244:	0800a219 	.word	0x0800a219
 800a248:	0800a29d 	.word	0x0800a29d
 800a24c:	0800a219 	.word	0x0800a219
 800a250:	0800a219 	.word	0x0800a219
 800a254:	0800a219 	.word	0x0800a219
 800a258:	0800a219 	.word	0x0800a219
 800a25c:	0800a3a9 	.word	0x0800a3a9
 800a260:	0800a2cd 	.word	0x0800a2cd
 800a264:	0800a38b 	.word	0x0800a38b
 800a268:	0800a219 	.word	0x0800a219
 800a26c:	0800a219 	.word	0x0800a219
 800a270:	0800a3cb 	.word	0x0800a3cb
 800a274:	0800a219 	.word	0x0800a219
 800a278:	0800a2cd 	.word	0x0800a2cd
 800a27c:	0800a219 	.word	0x0800a219
 800a280:	0800a219 	.word	0x0800a219
 800a284:	0800a393 	.word	0x0800a393
 800a288:	680b      	ldr	r3, [r1, #0]
 800a28a:	1d1a      	adds	r2, r3, #4
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	600a      	str	r2, [r1, #0]
 800a290:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a298:	2301      	movs	r3, #1
 800a29a:	e0a3      	b.n	800a3e4 <_printf_i+0x1f4>
 800a29c:	6825      	ldr	r5, [r4, #0]
 800a29e:	6808      	ldr	r0, [r1, #0]
 800a2a0:	062e      	lsls	r6, r5, #24
 800a2a2:	f100 0304 	add.w	r3, r0, #4
 800a2a6:	d50a      	bpl.n	800a2be <_printf_i+0xce>
 800a2a8:	6805      	ldr	r5, [r0, #0]
 800a2aa:	600b      	str	r3, [r1, #0]
 800a2ac:	2d00      	cmp	r5, #0
 800a2ae:	da03      	bge.n	800a2b8 <_printf_i+0xc8>
 800a2b0:	232d      	movs	r3, #45	; 0x2d
 800a2b2:	426d      	negs	r5, r5
 800a2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b8:	485e      	ldr	r0, [pc, #376]	; (800a434 <_printf_i+0x244>)
 800a2ba:	230a      	movs	r3, #10
 800a2bc:	e019      	b.n	800a2f2 <_printf_i+0x102>
 800a2be:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a2c2:	6805      	ldr	r5, [r0, #0]
 800a2c4:	600b      	str	r3, [r1, #0]
 800a2c6:	bf18      	it	ne
 800a2c8:	b22d      	sxthne	r5, r5
 800a2ca:	e7ef      	b.n	800a2ac <_printf_i+0xbc>
 800a2cc:	680b      	ldr	r3, [r1, #0]
 800a2ce:	6825      	ldr	r5, [r4, #0]
 800a2d0:	1d18      	adds	r0, r3, #4
 800a2d2:	6008      	str	r0, [r1, #0]
 800a2d4:	0628      	lsls	r0, r5, #24
 800a2d6:	d501      	bpl.n	800a2dc <_printf_i+0xec>
 800a2d8:	681d      	ldr	r5, [r3, #0]
 800a2da:	e002      	b.n	800a2e2 <_printf_i+0xf2>
 800a2dc:	0669      	lsls	r1, r5, #25
 800a2de:	d5fb      	bpl.n	800a2d8 <_printf_i+0xe8>
 800a2e0:	881d      	ldrh	r5, [r3, #0]
 800a2e2:	4854      	ldr	r0, [pc, #336]	; (800a434 <_printf_i+0x244>)
 800a2e4:	2f6f      	cmp	r7, #111	; 0x6f
 800a2e6:	bf0c      	ite	eq
 800a2e8:	2308      	moveq	r3, #8
 800a2ea:	230a      	movne	r3, #10
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2f2:	6866      	ldr	r6, [r4, #4]
 800a2f4:	60a6      	str	r6, [r4, #8]
 800a2f6:	2e00      	cmp	r6, #0
 800a2f8:	bfa2      	ittt	ge
 800a2fa:	6821      	ldrge	r1, [r4, #0]
 800a2fc:	f021 0104 	bicge.w	r1, r1, #4
 800a300:	6021      	strge	r1, [r4, #0]
 800a302:	b90d      	cbnz	r5, 800a308 <_printf_i+0x118>
 800a304:	2e00      	cmp	r6, #0
 800a306:	d04d      	beq.n	800a3a4 <_printf_i+0x1b4>
 800a308:	4616      	mov	r6, r2
 800a30a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a30e:	fb03 5711 	mls	r7, r3, r1, r5
 800a312:	5dc7      	ldrb	r7, [r0, r7]
 800a314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a318:	462f      	mov	r7, r5
 800a31a:	42bb      	cmp	r3, r7
 800a31c:	460d      	mov	r5, r1
 800a31e:	d9f4      	bls.n	800a30a <_printf_i+0x11a>
 800a320:	2b08      	cmp	r3, #8
 800a322:	d10b      	bne.n	800a33c <_printf_i+0x14c>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	07df      	lsls	r7, r3, #31
 800a328:	d508      	bpl.n	800a33c <_printf_i+0x14c>
 800a32a:	6923      	ldr	r3, [r4, #16]
 800a32c:	6861      	ldr	r1, [r4, #4]
 800a32e:	4299      	cmp	r1, r3
 800a330:	bfde      	ittt	le
 800a332:	2330      	movle	r3, #48	; 0x30
 800a334:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a338:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a33c:	1b92      	subs	r2, r2, r6
 800a33e:	6122      	str	r2, [r4, #16]
 800a340:	f8cd a000 	str.w	sl, [sp]
 800a344:	464b      	mov	r3, r9
 800a346:	aa03      	add	r2, sp, #12
 800a348:	4621      	mov	r1, r4
 800a34a:	4640      	mov	r0, r8
 800a34c:	f7ff fee2 	bl	800a114 <_printf_common>
 800a350:	3001      	adds	r0, #1
 800a352:	d14c      	bne.n	800a3ee <_printf_i+0x1fe>
 800a354:	f04f 30ff 	mov.w	r0, #4294967295
 800a358:	b004      	add	sp, #16
 800a35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35e:	4835      	ldr	r0, [pc, #212]	; (800a434 <_printf_i+0x244>)
 800a360:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	680e      	ldr	r6, [r1, #0]
 800a368:	061f      	lsls	r7, r3, #24
 800a36a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a36e:	600e      	str	r6, [r1, #0]
 800a370:	d514      	bpl.n	800a39c <_printf_i+0x1ac>
 800a372:	07d9      	lsls	r1, r3, #31
 800a374:	bf44      	itt	mi
 800a376:	f043 0320 	orrmi.w	r3, r3, #32
 800a37a:	6023      	strmi	r3, [r4, #0]
 800a37c:	b91d      	cbnz	r5, 800a386 <_printf_i+0x196>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	f023 0320 	bic.w	r3, r3, #32
 800a384:	6023      	str	r3, [r4, #0]
 800a386:	2310      	movs	r3, #16
 800a388:	e7b0      	b.n	800a2ec <_printf_i+0xfc>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	f043 0320 	orr.w	r3, r3, #32
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	2378      	movs	r3, #120	; 0x78
 800a394:	4828      	ldr	r0, [pc, #160]	; (800a438 <_printf_i+0x248>)
 800a396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a39a:	e7e3      	b.n	800a364 <_printf_i+0x174>
 800a39c:	065e      	lsls	r6, r3, #25
 800a39e:	bf48      	it	mi
 800a3a0:	b2ad      	uxthmi	r5, r5
 800a3a2:	e7e6      	b.n	800a372 <_printf_i+0x182>
 800a3a4:	4616      	mov	r6, r2
 800a3a6:	e7bb      	b.n	800a320 <_printf_i+0x130>
 800a3a8:	680b      	ldr	r3, [r1, #0]
 800a3aa:	6826      	ldr	r6, [r4, #0]
 800a3ac:	6960      	ldr	r0, [r4, #20]
 800a3ae:	1d1d      	adds	r5, r3, #4
 800a3b0:	600d      	str	r5, [r1, #0]
 800a3b2:	0635      	lsls	r5, r6, #24
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	d501      	bpl.n	800a3bc <_printf_i+0x1cc>
 800a3b8:	6018      	str	r0, [r3, #0]
 800a3ba:	e002      	b.n	800a3c2 <_printf_i+0x1d2>
 800a3bc:	0671      	lsls	r1, r6, #25
 800a3be:	d5fb      	bpl.n	800a3b8 <_printf_i+0x1c8>
 800a3c0:	8018      	strh	r0, [r3, #0]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	6123      	str	r3, [r4, #16]
 800a3c6:	4616      	mov	r6, r2
 800a3c8:	e7ba      	b.n	800a340 <_printf_i+0x150>
 800a3ca:	680b      	ldr	r3, [r1, #0]
 800a3cc:	1d1a      	adds	r2, r3, #4
 800a3ce:	600a      	str	r2, [r1, #0]
 800a3d0:	681e      	ldr	r6, [r3, #0]
 800a3d2:	6862      	ldr	r2, [r4, #4]
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7f5 ff1a 	bl	8000210 <memchr>
 800a3dc:	b108      	cbz	r0, 800a3e2 <_printf_i+0x1f2>
 800a3de:	1b80      	subs	r0, r0, r6
 800a3e0:	6060      	str	r0, [r4, #4]
 800a3e2:	6863      	ldr	r3, [r4, #4]
 800a3e4:	6123      	str	r3, [r4, #16]
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ec:	e7a8      	b.n	800a340 <_printf_i+0x150>
 800a3ee:	6923      	ldr	r3, [r4, #16]
 800a3f0:	4632      	mov	r2, r6
 800a3f2:	4649      	mov	r1, r9
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	47d0      	blx	sl
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	d0ab      	beq.n	800a354 <_printf_i+0x164>
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	079b      	lsls	r3, r3, #30
 800a400:	d413      	bmi.n	800a42a <_printf_i+0x23a>
 800a402:	68e0      	ldr	r0, [r4, #12]
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	4298      	cmp	r0, r3
 800a408:	bfb8      	it	lt
 800a40a:	4618      	movlt	r0, r3
 800a40c:	e7a4      	b.n	800a358 <_printf_i+0x168>
 800a40e:	2301      	movs	r3, #1
 800a410:	4632      	mov	r2, r6
 800a412:	4649      	mov	r1, r9
 800a414:	4640      	mov	r0, r8
 800a416:	47d0      	blx	sl
 800a418:	3001      	adds	r0, #1
 800a41a:	d09b      	beq.n	800a354 <_printf_i+0x164>
 800a41c:	3501      	adds	r5, #1
 800a41e:	68e3      	ldr	r3, [r4, #12]
 800a420:	9903      	ldr	r1, [sp, #12]
 800a422:	1a5b      	subs	r3, r3, r1
 800a424:	42ab      	cmp	r3, r5
 800a426:	dcf2      	bgt.n	800a40e <_printf_i+0x21e>
 800a428:	e7eb      	b.n	800a402 <_printf_i+0x212>
 800a42a:	2500      	movs	r5, #0
 800a42c:	f104 0619 	add.w	r6, r4, #25
 800a430:	e7f5      	b.n	800a41e <_printf_i+0x22e>
 800a432:	bf00      	nop
 800a434:	0800e879 	.word	0x0800e879
 800a438:	0800e88a 	.word	0x0800e88a

0800a43c <memcpy>:
 800a43c:	440a      	add	r2, r1
 800a43e:	4291      	cmp	r1, r2
 800a440:	f100 33ff 	add.w	r3, r0, #4294967295
 800a444:	d100      	bne.n	800a448 <memcpy+0xc>
 800a446:	4770      	bx	lr
 800a448:	b510      	push	{r4, lr}
 800a44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a452:	4291      	cmp	r1, r2
 800a454:	d1f9      	bne.n	800a44a <memcpy+0xe>
 800a456:	bd10      	pop	{r4, pc}

0800a458 <memmove>:
 800a458:	4288      	cmp	r0, r1
 800a45a:	b510      	push	{r4, lr}
 800a45c:	eb01 0402 	add.w	r4, r1, r2
 800a460:	d902      	bls.n	800a468 <memmove+0x10>
 800a462:	4284      	cmp	r4, r0
 800a464:	4623      	mov	r3, r4
 800a466:	d807      	bhi.n	800a478 <memmove+0x20>
 800a468:	1e43      	subs	r3, r0, #1
 800a46a:	42a1      	cmp	r1, r4
 800a46c:	d008      	beq.n	800a480 <memmove+0x28>
 800a46e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a472:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a476:	e7f8      	b.n	800a46a <memmove+0x12>
 800a478:	4402      	add	r2, r0
 800a47a:	4601      	mov	r1, r0
 800a47c:	428a      	cmp	r2, r1
 800a47e:	d100      	bne.n	800a482 <memmove+0x2a>
 800a480:	bd10      	pop	{r4, pc}
 800a482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a48a:	e7f7      	b.n	800a47c <memmove+0x24>

0800a48c <_free_r>:
 800a48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a48e:	2900      	cmp	r1, #0
 800a490:	d048      	beq.n	800a524 <_free_r+0x98>
 800a492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a496:	9001      	str	r0, [sp, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f1a1 0404 	sub.w	r4, r1, #4
 800a49e:	bfb8      	it	lt
 800a4a0:	18e4      	addlt	r4, r4, r3
 800a4a2:	f000 f8d3 	bl	800a64c <__malloc_lock>
 800a4a6:	4a20      	ldr	r2, [pc, #128]	; (800a528 <_free_r+0x9c>)
 800a4a8:	9801      	ldr	r0, [sp, #4]
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	4615      	mov	r5, r2
 800a4ae:	b933      	cbnz	r3, 800a4be <_free_r+0x32>
 800a4b0:	6063      	str	r3, [r4, #4]
 800a4b2:	6014      	str	r4, [r2, #0]
 800a4b4:	b003      	add	sp, #12
 800a4b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4ba:	f000 b8cd 	b.w	800a658 <__malloc_unlock>
 800a4be:	42a3      	cmp	r3, r4
 800a4c0:	d90b      	bls.n	800a4da <_free_r+0x4e>
 800a4c2:	6821      	ldr	r1, [r4, #0]
 800a4c4:	1862      	adds	r2, r4, r1
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	bf04      	itt	eq
 800a4ca:	681a      	ldreq	r2, [r3, #0]
 800a4cc:	685b      	ldreq	r3, [r3, #4]
 800a4ce:	6063      	str	r3, [r4, #4]
 800a4d0:	bf04      	itt	eq
 800a4d2:	1852      	addeq	r2, r2, r1
 800a4d4:	6022      	streq	r2, [r4, #0]
 800a4d6:	602c      	str	r4, [r5, #0]
 800a4d8:	e7ec      	b.n	800a4b4 <_free_r+0x28>
 800a4da:	461a      	mov	r2, r3
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	b10b      	cbz	r3, 800a4e4 <_free_r+0x58>
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	d9fa      	bls.n	800a4da <_free_r+0x4e>
 800a4e4:	6811      	ldr	r1, [r2, #0]
 800a4e6:	1855      	adds	r5, r2, r1
 800a4e8:	42a5      	cmp	r5, r4
 800a4ea:	d10b      	bne.n	800a504 <_free_r+0x78>
 800a4ec:	6824      	ldr	r4, [r4, #0]
 800a4ee:	4421      	add	r1, r4
 800a4f0:	1854      	adds	r4, r2, r1
 800a4f2:	42a3      	cmp	r3, r4
 800a4f4:	6011      	str	r1, [r2, #0]
 800a4f6:	d1dd      	bne.n	800a4b4 <_free_r+0x28>
 800a4f8:	681c      	ldr	r4, [r3, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	6053      	str	r3, [r2, #4]
 800a4fe:	4421      	add	r1, r4
 800a500:	6011      	str	r1, [r2, #0]
 800a502:	e7d7      	b.n	800a4b4 <_free_r+0x28>
 800a504:	d902      	bls.n	800a50c <_free_r+0x80>
 800a506:	230c      	movs	r3, #12
 800a508:	6003      	str	r3, [r0, #0]
 800a50a:	e7d3      	b.n	800a4b4 <_free_r+0x28>
 800a50c:	6825      	ldr	r5, [r4, #0]
 800a50e:	1961      	adds	r1, r4, r5
 800a510:	428b      	cmp	r3, r1
 800a512:	bf04      	itt	eq
 800a514:	6819      	ldreq	r1, [r3, #0]
 800a516:	685b      	ldreq	r3, [r3, #4]
 800a518:	6063      	str	r3, [r4, #4]
 800a51a:	bf04      	itt	eq
 800a51c:	1949      	addeq	r1, r1, r5
 800a51e:	6021      	streq	r1, [r4, #0]
 800a520:	6054      	str	r4, [r2, #4]
 800a522:	e7c7      	b.n	800a4b4 <_free_r+0x28>
 800a524:	b003      	add	sp, #12
 800a526:	bd30      	pop	{r4, r5, pc}
 800a528:	200008e4 	.word	0x200008e4

0800a52c <_malloc_r>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	1ccd      	adds	r5, r1, #3
 800a530:	f025 0503 	bic.w	r5, r5, #3
 800a534:	3508      	adds	r5, #8
 800a536:	2d0c      	cmp	r5, #12
 800a538:	bf38      	it	cc
 800a53a:	250c      	movcc	r5, #12
 800a53c:	2d00      	cmp	r5, #0
 800a53e:	4606      	mov	r6, r0
 800a540:	db01      	blt.n	800a546 <_malloc_r+0x1a>
 800a542:	42a9      	cmp	r1, r5
 800a544:	d903      	bls.n	800a54e <_malloc_r+0x22>
 800a546:	230c      	movs	r3, #12
 800a548:	6033      	str	r3, [r6, #0]
 800a54a:	2000      	movs	r0, #0
 800a54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a54e:	f000 f87d 	bl	800a64c <__malloc_lock>
 800a552:	4921      	ldr	r1, [pc, #132]	; (800a5d8 <_malloc_r+0xac>)
 800a554:	680a      	ldr	r2, [r1, #0]
 800a556:	4614      	mov	r4, r2
 800a558:	b99c      	cbnz	r4, 800a582 <_malloc_r+0x56>
 800a55a:	4f20      	ldr	r7, [pc, #128]	; (800a5dc <_malloc_r+0xb0>)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	b923      	cbnz	r3, 800a56a <_malloc_r+0x3e>
 800a560:	4621      	mov	r1, r4
 800a562:	4630      	mov	r0, r6
 800a564:	f000 f862 	bl	800a62c <_sbrk_r>
 800a568:	6038      	str	r0, [r7, #0]
 800a56a:	4629      	mov	r1, r5
 800a56c:	4630      	mov	r0, r6
 800a56e:	f000 f85d 	bl	800a62c <_sbrk_r>
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	d123      	bne.n	800a5be <_malloc_r+0x92>
 800a576:	230c      	movs	r3, #12
 800a578:	6033      	str	r3, [r6, #0]
 800a57a:	4630      	mov	r0, r6
 800a57c:	f000 f86c 	bl	800a658 <__malloc_unlock>
 800a580:	e7e3      	b.n	800a54a <_malloc_r+0x1e>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	1b5b      	subs	r3, r3, r5
 800a586:	d417      	bmi.n	800a5b8 <_malloc_r+0x8c>
 800a588:	2b0b      	cmp	r3, #11
 800a58a:	d903      	bls.n	800a594 <_malloc_r+0x68>
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	441c      	add	r4, r3
 800a590:	6025      	str	r5, [r4, #0]
 800a592:	e004      	b.n	800a59e <_malloc_r+0x72>
 800a594:	6863      	ldr	r3, [r4, #4]
 800a596:	42a2      	cmp	r2, r4
 800a598:	bf0c      	ite	eq
 800a59a:	600b      	streq	r3, [r1, #0]
 800a59c:	6053      	strne	r3, [r2, #4]
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f000 f85a 	bl	800a658 <__malloc_unlock>
 800a5a4:	f104 000b 	add.w	r0, r4, #11
 800a5a8:	1d23      	adds	r3, r4, #4
 800a5aa:	f020 0007 	bic.w	r0, r0, #7
 800a5ae:	1ac2      	subs	r2, r0, r3
 800a5b0:	d0cc      	beq.n	800a54c <_malloc_r+0x20>
 800a5b2:	1a1b      	subs	r3, r3, r0
 800a5b4:	50a3      	str	r3, [r4, r2]
 800a5b6:	e7c9      	b.n	800a54c <_malloc_r+0x20>
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	6864      	ldr	r4, [r4, #4]
 800a5bc:	e7cc      	b.n	800a558 <_malloc_r+0x2c>
 800a5be:	1cc4      	adds	r4, r0, #3
 800a5c0:	f024 0403 	bic.w	r4, r4, #3
 800a5c4:	42a0      	cmp	r0, r4
 800a5c6:	d0e3      	beq.n	800a590 <_malloc_r+0x64>
 800a5c8:	1a21      	subs	r1, r4, r0
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f000 f82e 	bl	800a62c <_sbrk_r>
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	d1dd      	bne.n	800a590 <_malloc_r+0x64>
 800a5d4:	e7cf      	b.n	800a576 <_malloc_r+0x4a>
 800a5d6:	bf00      	nop
 800a5d8:	200008e4 	.word	0x200008e4
 800a5dc:	200008e8 	.word	0x200008e8

0800a5e0 <_realloc_r>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	4607      	mov	r7, r0
 800a5e4:	4614      	mov	r4, r2
 800a5e6:	460e      	mov	r6, r1
 800a5e8:	b921      	cbnz	r1, 800a5f4 <_realloc_r+0x14>
 800a5ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	f7ff bf9c 	b.w	800a52c <_malloc_r>
 800a5f4:	b922      	cbnz	r2, 800a600 <_realloc_r+0x20>
 800a5f6:	f7ff ff49 	bl	800a48c <_free_r>
 800a5fa:	4625      	mov	r5, r4
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a600:	f000 f830 	bl	800a664 <_malloc_usable_size_r>
 800a604:	42a0      	cmp	r0, r4
 800a606:	d20f      	bcs.n	800a628 <_realloc_r+0x48>
 800a608:	4621      	mov	r1, r4
 800a60a:	4638      	mov	r0, r7
 800a60c:	f7ff ff8e 	bl	800a52c <_malloc_r>
 800a610:	4605      	mov	r5, r0
 800a612:	2800      	cmp	r0, #0
 800a614:	d0f2      	beq.n	800a5fc <_realloc_r+0x1c>
 800a616:	4631      	mov	r1, r6
 800a618:	4622      	mov	r2, r4
 800a61a:	f7ff ff0f 	bl	800a43c <memcpy>
 800a61e:	4631      	mov	r1, r6
 800a620:	4638      	mov	r0, r7
 800a622:	f7ff ff33 	bl	800a48c <_free_r>
 800a626:	e7e9      	b.n	800a5fc <_realloc_r+0x1c>
 800a628:	4635      	mov	r5, r6
 800a62a:	e7e7      	b.n	800a5fc <_realloc_r+0x1c>

0800a62c <_sbrk_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4d06      	ldr	r5, [pc, #24]	; (800a648 <_sbrk_r+0x1c>)
 800a630:	2300      	movs	r3, #0
 800a632:	4604      	mov	r4, r0
 800a634:	4608      	mov	r0, r1
 800a636:	602b      	str	r3, [r5, #0]
 800a638:	f7fb fa80 	bl	8005b3c <_sbrk>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	d102      	bne.n	800a646 <_sbrk_r+0x1a>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	b103      	cbz	r3, 800a646 <_sbrk_r+0x1a>
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	bd38      	pop	{r3, r4, r5, pc}
 800a648:	20000c7c 	.word	0x20000c7c

0800a64c <__malloc_lock>:
 800a64c:	4801      	ldr	r0, [pc, #4]	; (800a654 <__malloc_lock+0x8>)
 800a64e:	f000 b811 	b.w	800a674 <__retarget_lock_acquire_recursive>
 800a652:	bf00      	nop
 800a654:	20000c84 	.word	0x20000c84

0800a658 <__malloc_unlock>:
 800a658:	4801      	ldr	r0, [pc, #4]	; (800a660 <__malloc_unlock+0x8>)
 800a65a:	f000 b80c 	b.w	800a676 <__retarget_lock_release_recursive>
 800a65e:	bf00      	nop
 800a660:	20000c84 	.word	0x20000c84

0800a664 <_malloc_usable_size_r>:
 800a664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a668:	1f18      	subs	r0, r3, #4
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	bfbc      	itt	lt
 800a66e:	580b      	ldrlt	r3, [r1, r0]
 800a670:	18c0      	addlt	r0, r0, r3
 800a672:	4770      	bx	lr

0800a674 <__retarget_lock_acquire_recursive>:
 800a674:	4770      	bx	lr

0800a676 <__retarget_lock_release_recursive>:
 800a676:	4770      	bx	lr

0800a678 <_init>:
 800a678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67a:	bf00      	nop
 800a67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a67e:	bc08      	pop	{r3}
 800a680:	469e      	mov	lr, r3
 800a682:	4770      	bx	lr

0800a684 <_fini>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	bf00      	nop
 800a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68a:	bc08      	pop	{r3}
 800a68c:	469e      	mov	lr, r3
 800a68e:	4770      	bx	lr
