
Test_katvoer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000041cc  0800a454  0800a454  0001a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e620  0800e620  00020888  2**0
                  CONTENTS
  4 .ARM          00000008  0800e620  0800e620  0001e620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e628  0800e628  00020888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e628  0800e628  0001e628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e62c  0800e62c  0001e62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000888  20000000  0800e630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000888  0800eeb8  00020888  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c84  0800eeb8  00020c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020888  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cfb  00000000  00000000  000208b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc6  00000000  00000000  000375b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0003a580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003b790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018627  00000000  00000000  0003c860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001713e  00000000  00000000  00054e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009146e  00000000  00000000  0006bfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  000fd488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000888 	.word	0x20000888
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a43c 	.word	0x0800a43c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000088c 	.word	0x2000088c
 80001dc:	0800a43c 	.word	0x0800a43c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <menu_draw>:




void menu_draw(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	switch(menu)
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <menu_draw+0x94>)
 80005ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <menu_draw+0x14>
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d016      	beq.n	80005e8 <menu_draw+0x40>
				break;
			}
			break;
	}

}
 80005ba:	e03c      	b.n	8000636 <menu_draw+0x8e>
		draw_main();
 80005bc:	f001 fa18 	bl	80019f0 <draw_main>
		switch(sub_menu)
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <menu_draw+0x98>)
 80005c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d832      	bhi.n	8000630 <menu_draw+0x88>
 80005ca:	a201      	add	r2, pc, #4	; (adr r2, 80005d0 <menu_draw+0x28>)
 80005cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d0:	080005e5 	.word	0x080005e5
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	080005e5 	.word	0x080005e5
 80005dc:	080005e5 	.word	0x080005e5
 80005e0:	080005e5 	.word	0x080005e5
			break;
 80005e4:	bf00      	nop
		break;
 80005e6:	e023      	b.n	8000630 <menu_draw+0x88>
			switch(sub_menu)
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <menu_draw+0x98>)
 80005ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d81f      	bhi.n	8000634 <menu_draw+0x8c>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <menu_draw+0x54>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000611 	.word	0x08000611
 8000600:	08000617 	.word	0x08000617
 8000604:	0800061d 	.word	0x0800061d
 8000608:	08000623 	.word	0x08000623
 800060c:	08000629 	.word	0x08000629
				draw_options();
 8000610:	f002 f9ee 	bl	80029f0 <draw_options>
				break;
 8000614:	e00b      	b.n	800062e <menu_draw+0x86>
				feed_set();
 8000616:	f002 fb6f 	bl	8002cf8 <feed_set>
				break;
 800061a:	e008      	b.n	800062e <menu_draw+0x86>
				calibrate_feed();
 800061c:	f003 f954 	bl	80038c8 <calibrate_feed>
				break;
 8000620:	e005      	b.n	800062e <menu_draw+0x86>
				set_time();
 8000622:	f002 fed3 	bl	80033cc <set_time>
				break;
 8000626:	e002      	b.n	800062e <menu_draw+0x86>
				draw_extra_options();
 8000628:	f001 fd3c 	bl	80020a4 <draw_extra_options>
				break;
 800062c:	bf00      	nop
			break;
 800062e:	e001      	b.n	8000634 <menu_draw+0x8c>
		break;
 8000630:	bf00      	nop
 8000632:	e000      	b.n	8000636 <menu_draw+0x8e>
			break;
 8000634:	bf00      	nop
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200008bc 	.word	0x200008bc
 8000640:	20000702 	.word	0x20000702

08000644 <selection_action>:

void selection_action(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	if(button_pressed==true)
 8000648:	4bab      	ldr	r3, [pc, #684]	; (80008f8 <selection_action+0x2b4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	f000 8460 	beq.w	8000f12 <selection_action+0x8ce>
	{
		//play_tune();
		switch(menu)
 8000652:	4baa      	ldr	r3, [pc, #680]	; (80008fc <selection_action+0x2b8>)
 8000654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000658:	2b02      	cmp	r3, #2
 800065a:	f000 8454 	beq.w	8000f06 <selection_action+0x8c2>
 800065e:	2b02      	cmp	r3, #2
 8000660:	f300 8454 	bgt.w	8000f0c <selection_action+0x8c8>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <selection_action+0x2c>
 8000668:	2b01      	cmp	r3, #1
 800066a:	d051      	beq.n	8000710 <selection_action+0xcc>
 800066c:	f000 bc4e 	b.w	8000f0c <selection_action+0x8c8>
		{
		case 0: //main menu
			switch(selection_wheel) // no submenu in main menu
 8000670:	4ba3      	ldr	r3, [pc, #652]	; (8000900 <selection_action+0x2bc>)
 8000672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067a:	d003      	beq.n	8000684 <selection_action+0x40>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d02a      	beq.n	80006d6 <selection_action+0x92>
					}
					update=1;
					selection_wheel=-1;
					break;
			}
			break;
 8000680:	f000 bc44 	b.w	8000f0c <selection_action+0x8c8>
				switch(selection)
 8000684:	4b9f      	ldr	r3, [pc, #636]	; (8000904 <selection_action+0x2c0>)
 8000686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d011      	beq.n	80006b2 <selection_action+0x6e>
 800068e:	2b02      	cmp	r3, #2
 8000690:	dc3c      	bgt.n	800070c <selection_action+0xc8>
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <selection_action+0x58>
 8000696:	2b01      	cmp	r3, #1
 8000698:	d004      	beq.n	80006a4 <selection_action+0x60>
				break;
 800069a:	e037      	b.n	800070c <selection_action+0xc8>
					menu=1; // options menu (it makes more sense from this point onward)
 800069c:	4b97      	ldr	r3, [pc, #604]	; (80008fc <selection_action+0x2b8>)
 800069e:	2201      	movs	r2, #1
 80006a0:	801a      	strh	r2, [r3, #0]
					break;
 80006a2:	e017      	b.n	80006d4 <selection_action+0x90>
					selection_wheel=0;
 80006a4:	4b96      	ldr	r3, [pc, #600]	; (8000900 <selection_action+0x2bc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	801a      	strh	r2, [r3, #0]
					selection=0;
 80006aa:	4b96      	ldr	r3, [pc, #600]	; (8000904 <selection_action+0x2c0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	801a      	strh	r2, [r3, #0]
					break;
 80006b0:	e010      	b.n	80006d4 <selection_action+0x90>
					timeout_old=TIM2->CNT-timeout_time-10;
 80006b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b8:	4a93      	ldr	r2, [pc, #588]	; (8000908 <selection_action+0x2c4>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	1a9b      	subs	r3, r3, r2
 80006be:	3b0a      	subs	r3, #10
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b92      	ldr	r3, [pc, #584]	; (800090c <selection_action+0x2c8>)
 80006c4:	601a      	str	r2, [r3, #0]
					screen_off=1;
 80006c6:	4b92      	ldr	r3, [pc, #584]	; (8000910 <selection_action+0x2cc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	801a      	strh	r2, [r3, #0]
					HAL_Delay(100);
 80006cc:	2064      	movs	r0, #100	; 0x64
 80006ce:	f005 fed9 	bl	8006484 <HAL_Delay>
					break;
 80006d2:	bf00      	nop
				break;
 80006d4:	e01a      	b.n	800070c <selection_action+0xc8>
					if(selection==1)
 80006d6:	4b8b      	ldr	r3, [pc, #556]	; (8000904 <selection_action+0x2c0>)
 80006d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10d      	bne.n	80006fc <selection_action+0xb8>
						feed_status=1-feed_status;
 80006e0:	4b8c      	ldr	r3, [pc, #560]	; (8000914 <selection_action+0x2d0>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f1c3 0301 	rsb	r3, r3, #1
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf14      	ite	ne
 80006ec:	2301      	movne	r3, #1
 80006ee:	2300      	moveq	r3, #0
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b88      	ldr	r3, [pc, #544]	; (8000914 <selection_action+0x2d0>)
 80006f4:	701a      	strb	r2, [r3, #0]
						write_vars(buffer);
 80006f6:	4888      	ldr	r0, [pc, #544]	; (8000918 <selection_action+0x2d4>)
 80006f8:	f000 fdfe 	bl	80012f8 <write_vars>
					update=1;
 80006fc:	4b87      	ldr	r3, [pc, #540]	; (800091c <selection_action+0x2d8>)
 80006fe:	2201      	movs	r2, #1
 8000700:	801a      	strh	r2, [r3, #0]
					selection_wheel=-1;
 8000702:	4b7f      	ldr	r3, [pc, #508]	; (8000900 <selection_action+0x2bc>)
 8000704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000708:	801a      	strh	r2, [r3, #0]
					break;
 800070a:	e000      	b.n	800070e <selection_action+0xca>
				break;
 800070c:	bf00      	nop
			break;
 800070e:	e3fd      	b.n	8000f0c <selection_action+0x8c8>


			case 1: //options menu
				switch(sub_menu)
 8000710:	4b83      	ldr	r3, [pc, #524]	; (8000920 <selection_action+0x2dc>)
 8000712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000716:	3301      	adds	r3, #1
 8000718:	2b04      	cmp	r3, #4
 800071a:	f200 83f6 	bhi.w	8000f0a <selection_action+0x8c6>
 800071e:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <selection_action+0xe0>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	08000739 	.word	0x08000739
 8000728:	080007f7 	.word	0x080007f7
 800072c:	08000b25 	.word	0x08000b25
 8000730:	08000c47 	.word	0x08000c47
 8000734:	08000d23 	.word	0x08000d23
				{
				case -1: //no sub_menu selected
					switch(selection)
 8000738:	4b72      	ldr	r3, [pc, #456]	; (8000904 <selection_action+0x2c0>)
 800073a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800073e:	2b05      	cmp	r3, #5
 8000740:	f200 83d9 	bhi.w	8000ef6 <selection_action+0x8b2>
 8000744:	a201      	add	r2, pc, #4	; (adr r2, 800074c <selection_action+0x108>)
 8000746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074a:	bf00      	nop
 800074c:	08000765 	.word	0x08000765
 8000750:	0800076d 	.word	0x0800076d
 8000754:	0800077b 	.word	0x0800077b
 8000758:	08000789 	.word	0x08000789
 800075c:	08000797 	.word	0x08000797
 8000760:	080007df 	.word	0x080007df
					{
					case 0:
						//voertijden/hoeveelheden
						sub_menu=0;
 8000764:	4b6e      	ldr	r3, [pc, #440]	; (8000920 <selection_action+0x2dc>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
						break;
 800076a:	e043      	b.n	80007f4 <selection_action+0x1b0>

					case 1:
						sub_menu=1;
 800076c:	4b6c      	ldr	r3, [pc, #432]	; (8000920 <selection_action+0x2dc>)
 800076e:	2201      	movs	r2, #1
 8000770:	801a      	strh	r2, [r3, #0]
						selection=0;
 8000772:	4b64      	ldr	r3, [pc, #400]	; (8000904 <selection_action+0x2c0>)
 8000774:	2200      	movs	r2, #0
 8000776:	801a      	strh	r2, [r3, #0]
						break;
 8000778:	e03c      	b.n	80007f4 <selection_action+0x1b0>

					case 2:
						sub_menu=2;
 800077a:	4b69      	ldr	r3, [pc, #420]	; (8000920 <selection_action+0x2dc>)
 800077c:	2202      	movs	r2, #2
 800077e:	801a      	strh	r2, [r3, #0]
						selection=0;
 8000780:	4b60      	ldr	r3, [pc, #384]	; (8000904 <selection_action+0x2c0>)
 8000782:	2200      	movs	r2, #0
 8000784:	801a      	strh	r2, [r3, #0]
						break;
 8000786:	e035      	b.n	80007f4 <selection_action+0x1b0>

					case 3:
						sub_menu=3;
 8000788:	4b65      	ldr	r3, [pc, #404]	; (8000920 <selection_action+0x2dc>)
 800078a:	2203      	movs	r2, #3
 800078c:	801a      	strh	r2, [r3, #0]
						selection=0;
 800078e:	4b5d      	ldr	r3, [pc, #372]	; (8000904 <selection_action+0x2c0>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
						break;
 8000794:	e02e      	b.n	80007f4 <selection_action+0x1b0>

					case 4:
						TFT9341_FillScreen(0x0000);
 8000796:	2000      	movs	r0, #0
 8000798:	f004 fa78 	bl	8004c8c <TFT9341_FillScreen>
						TFT9341_SetTextColor(0xffff);
 800079c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007a0:	f004 facc 	bl	8004d3c <TFT9341_SetTextColor>
						TFT9341_SetFont(&Font20);
 80007a4:	485f      	ldr	r0, [pc, #380]	; (8000924 <selection_action+0x2e0>)
 80007a6:	f004 fae9 	bl	8004d7c <TFT9341_SetFont>
						TFT9341_String(74,95, "Opgeslagen!");
 80007aa:	4a5f      	ldr	r2, [pc, #380]	; (8000928 <selection_action+0x2e4>)
 80007ac:	215f      	movs	r1, #95	; 0x5f
 80007ae:	204a      	movs	r0, #74	; 0x4a
 80007b0:	f004 fba2 	bl	8004ef8 <TFT9341_String>
						write_vars(buffer);
 80007b4:	4858      	ldr	r0, [pc, #352]	; (8000918 <selection_action+0x2d4>)
 80007b6:	f000 fd9f 	bl	80012f8 <write_vars>
						HAL_Delay(1000);
 80007ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007be:	f005 fe61 	bl	8006484 <HAL_Delay>
						menu=1;
 80007c2:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <selection_action+0x2b8>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	801a      	strh	r2, [r3, #0]
						sub_menu=-1;
 80007c8:	4b55      	ldr	r3, [pc, #340]	; (8000920 <selection_action+0x2dc>)
 80007ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ce:	801a      	strh	r2, [r3, #0]
						selection=4;
 80007d0:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <selection_action+0x2c0>)
 80007d2:	2204      	movs	r2, #4
 80007d4:	801a      	strh	r2, [r3, #0]
						update=1;
 80007d6:	4b51      	ldr	r3, [pc, #324]	; (800091c <selection_action+0x2d8>)
 80007d8:	2201      	movs	r2, #1
 80007da:	801a      	strh	r2, [r3, #0]
						break;
 80007dc:	e00a      	b.n	80007f4 <selection_action+0x1b0>

					case 5:


						menu=0;
 80007de:	4b47      	ldr	r3, [pc, #284]	; (80008fc <selection_action+0x2b8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	801a      	strh	r2, [r3, #0]
						sub_menu=-1;
 80007e4:	4b4e      	ldr	r3, [pc, #312]	; (8000920 <selection_action+0x2dc>)
 80007e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ea:	801a      	strh	r2, [r3, #0]
						selection=0;
 80007ec:	4b45      	ldr	r3, [pc, #276]	; (8000904 <selection_action+0x2c0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	801a      	strh	r2, [r3, #0]
						break;
 80007f2:	bf00      	nop
					}
					break;
 80007f4:	e37f      	b.n	8000ef6 <selection_action+0x8b2>

					case 0: //voertijden/hoeveelheden
						switch(selection_wheel)
 80007f6:	4b42      	ldr	r3, [pc, #264]	; (8000900 <selection_action+0x2bc>)
 80007f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fc:	3301      	adds	r3, #1
 80007fe:	2b05      	cmp	r3, #5
 8000800:	f200 837b 	bhi.w	8000efa <selection_action+0x8b6>
 8000804:	a201      	add	r2, pc, #4	; (adr r2, 800080c <selection_action+0x1c8>)
 8000806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080a:	bf00      	nop
 800080c:	08000825 	.word	0x08000825
 8000810:	080008dd 	.word	0x080008dd
 8000814:	08000935 	.word	0x08000935
 8000818:	080009ad 	.word	0x080009ad
 800081c:	08000a25 	.word	0x08000a25
 8000820:	08000a9b 	.word	0x08000a9b
						{
						case -1: // regular interface selection
							if(selection<=feed_number)
 8000824:	4b37      	ldr	r3, [pc, #220]	; (8000904 <selection_action+0x2c0>)
 8000826:	f9b3 2000 	ldrsh.w	r2, [r3]
 800082a:	4b40      	ldr	r3, [pc, #256]	; (800092c <selection_action+0x2e8>)
 800082c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000830:	429a      	cmp	r2, r3
 8000832:	dc3e      	bgt.n	80008b2 <selection_action+0x26e>
							{
								switch(selection)
 8000834:	4b33      	ldr	r3, [pc, #204]	; (8000904 <selection_action+0x2c0>)
 8000836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800083a:	2b04      	cmp	r3, #4
 800083c:	d83a      	bhi.n	80008b4 <selection_action+0x270>
 800083e:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <selection_action+0x200>)
 8000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000844:	08000859 	.word	0x08000859
 8000848:	0800086b 	.word	0x0800086b
 800084c:	0800087d 	.word	0x0800087d
 8000850:	0800088f 	.word	0x0800088f
 8000854:	080008a1 	.word	0x080008a1
								{
								case 0:
									selection_wheel=0;
 8000858:	4b29      	ldr	r3, [pc, #164]	; (8000900 <selection_action+0x2bc>)
 800085a:	2200      	movs	r2, #0
 800085c:	801a      	strh	r2, [r3, #0]
									selection=feed_number;
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <selection_action+0x2e8>)
 8000860:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <selection_action+0x2c0>)
 8000866:	801a      	strh	r2, [r3, #0]
									break;
 8000868:	e024      	b.n	80008b4 <selection_action+0x270>
								case 1:
									selection_wheel=1;
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <selection_action+0x2bc>)
 800086c:	2201      	movs	r2, #1
 800086e:	801a      	strh	r2, [r3, #0]
									selection=feed_time[0][0];
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <selection_action+0x2ec>)
 8000872:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <selection_action+0x2c0>)
 8000878:	801a      	strh	r2, [r3, #0]
									break;
 800087a:	e01b      	b.n	80008b4 <selection_action+0x270>
								case 2:
									selection_wheel=2;
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <selection_action+0x2bc>)
 800087e:	2202      	movs	r2, #2
 8000880:	801a      	strh	r2, [r3, #0]
									selection=feed_time[1][0];
 8000882:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <selection_action+0x2ec>)
 8000884:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <selection_action+0x2c0>)
 800088a:	801a      	strh	r2, [r3, #0]
									break;
 800088c:	e012      	b.n	80008b4 <selection_action+0x270>
								case 3:
									selection_wheel=3;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <selection_action+0x2bc>)
 8000890:	2203      	movs	r2, #3
 8000892:	801a      	strh	r2, [r3, #0]
									selection=feed_time[2][0];
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <selection_action+0x2ec>)
 8000896:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <selection_action+0x2c0>)
 800089c:	801a      	strh	r2, [r3, #0]
									break;
 800089e:	e009      	b.n	80008b4 <selection_action+0x270>
								case 4:
									selection_wheel=4;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <selection_action+0x2bc>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	801a      	strh	r2, [r3, #0]
									selection=feed_time[3][0];
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <selection_action+0x2ec>)
 80008a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <selection_action+0x2c0>)
 80008ae:	801a      	strh	r2, [r3, #0]
									break;
 80008b0:	e000      	b.n	80008b4 <selection_action+0x270>
								}
							}
 80008b2:	bf00      	nop
							if(selection==feed_number+1) // variable position of return button
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <selection_action+0x2c0>)
 80008b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <selection_action+0x2e8>)
 80008be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008c2:	3301      	adds	r3, #1
 80008c4:	429a      	cmp	r2, r3
 80008c6:	f040 8123 	bne.w	8000b10 <selection_action+0x4cc>
							{
								sub_menu=-1;
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <selection_action+0x2dc>)
 80008cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d0:	801a      	strh	r2, [r3, #0]
								selection_wheel=-1;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <selection_action+0x2bc>)
 80008d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d8:	801a      	strh	r2, [r3, #0]
							}
							break;
 80008da:	e119      	b.n	8000b10 <selection_action+0x4cc>

						case 0:
							feed_number=selection;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <selection_action+0x2c0>)
 80008de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <selection_action+0x2e8>)
 80008e4:	801a      	strh	r2, [r3, #0]
							selection_wheel=-1;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <selection_action+0x2bc>)
 80008e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ec:	801a      	strh	r2, [r3, #0]
							update=1;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <selection_action+0x2d8>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	801a      	strh	r2, [r3, #0]
							break;
 80008f4:	e115      	b.n	8000b22 <selection_action+0x4de>
 80008f6:	bf00      	nop
 80008f8:	200008cc 	.word	0x200008cc
 80008fc:	200008bc 	.word	0x200008bc
 8000900:	2000070c 	.word	0x2000070c
 8000904:	20000aa8 	.word	0x20000aa8
 8000908:	200008c4 	.word	0x200008c4
 800090c:	200008c0 	.word	0x200008c0
 8000910:	200008ce 	.word	0x200008ce
 8000914:	200006fa 	.word	0x200006fa
 8000918:	20000b08 	.word	0x20000b08
 800091c:	200008b4 	.word	0x200008b4
 8000920:	20000702 	.word	0x20000702
 8000924:	20000014 	.word	0x20000014
 8000928:	0800a454 	.word	0x0800a454
 800092c:	200006fc 	.word	0x200006fc
 8000930:	20000a44 	.word	0x20000a44

						case 1: // adjusting first feed time
							if(skip==0)
 8000934:	4b9a      	ldr	r3, [pc, #616]	; (8000ba0 <selection_action+0x55c>)
 8000936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d10e      	bne.n	800095c <selection_action+0x318>
							{
								skip++;
 800093e:	4b98      	ldr	r3, [pc, #608]	; (8000ba0 <selection_action+0x55c>)
 8000940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000944:	b29b      	uxth	r3, r3
 8000946:	3301      	adds	r3, #1
 8000948:	b29b      	uxth	r3, r3
 800094a:	b21a      	sxth	r2, r3
 800094c:	4b94      	ldr	r3, [pc, #592]	; (8000ba0 <selection_action+0x55c>)
 800094e:	801a      	strh	r2, [r3, #0]
								selection=feed_time[0][1];
 8000950:	4b94      	ldr	r3, [pc, #592]	; (8000ba4 <selection_action+0x560>)
 8000952:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000956:	4b94      	ldr	r3, [pc, #592]	; (8000ba8 <selection_action+0x564>)
 8000958:	801a      	strh	r2, [r3, #0]
								selection_wheel=-1;
								selection=1;
								skip=0;
								update=1;
							}
							break;
 800095a:	e0db      	b.n	8000b14 <selection_action+0x4d0>
							else if(skip==1)
 800095c:	4b90      	ldr	r3, [pc, #576]	; (8000ba0 <selection_action+0x55c>)
 800095e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d10e      	bne.n	8000984 <selection_action+0x340>
								skip++;
 8000966:	4b8e      	ldr	r3, [pc, #568]	; (8000ba0 <selection_action+0x55c>)
 8000968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800096c:	b29b      	uxth	r3, r3
 800096e:	3301      	adds	r3, #1
 8000970:	b29b      	uxth	r3, r3
 8000972:	b21a      	sxth	r2, r3
 8000974:	4b8a      	ldr	r3, [pc, #552]	; (8000ba0 <selection_action+0x55c>)
 8000976:	801a      	strh	r2, [r3, #0]
								selection=feed_amount[0];
 8000978:	4b8c      	ldr	r3, [pc, #560]	; (8000bac <selection_action+0x568>)
 800097a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800097e:	4b8a      	ldr	r3, [pc, #552]	; (8000ba8 <selection_action+0x564>)
 8000980:	801a      	strh	r2, [r3, #0]
							break;
 8000982:	e0c7      	b.n	8000b14 <selection_action+0x4d0>
							else if(skip==2)
 8000984:	4b86      	ldr	r3, [pc, #536]	; (8000ba0 <selection_action+0x55c>)
 8000986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098a:	2b02      	cmp	r3, #2
 800098c:	f040 80c2 	bne.w	8000b14 <selection_action+0x4d0>
								selection_wheel=-1;
 8000990:	4b87      	ldr	r3, [pc, #540]	; (8000bb0 <selection_action+0x56c>)
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	801a      	strh	r2, [r3, #0]
								selection=1;
 8000998:	4b83      	ldr	r3, [pc, #524]	; (8000ba8 <selection_action+0x564>)
 800099a:	2201      	movs	r2, #1
 800099c:	801a      	strh	r2, [r3, #0]
								skip=0;
 800099e:	4b80      	ldr	r3, [pc, #512]	; (8000ba0 <selection_action+0x55c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	801a      	strh	r2, [r3, #0]
								update=1;
 80009a4:	4b83      	ldr	r3, [pc, #524]	; (8000bb4 <selection_action+0x570>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	801a      	strh	r2, [r3, #0]
							break;
 80009aa:	e0b3      	b.n	8000b14 <selection_action+0x4d0>
						case 2: // adjusting second feed time
							if(skip==0)
 80009ac:	4b7c      	ldr	r3, [pc, #496]	; (8000ba0 <selection_action+0x55c>)
 80009ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <selection_action+0x390>
							{
								skip++;
 80009b6:	4b7a      	ldr	r3, [pc, #488]	; (8000ba0 <selection_action+0x55c>)
 80009b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	3301      	adds	r3, #1
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	4b76      	ldr	r3, [pc, #472]	; (8000ba0 <selection_action+0x55c>)
 80009c6:	801a      	strh	r2, [r3, #0]
								selection=feed_time[1][1];
 80009c8:	4b76      	ldr	r3, [pc, #472]	; (8000ba4 <selection_action+0x560>)
 80009ca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80009ce:	4b76      	ldr	r3, [pc, #472]	; (8000ba8 <selection_action+0x564>)
 80009d0:	801a      	strh	r2, [r3, #0]
								selection_wheel=-1;
								selection=2;
								skip=0;
								update=1;
							}
							break;
 80009d2:	e0a1      	b.n	8000b18 <selection_action+0x4d4>
							else if(skip==1)
 80009d4:	4b72      	ldr	r3, [pc, #456]	; (8000ba0 <selection_action+0x55c>)
 80009d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d10e      	bne.n	80009fc <selection_action+0x3b8>
								skip++;
 80009de:	4b70      	ldr	r3, [pc, #448]	; (8000ba0 <selection_action+0x55c>)
 80009e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	3301      	adds	r3, #1
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b6c      	ldr	r3, [pc, #432]	; (8000ba0 <selection_action+0x55c>)
 80009ee:	801a      	strh	r2, [r3, #0]
								selection=feed_amount[1];
 80009f0:	4b6e      	ldr	r3, [pc, #440]	; (8000bac <selection_action+0x568>)
 80009f2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80009f6:	4b6c      	ldr	r3, [pc, #432]	; (8000ba8 <selection_action+0x564>)
 80009f8:	801a      	strh	r2, [r3, #0]
							break;
 80009fa:	e08d      	b.n	8000b18 <selection_action+0x4d4>
							else if(skip==2)
 80009fc:	4b68      	ldr	r3, [pc, #416]	; (8000ba0 <selection_action+0x55c>)
 80009fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	f040 8088 	bne.w	8000b18 <selection_action+0x4d4>
								selection_wheel=-1;
 8000a08:	4b69      	ldr	r3, [pc, #420]	; (8000bb0 <selection_action+0x56c>)
 8000a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0e:	801a      	strh	r2, [r3, #0]
								selection=2;
 8000a10:	4b65      	ldr	r3, [pc, #404]	; (8000ba8 <selection_action+0x564>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	801a      	strh	r2, [r3, #0]
								skip=0;
 8000a16:	4b62      	ldr	r3, [pc, #392]	; (8000ba0 <selection_action+0x55c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	801a      	strh	r2, [r3, #0]
								update=1;
 8000a1c:	4b65      	ldr	r3, [pc, #404]	; (8000bb4 <selection_action+0x570>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	801a      	strh	r2, [r3, #0]
							break;
 8000a22:	e079      	b.n	8000b18 <selection_action+0x4d4>
						case 3: // adjusting second feed time
							if(skip==0)
 8000a24:	4b5e      	ldr	r3, [pc, #376]	; (8000ba0 <selection_action+0x55c>)
 8000a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10e      	bne.n	8000a4c <selection_action+0x408>
							{
								skip++;
 8000a2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ba0 <selection_action+0x55c>)
 8000a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	3301      	adds	r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	4b58      	ldr	r3, [pc, #352]	; (8000ba0 <selection_action+0x55c>)
 8000a3e:	801a      	strh	r2, [r3, #0]
								selection=feed_time[2][1];
 8000a40:	4b58      	ldr	r3, [pc, #352]	; (8000ba4 <selection_action+0x560>)
 8000a42:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000a46:	4b58      	ldr	r3, [pc, #352]	; (8000ba8 <selection_action+0x564>)
 8000a48:	801a      	strh	r2, [r3, #0]
								selection_wheel=-1;
								selection=3;
								skip=0;
								update=1;
							}
							break;
 8000a4a:	e067      	b.n	8000b1c <selection_action+0x4d8>
							else if(skip==1)
 8000a4c:	4b54      	ldr	r3, [pc, #336]	; (8000ba0 <selection_action+0x55c>)
 8000a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d10e      	bne.n	8000a74 <selection_action+0x430>
								skip++;
 8000a56:	4b52      	ldr	r3, [pc, #328]	; (8000ba0 <selection_action+0x55c>)
 8000a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	3301      	adds	r3, #1
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <selection_action+0x55c>)
 8000a66:	801a      	strh	r2, [r3, #0]
								selection=feed_amount[2];
 8000a68:	4b50      	ldr	r3, [pc, #320]	; (8000bac <selection_action+0x568>)
 8000a6a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000a6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ba8 <selection_action+0x564>)
 8000a70:	801a      	strh	r2, [r3, #0]
							break;
 8000a72:	e053      	b.n	8000b1c <selection_action+0x4d8>
							else if(skip==2)
 8000a74:	4b4a      	ldr	r3, [pc, #296]	; (8000ba0 <selection_action+0x55c>)
 8000a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d14e      	bne.n	8000b1c <selection_action+0x4d8>
								selection_wheel=-1;
 8000a7e:	4b4c      	ldr	r3, [pc, #304]	; (8000bb0 <selection_action+0x56c>)
 8000a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a84:	801a      	strh	r2, [r3, #0]
								selection=3;
 8000a86:	4b48      	ldr	r3, [pc, #288]	; (8000ba8 <selection_action+0x564>)
 8000a88:	2203      	movs	r2, #3
 8000a8a:	801a      	strh	r2, [r3, #0]
								skip=0;
 8000a8c:	4b44      	ldr	r3, [pc, #272]	; (8000ba0 <selection_action+0x55c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	801a      	strh	r2, [r3, #0]
								update=1;
 8000a92:	4b48      	ldr	r3, [pc, #288]	; (8000bb4 <selection_action+0x570>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	801a      	strh	r2, [r3, #0]
							break;
 8000a98:	e040      	b.n	8000b1c <selection_action+0x4d8>
						case 4: // adjusting second feed time
							if(skip==0)
 8000a9a:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <selection_action+0x55c>)
 8000a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d10e      	bne.n	8000ac2 <selection_action+0x47e>
							{
								skip++;
 8000aa4:	4b3e      	ldr	r3, [pc, #248]	; (8000ba0 <selection_action+0x55c>)
 8000aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	3301      	adds	r3, #1
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b21a      	sxth	r2, r3
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <selection_action+0x55c>)
 8000ab4:	801a      	strh	r2, [r3, #0]
								selection=feed_time[3][1];
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <selection_action+0x560>)
 8000ab8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000abc:	4b3a      	ldr	r3, [pc, #232]	; (8000ba8 <selection_action+0x564>)
 8000abe:	801a      	strh	r2, [r3, #0]
								selection_wheel=-1;
								selection=4;
								skip=0;
								update=1;
							}
							break;
 8000ac0:	e02e      	b.n	8000b20 <selection_action+0x4dc>
							else if(skip==1)
 8000ac2:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <selection_action+0x55c>)
 8000ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10e      	bne.n	8000aea <selection_action+0x4a6>
								skip++;
 8000acc:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <selection_action+0x55c>)
 8000ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b21a      	sxth	r2, r3
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <selection_action+0x55c>)
 8000adc:	801a      	strh	r2, [r3, #0]
								selection=feed_amount[3];
 8000ade:	4b33      	ldr	r3, [pc, #204]	; (8000bac <selection_action+0x568>)
 8000ae0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000ae4:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <selection_action+0x564>)
 8000ae6:	801a      	strh	r2, [r3, #0]
							break;
 8000ae8:	e01a      	b.n	8000b20 <selection_action+0x4dc>
							else if(skip==2)
 8000aea:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <selection_action+0x55c>)
 8000aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d115      	bne.n	8000b20 <selection_action+0x4dc>
								selection_wheel=-1;
 8000af4:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <selection_action+0x56c>)
 8000af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afa:	801a      	strh	r2, [r3, #0]
								selection=4;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <selection_action+0x564>)
 8000afe:	2204      	movs	r2, #4
 8000b00:	801a      	strh	r2, [r3, #0]
								skip=0;
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <selection_action+0x55c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	801a      	strh	r2, [r3, #0]
								update=1;
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <selection_action+0x570>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	801a      	strh	r2, [r3, #0]
							break;
 8000b0e:	e007      	b.n	8000b20 <selection_action+0x4dc>
							break;
 8000b10:	bf00      	nop
 8000b12:	e1f2      	b.n	8000efa <selection_action+0x8b6>
							break;
 8000b14:	bf00      	nop
 8000b16:	e1f0      	b.n	8000efa <selection_action+0x8b6>
							break;
 8000b18:	bf00      	nop
 8000b1a:	e1ee      	b.n	8000efa <selection_action+0x8b6>
							break;
 8000b1c:	bf00      	nop
 8000b1e:	e1ec      	b.n	8000efa <selection_action+0x8b6>
							break;
 8000b20:	bf00      	nop
						}
						break;
 8000b22:	e1ea      	b.n	8000efa <selection_action+0x8b6>

						case 1: //voer calibreren
							if(skip==4)
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <selection_action+0x55c>)
 8000b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d10b      	bne.n	8000b46 <selection_action+0x502>
							{
								skip++;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <selection_action+0x55c>)
 8000b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	3301      	adds	r3, #1
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b21a      	sxth	r2, r3
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <selection_action+0x55c>)
 8000b3e:	801a      	strh	r2, [r3, #0]
								update=1;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <selection_action+0x570>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	801a      	strh	r2, [r3, #0]
							}
							switch(selection)
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <selection_action+0x564>)
 8000b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <selection_action+0x512>
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d06e      	beq.n	8000c32 <selection_action+0x5ee>
								sub_menu=-1;
								skip=0;
								break;
							}

							break;
 8000b54:	e1d6      	b.n	8000f04 <selection_action+0x8c0>
								if(skip==0)
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <selection_action+0x55c>)
 8000b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10c      	bne.n	8000b7a <selection_action+0x536>
									skip++;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <selection_action+0x55c>)
 8000b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <selection_action+0x55c>)
 8000b70:	801a      	strh	r2, [r3, #0]
									update=1;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <selection_action+0x570>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	801a      	strh	r2, [r3, #0]
								break;
 8000b78:	e063      	b.n	8000c42 <selection_action+0x5fe>
								else if(skip==1)
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <selection_action+0x55c>)
 8000b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d119      	bne.n	8000bb8 <selection_action+0x574>
									skip++;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <selection_action+0x55c>)
 8000b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <selection_action+0x55c>)
 8000b94:	801a      	strh	r2, [r3, #0]
									update=1;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <selection_action+0x570>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	801a      	strh	r2, [r3, #0]
								break;
 8000b9c:	e051      	b.n	8000c42 <selection_action+0x5fe>
 8000b9e:	bf00      	nop
 8000ba0:	200008a4 	.word	0x200008a4
 8000ba4:	20000a44 	.word	0x20000a44
 8000ba8:	20000aa8 	.word	0x20000aa8
 8000bac:	20000b20 	.word	0x20000b20
 8000bb0:	2000070c 	.word	0x2000070c
 8000bb4:	200008b4 	.word	0x200008b4
								else if(skip==2)
 8000bb8:	4ba2      	ldr	r3, [pc, #648]	; (8000e44 <selection_action+0x800>)
 8000bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d10c      	bne.n	8000bdc <selection_action+0x598>
									skip++;
 8000bc2:	4ba0      	ldr	r3, [pc, #640]	; (8000e44 <selection_action+0x800>)
 8000bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	4b9c      	ldr	r3, [pc, #624]	; (8000e44 <selection_action+0x800>)
 8000bd2:	801a      	strh	r2, [r3, #0]
									update=1;
 8000bd4:	4b9c      	ldr	r3, [pc, #624]	; (8000e48 <selection_action+0x804>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	801a      	strh	r2, [r3, #0]
								break;
 8000bda:	e032      	b.n	8000c42 <selection_action+0x5fe>
								else if(skip==3)
 8000bdc:	4b99      	ldr	r3, [pc, #612]	; (8000e44 <selection_action+0x800>)
 8000bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d115      	bne.n	8000c12 <selection_action+0x5ce>
									skip++;
 8000be6:	4b97      	ldr	r3, [pc, #604]	; (8000e44 <selection_action+0x800>)
 8000be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	4b93      	ldr	r3, [pc, #588]	; (8000e44 <selection_action+0x800>)
 8000bf6:	801a      	strh	r2, [r3, #0]
									update=1;
 8000bf8:	4b93      	ldr	r3, [pc, #588]	; (8000e48 <selection_action+0x804>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	801a      	strh	r2, [r3, #0]
									selection=feed_cal;
 8000bfe:	4b93      	ldr	r3, [pc, #588]	; (8000e4c <selection_action+0x808>)
 8000c00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c04:	4b92      	ldr	r3, [pc, #584]	; (8000e50 <selection_action+0x80c>)
 8000c06:	801a      	strh	r2, [r3, #0]
									feed_cat(20000);
 8000c08:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000c0c:	f000 face 	bl	80011ac <feed_cat>
								break;
 8000c10:	e017      	b.n	8000c42 <selection_action+0x5fe>
								else if(skip==5)
 8000c12:	4b8c      	ldr	r3, [pc, #560]	; (8000e44 <selection_action+0x800>)
 8000c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c18:	2b05      	cmp	r3, #5
 8000c1a:	d112      	bne.n	8000c42 <selection_action+0x5fe>
									update=1;
 8000c1c:	4b8a      	ldr	r3, [pc, #552]	; (8000e48 <selection_action+0x804>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	801a      	strh	r2, [r3, #0]
									skip=0;
 8000c22:	4b88      	ldr	r3, [pc, #544]	; (8000e44 <selection_action+0x800>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	801a      	strh	r2, [r3, #0]
									sub_menu=-1;
 8000c28:	4b8a      	ldr	r3, [pc, #552]	; (8000e54 <selection_action+0x810>)
 8000c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c2e:	801a      	strh	r2, [r3, #0]
								break;
 8000c30:	e007      	b.n	8000c42 <selection_action+0x5fe>
								sub_menu=-1;
 8000c32:	4b88      	ldr	r3, [pc, #544]	; (8000e54 <selection_action+0x810>)
 8000c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c38:	801a      	strh	r2, [r3, #0]
								skip=0;
 8000c3a:	4b82      	ldr	r3, [pc, #520]	; (8000e44 <selection_action+0x800>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	801a      	strh	r2, [r3, #0]
								break;
 8000c40:	e000      	b.n	8000c44 <selection_action+0x600>
								break;
 8000c42:	bf00      	nop
							break;
 8000c44:	e15e      	b.n	8000f04 <selection_action+0x8c0>


							case 2: //tijd instellen
								switch(selection_wheel)
 8000c46:	4b84      	ldr	r3, [pc, #528]	; (8000e58 <selection_action+0x814>)
 8000c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d056      	beq.n	8000cfe <selection_action+0x6ba>
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	f300 8154 	bgt.w	8000efe <selection_action+0x8ba>
 8000c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5a:	d002      	beq.n	8000c62 <selection_action+0x61e>
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d024      	beq.n	8000caa <selection_action+0x666>
										update=1;
										DS3231_SetTime(&rtc);
										break;

								}
								break; // tijd instellen break
 8000c60:	e14d      	b.n	8000efe <selection_action+0x8ba>
									switch(selection)
 8000c62:	4b7b      	ldr	r3, [pc, #492]	; (8000e50 <selection_action+0x80c>)
 8000c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d018      	beq.n	8000c9e <selection_action+0x65a>
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	dc54      	bgt.n	8000d1a <selection_action+0x6d6>
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <selection_action+0x636>
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d009      	beq.n	8000c8c <selection_action+0x648>
									break;
 8000c78:	e04f      	b.n	8000d1a <selection_action+0x6d6>
										selection_wheel=0;
 8000c7a:	4b77      	ldr	r3, [pc, #476]	; (8000e58 <selection_action+0x814>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	801a      	strh	r2, [r3, #0]
										selection=rtc.Hour;
 8000c80:	4b76      	ldr	r3, [pc, #472]	; (8000e5c <selection_action+0x818>)
 8000c82:	791b      	ldrb	r3, [r3, #4]
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	4b72      	ldr	r3, [pc, #456]	; (8000e50 <selection_action+0x80c>)
 8000c88:	801a      	strh	r2, [r3, #0]
										break;
 8000c8a:	e00d      	b.n	8000ca8 <selection_action+0x664>
										selection_wheel=1;
 8000c8c:	4b72      	ldr	r3, [pc, #456]	; (8000e58 <selection_action+0x814>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	801a      	strh	r2, [r3, #0]
										selection=rtc.DaysOfWeek;
 8000c92:	4b72      	ldr	r3, [pc, #456]	; (8000e5c <selection_action+0x818>)
 8000c94:	78db      	ldrb	r3, [r3, #3]
 8000c96:	b21a      	sxth	r2, r3
 8000c98:	4b6d      	ldr	r3, [pc, #436]	; (8000e50 <selection_action+0x80c>)
 8000c9a:	801a      	strh	r2, [r3, #0]
										break;
 8000c9c:	e004      	b.n	8000ca8 <selection_action+0x664>
										sub_menu=-1;
 8000c9e:	4b6d      	ldr	r3, [pc, #436]	; (8000e54 <selection_action+0x810>)
 8000ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca4:	801a      	strh	r2, [r3, #0]
										break;
 8000ca6:	bf00      	nop
									break;
 8000ca8:	e037      	b.n	8000d1a <selection_action+0x6d6>
										if(skip==0)
 8000caa:	4b66      	ldr	r3, [pc, #408]	; (8000e44 <selection_action+0x800>)
 8000cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10e      	bne.n	8000cd2 <selection_action+0x68e>
											skip++;
 8000cb4:	4b63      	ldr	r3, [pc, #396]	; (8000e44 <selection_action+0x800>)
 8000cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	4b60      	ldr	r3, [pc, #384]	; (8000e44 <selection_action+0x800>)
 8000cc4:	801a      	strh	r2, [r3, #0]
											selection=rtc.Min;
 8000cc6:	4b65      	ldr	r3, [pc, #404]	; (8000e5c <selection_action+0x818>)
 8000cc8:	795b      	ldrb	r3, [r3, #5]
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <selection_action+0x80c>)
 8000cce:	801a      	strh	r2, [r3, #0]
										break;
 8000cd0:	e025      	b.n	8000d1e <selection_action+0x6da>
										else if(skip==1)
 8000cd2:	4b5c      	ldr	r3, [pc, #368]	; (8000e44 <selection_action+0x800>)
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d120      	bne.n	8000d1e <selection_action+0x6da>
											skip=0;
 8000cdc:	4b59      	ldr	r3, [pc, #356]	; (8000e44 <selection_action+0x800>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	801a      	strh	r2, [r3, #0]
											selection=0;
 8000ce2:	4b5b      	ldr	r3, [pc, #364]	; (8000e50 <selection_action+0x80c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	801a      	strh	r2, [r3, #0]
											selection_wheel=-1;
 8000ce8:	4b5b      	ldr	r3, [pc, #364]	; (8000e58 <selection_action+0x814>)
 8000cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cee:	801a      	strh	r2, [r3, #0]
											update=1;
 8000cf0:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <selection_action+0x804>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	801a      	strh	r2, [r3, #0]
											DS3231_SetTime(&rtc);
 8000cf6:	4859      	ldr	r0, [pc, #356]	; (8000e5c <selection_action+0x818>)
 8000cf8:	f004 fb8c 	bl	8005414 <DS3231_SetTime>
										break;
 8000cfc:	e00f      	b.n	8000d1e <selection_action+0x6da>
										selection=1;
 8000cfe:	4b54      	ldr	r3, [pc, #336]	; (8000e50 <selection_action+0x80c>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	801a      	strh	r2, [r3, #0]
										selection_wheel=-1;
 8000d04:	4b54      	ldr	r3, [pc, #336]	; (8000e58 <selection_action+0x814>)
 8000d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0a:	801a      	strh	r2, [r3, #0]
										update=1;
 8000d0c:	4b4e      	ldr	r3, [pc, #312]	; (8000e48 <selection_action+0x804>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	801a      	strh	r2, [r3, #0]
										DS3231_SetTime(&rtc);
 8000d12:	4852      	ldr	r0, [pc, #328]	; (8000e5c <selection_action+0x818>)
 8000d14:	f004 fb7e 	bl	8005414 <DS3231_SetTime>
										break;
 8000d18:	e002      	b.n	8000d20 <selection_action+0x6dc>
									break;
 8000d1a:	bf00      	nop
 8000d1c:	e0ef      	b.n	8000efe <selection_action+0x8ba>
										break;
 8000d1e:	bf00      	nop
								break; // tijd instellen break
 8000d20:	e0ed      	b.n	8000efe <selection_action+0x8ba>

								case 3: //submenu overige instellingen
									switch(selection_wheel)
 8000d22:	4b4d      	ldr	r3, [pc, #308]	; (8000e58 <selection_action+0x814>)
 8000d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	f200 80e9 	bhi.w	8000f02 <selection_action+0x8be>
 8000d30:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <selection_action+0x6f4>)
 8000d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d36:	bf00      	nop
 8000d38:	08000d51 	.word	0x08000d51
 8000d3c:	08000df9 	.word	0x08000df9
 8000d40:	08000e9b 	.word	0x08000e9b
 8000d44:	08000eb1 	.word	0x08000eb1
 8000d48:	08000ec7 	.word	0x08000ec7
 8000d4c:	08000edd 	.word	0x08000edd
									{
									case-1: //no selection made
										switch(selection)
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <selection_action+0x80c>)
 8000d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d56:	2b05      	cmp	r3, #5
 8000d58:	f200 80cb 	bhi.w	8000ef2 <selection_action+0x8ae>
 8000d5c:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <selection_action+0x720>)
 8000d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d62:	bf00      	nop
 8000d64:	08000d7d 	.word	0x08000d7d
 8000d68:	08000d8f 	.word	0x08000d8f
 8000d6c:	08000db7 	.word	0x08000db7
 8000d70:	08000dc9 	.word	0x08000dc9
 8000d74:	08000ddb 	.word	0x08000ddb
 8000d78:	08000ded 	.word	0x08000ded
										{
										case 0:
											selection_wheel=0;
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <selection_action+0x814>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	801a      	strh	r2, [r3, #0]
											selection=time_out;
 8000d82:	4b37      	ldr	r3, [pc, #220]	; (8000e60 <selection_action+0x81c>)
 8000d84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d88:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <selection_action+0x80c>)
 8000d8a:	801a      	strh	r2, [r3, #0]
											//refresh=1;
											break;
 8000d8c:	e033      	b.n	8000df6 <selection_action+0x7b2>
										case 1:
											selection_wheel=1;
 8000d8e:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <selection_action+0x814>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	801a      	strh	r2, [r3, #0]
											selection=(screen_brightness/65500)*20;
 8000d94:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <selection_action+0x820>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	4a33      	ldr	r2, [pc, #204]	; (8000e68 <selection_action+0x824>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	0b1b      	lsrs	r3, r3, #12
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <selection_action+0x80c>)
 8000db2:	801a      	strh	r2, [r3, #0]
											//refresh=1;
											break;
 8000db4:	e01f      	b.n	8000df6 <selection_action+0x7b2>
										case 2:
											selection_wheel=2;
 8000db6:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <selection_action+0x814>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	801a      	strh	r2, [r3, #0]
											selection=sound_feed;
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <selection_action+0x828>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <selection_action+0x80c>)
 8000dc4:	801a      	strh	r2, [r3, #0]
											//refresh=1;
											break;
 8000dc6:	e016      	b.n	8000df6 <selection_action+0x7b2>
										case 3:
											selection_wheel=3;
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <selection_action+0x814>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	801a      	strh	r2, [r3, #0]
											selection=food_shake;
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <selection_action+0x82c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <selection_action+0x80c>)
 8000dd6:	801a      	strh	r2, [r3, #0]
											//refresh=1;
											break;
 8000dd8:	e00d      	b.n	8000df6 <selection_action+0x7b2>
										case 4:
											selection_wheel=4;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <selection_action+0x814>)
 8000ddc:	2204      	movs	r2, #4
 8000dde:	801a      	strh	r2, [r3, #0]
											selection=sound_intensity;
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <selection_action+0x830>)
 8000de2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <selection_action+0x80c>)
 8000de8:	801a      	strh	r2, [r3, #0]
											//refresh=1;
											break;
 8000dea:	e004      	b.n	8000df6 <selection_action+0x7b2>
										case 5:
											sub_menu=-1;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <selection_action+0x810>)
 8000dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df2:	801a      	strh	r2, [r3, #0]
											break;
 8000df4:	bf00      	nop
										}
										break;
 8000df6:	e07c      	b.n	8000ef2 <selection_action+0x8ae>
										case 0:
											//0=10s, 1=20s, 2=30s, 3=1min, 4=5min, 5=inf
											switch(time_out)
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <selection_action+0x81c>)
 8000dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d840      	bhi.n	8000e84 <selection_action+0x840>
 8000e02:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <selection_action+0x7c4>)
 8000e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e08:	08000e1d 	.word	0x08000e1d
 8000e0c:	08000e27 	.word	0x08000e27
 8000e10:	08000e31 	.word	0x08000e31
 8000e14:	08000e3b 	.word	0x08000e3b
 8000e18:	08000e7d 	.word	0x08000e7d
											{
											case 0:
												timeout_time=10000; // in ms
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <selection_action+0x834>)
 8000e1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e22:	601a      	str	r2, [r3, #0]
												break;
 8000e24:	e02e      	b.n	8000e84 <selection_action+0x840>
											case 1:
												timeout_time=20000; // in ms
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <selection_action+0x834>)
 8000e28:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e2c:	601a      	str	r2, [r3, #0]
												break;
 8000e2e:	e029      	b.n	8000e84 <selection_action+0x840>
											case 2:
												timeout_time=30000; // in ms
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <selection_action+0x834>)
 8000e32:	f247 5230 	movw	r2, #30000	; 0x7530
 8000e36:	601a      	str	r2, [r3, #0]
												break;
 8000e38:	e024      	b.n	8000e84 <selection_action+0x840>
											case 3:
												timeout_time=60000; // in ms
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <selection_action+0x834>)
 8000e3c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000e40:	601a      	str	r2, [r3, #0]
												break;
 8000e42:	e01f      	b.n	8000e84 <selection_action+0x840>
 8000e44:	200008a4 	.word	0x200008a4
 8000e48:	200008b4 	.word	0x200008b4
 8000e4c:	20000714 	.word	0x20000714
 8000e50:	20000aa8 	.word	0x20000aa8
 8000e54:	20000702 	.word	0x20000702
 8000e58:	2000070c 	.word	0x2000070c
 8000e5c:	20000718 	.word	0x20000718
 8000e60:	20000712 	.word	0x20000712
 8000e64:	20000706 	.word	0x20000706
 8000e68:	40090145 	.word	0x40090145
 8000e6c:	2000070e 	.word	0x2000070e
 8000e70:	2000070f 	.word	0x2000070f
 8000e74:	20000710 	.word	0x20000710
 8000e78:	200008c4 	.word	0x200008c4
											case 4:
												timeout_time=300000; // in ms
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <selection_action+0x8d4>)
 8000e7e:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <selection_action+0x8d8>)
 8000e80:	601a      	str	r2, [r3, #0]
												break;
 8000e82:	bf00      	nop
											}

											selection_wheel=-1;
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <selection_action+0x8dc>)
 8000e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8a:	801a      	strh	r2, [r3, #0]
											selection=0;
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <selection_action+0x8e0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	801a      	strh	r2, [r3, #0]
											update=1;
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <selection_action+0x8e4>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	801a      	strh	r2, [r3, #0]
											break;
 8000e98:	e02c      	b.n	8000ef4 <selection_action+0x8b0>
											case 1: //after setting brightness
												selection_wheel=-1;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <selection_action+0x8dc>)
 8000e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea0:	801a      	strh	r2, [r3, #0]
												selection=1;
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <selection_action+0x8e0>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	801a      	strh	r2, [r3, #0]
												update=1;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <selection_action+0x8e4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	801a      	strh	r2, [r3, #0]
												break;
 8000eae:	e021      	b.n	8000ef4 <selection_action+0x8b0>
											case 2:
												selection_wheel=-1;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <selection_action+0x8dc>)
 8000eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb6:	801a      	strh	r2, [r3, #0]
												selection=2;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <selection_action+0x8e0>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	801a      	strh	r2, [r3, #0]
												update=1;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <selection_action+0x8e4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	801a      	strh	r2, [r3, #0]
												break;
 8000ec4:	e016      	b.n	8000ef4 <selection_action+0x8b0>
											case 3:
												selection_wheel=-1;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <selection_action+0x8dc>)
 8000ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ecc:	801a      	strh	r2, [r3, #0]
												selection=3;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <selection_action+0x8e0>)
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	801a      	strh	r2, [r3, #0]
												update=1;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <selection_action+0x8e4>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	801a      	strh	r2, [r3, #0]
												break;
 8000eda:	e00b      	b.n	8000ef4 <selection_action+0x8b0>
											case 4:
												selection=4;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <selection_action+0x8e0>)
 8000ede:	2204      	movs	r2, #4
 8000ee0:	801a      	strh	r2, [r3, #0]
												selection_wheel=-1;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <selection_action+0x8dc>)
 8000ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee8:	801a      	strh	r2, [r3, #0]
												update=1;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <selection_action+0x8e4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	801a      	strh	r2, [r3, #0]
												break;
 8000ef0:	e000      	b.n	8000ef4 <selection_action+0x8b0>
										break;
 8000ef2:	bf00      	nop
									}
									break;
 8000ef4:	e005      	b.n	8000f02 <selection_action+0x8be>
					break;
 8000ef6:	bf00      	nop
 8000ef8:	e007      	b.n	8000f0a <selection_action+0x8c6>
						break;
 8000efa:	bf00      	nop
 8000efc:	e005      	b.n	8000f0a <selection_action+0x8c6>
								break; // tijd instellen break
 8000efe:	bf00      	nop
 8000f00:	e003      	b.n	8000f0a <selection_action+0x8c6>
									break;
 8000f02:	bf00      	nop

				}
				break;
 8000f04:	e001      	b.n	8000f0a <selection_action+0x8c6>

				case 2: // lock the device

					break;
 8000f06:	bf00      	nop
 8000f08:	e000      	b.n	8000f0c <selection_action+0x8c8>
				break;
 8000f0a:	bf00      	nop


		}
		button_pressed=false;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <selection_action+0x8e8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
	}

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200008c4 	.word	0x200008c4
 8000f1c:	000493e0 	.word	0x000493e0
 8000f20:	2000070c 	.word	0x2000070c
 8000f24:	20000aa8 	.word	0x20000aa8
 8000f28:	200008b4 	.word	0x200008b4
 8000f2c:	200008cc 	.word	0x200008cc

08000f30 <time_text>:

char* time_text(short Hour,short Min,bool dots)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	70fb      	strb	r3, [r7, #3]
	if(Hour<10 || Min<10)
 8000f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f46:	2b09      	cmp	r3, #9
 8000f48:	dd03      	ble.n	8000f52 <time_text+0x22>
 8000f4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f4e:	2b09      	cmp	r3, #9
 8000f50:	dc68      	bgt.n	8001024 <time_text+0xf4>
	{
		if(Hour<10 && Min<10)
 8000f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f56:	2b09      	cmp	r3, #9
 8000f58:	dc26      	bgt.n	8000fa8 <time_text+0x78>
 8000f5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f5e:	2b09      	cmp	r3, #9
 8000f60:	dc22      	bgt.n	8000fa8 <time_text+0x78>
		{
			curr_time[0]=Hour;
 8000f62:	4a3e      	ldr	r2, [pc, #248]	; (800105c <time_text+0x12c>)
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	8013      	strh	r3, [r2, #0]
			if(dots==1)
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00d      	beq.n	8000f8a <time_text+0x5a>
			{
				sprintf(str,"%d%d:%d%d",0,Hour,0,Min);
 8000f6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4937      	ldr	r1, [pc, #220]	; (8001060 <time_text+0x130>)
 8000f82:	4838      	ldr	r0, [pc, #224]	; (8001064 <time_text+0x134>)
 8000f84:	f008 fe2c 	bl	8009be0 <siprintf>
 8000f88:	e00c      	b.n	8000fa4 <time_text+0x74>
			}
			else
			{
				sprintf(str,"%d%d %d%d",0,Hour,0,Min);
 8000f8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	2300      	movs	r3, #0
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4932      	ldr	r1, [pc, #200]	; (8001068 <time_text+0x138>)
 8000f9e:	4831      	ldr	r0, [pc, #196]	; (8001064 <time_text+0x134>)
 8000fa0:	f008 fe1e 	bl	8009be0 <siprintf>
			}
			return str;
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <time_text+0x134>)
 8000fa6:	e054      	b.n	8001052 <time_text+0x122>

		}
		if(Hour>=10)
 8000fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	dd19      	ble.n	8000fe4 <time_text+0xb4>
		{
			if(dots==1)
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00a      	beq.n	8000fcc <time_text+0x9c>
			{
				sprintf(str,"%d:%d%d",Hour,0,Min);
 8000fb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	492a      	ldr	r1, [pc, #168]	; (800106c <time_text+0x13c>)
 8000fc4:	4827      	ldr	r0, [pc, #156]	; (8001064 <time_text+0x134>)
 8000fc6:	f008 fe0b 	bl	8009be0 <siprintf>
 8000fca:	e009      	b.n	8000fe0 <time_text+0xb0>
			}
			else
			{
				sprintf(str,"%d %d%d",Hour,0,Min);
 8000fcc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	4925      	ldr	r1, [pc, #148]	; (8001070 <time_text+0x140>)
 8000fda:	4822      	ldr	r0, [pc, #136]	; (8001064 <time_text+0x134>)
 8000fdc:	f008 fe00 	bl	8009be0 <siprintf>
			}
			return str;
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <time_text+0x134>)
 8000fe2:	e036      	b.n	8001052 <time_text+0x122>
		}
		if(Min>=10)
 8000fe4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	dd31      	ble.n	8001050 <time_text+0x120>
		{
			if(dots==1)
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <time_text+0xda>
			{
				sprintf(str,"%d%d:%d",0,Hour,Min);
 8000ff2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ff6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	491c      	ldr	r1, [pc, #112]	; (8001074 <time_text+0x144>)
 8001002:	4818      	ldr	r0, [pc, #96]	; (8001064 <time_text+0x134>)
 8001004:	f008 fdec 	bl	8009be0 <siprintf>
 8001008:	e00a      	b.n	8001020 <time_text+0xf0>
			}
			else
			{
				sprintf(str,"%d%d %d",0,Hour,Min);
 800100a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800100e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4613      	mov	r3, r2
 8001016:	2200      	movs	r2, #0
 8001018:	4917      	ldr	r1, [pc, #92]	; (8001078 <time_text+0x148>)
 800101a:	4812      	ldr	r0, [pc, #72]	; (8001064 <time_text+0x134>)
 800101c:	f008 fde0 	bl	8009be0 <siprintf>
			}
			return str;
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <time_text+0x134>)
 8001022:	e016      	b.n	8001052 <time_text+0x122>
		}

	}
	else 
	{
		if(dots==1)
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d008      	beq.n	800103c <time_text+0x10c>
		{
			sprintf(str,"%d:%d",Hour,Min);
 800102a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800102e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001032:	4912      	ldr	r1, [pc, #72]	; (800107c <time_text+0x14c>)
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <time_text+0x134>)
 8001036:	f008 fdd3 	bl	8009be0 <siprintf>
 800103a:	e007      	b.n	800104c <time_text+0x11c>
		}
		else
		{
			sprintf(str,"%d %d",Hour,Min);
 800103c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001040:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001044:	490e      	ldr	r1, [pc, #56]	; (8001080 <time_text+0x150>)
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <time_text+0x134>)
 8001048:	f008 fdca 	bl	8009be0 <siprintf>
		}
		return str;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <time_text+0x134>)
 800104e:	e000      	b.n	8001052 <time_text+0x122>
	}
	return "00:00";
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <time_text+0x154>)
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000ab8 	.word	0x20000ab8
 8001060:	0800a460 	.word	0x0800a460
 8001064:	200008e4 	.word	0x200008e4
 8001068:	0800a46c 	.word	0x0800a46c
 800106c:	0800a478 	.word	0x0800a478
 8001070:	0800a480 	.word	0x0800a480
 8001074:	0800a488 	.word	0x0800a488
 8001078:	0800a490 	.word	0x0800a490
 800107c:	0800a498 	.word	0x0800a498
 8001080:	0800a4a0 	.word	0x0800a4a0
 8001084:	0800a4a8 	.word	0x0800a4a8

08001088 <enum_to_day>:

char* enum_to_day(uint8_t day_num)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	switch(day_num)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	3b01      	subs	r3, #1
 8001096:	2b06      	cmp	r3, #6
 8001098:	d81e      	bhi.n	80010d8 <enum_to_day+0x50>
 800109a:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <enum_to_day+0x18>)
 800109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a0:	080010bd 	.word	0x080010bd
 80010a4:	080010c1 	.word	0x080010c1
 80010a8:	080010c5 	.word	0x080010c5
 80010ac:	080010c9 	.word	0x080010c9
 80010b0:	080010cd 	.word	0x080010cd
 80010b4:	080010d1 	.word	0x080010d1
 80010b8:	080010d5 	.word	0x080010d5
	{
	case 1:
		return "Zo";
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <enum_to_day+0x60>)
 80010be:	e00c      	b.n	80010da <enum_to_day+0x52>
	case 2:
		return "Ma";
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <enum_to_day+0x64>)
 80010c2:	e00a      	b.n	80010da <enum_to_day+0x52>
	case 3:
		return "Di";
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <enum_to_day+0x68>)
 80010c6:	e008      	b.n	80010da <enum_to_day+0x52>
	case 4:
		return "Wo";
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <enum_to_day+0x6c>)
 80010ca:	e006      	b.n	80010da <enum_to_day+0x52>
	case 5:
		return "Do";
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <enum_to_day+0x70>)
 80010ce:	e004      	b.n	80010da <enum_to_day+0x52>
	case 6:
		return "Vr";
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <enum_to_day+0x74>)
 80010d2:	e002      	b.n	80010da <enum_to_day+0x52>
	case 7:
		return "Za";
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <enum_to_day+0x78>)
 80010d6:	e000      	b.n	80010da <enum_to_day+0x52>
	}
	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	0800a4b0 	.word	0x0800a4b0
 80010ec:	0800a4b4 	.word	0x0800a4b4
 80010f0:	0800a4b8 	.word	0x0800a4b8
 80010f4:	0800a4bc 	.word	0x0800a4bc
 80010f8:	0800a4c0 	.word	0x0800a4c0
 80010fc:	0800a4c4 	.word	0x0800a4c4
 8001100:	0800a4c8 	.word	0x0800a4c8

08001104 <limit_selection>:

void limit_selection(short L,short N)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	80fb      	strh	r3, [r7, #6]
 8001110:	4613      	mov	r3, r2
 8001112:	80bb      	strh	r3, [r7, #4]
	if(selection>N)
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <limit_selection+0x44>)
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	da02      	bge.n	8001128 <limit_selection+0x24>
	{
		selection=L;
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <limit_selection+0x44>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	8013      	strh	r3, [r2, #0]
	}
	if(selection<L)
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <limit_selection+0x44>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001132:	429a      	cmp	r2, r3
 8001134:	dd02      	ble.n	800113c <limit_selection+0x38>
	{
		selection=N;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <limit_selection+0x44>)
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	8013      	strh	r3, [r2, #0]
	}
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	20000aa8 	.word	0x20000aa8

0800114c <timeout_vis>:

char* timeout_vis(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	switch(time_out)
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <timeout_vis+0x48>)
 8001152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001156:	2b04      	cmp	r3, #4
 8001158:	d816      	bhi.n	8001188 <timeout_vis+0x3c>
 800115a:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <timeout_vis+0x14>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	08001175 	.word	0x08001175
 8001164:	08001179 	.word	0x08001179
 8001168:	0800117d 	.word	0x0800117d
 800116c:	08001181 	.word	0x08001181
 8001170:	08001185 	.word	0x08001185
	{
	case 0:
		return "10s ";
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <timeout_vis+0x4c>)
 8001176:	e008      	b.n	800118a <timeout_vis+0x3e>
		break;
	case 1:
		return "20s ";
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <timeout_vis+0x50>)
 800117a:	e006      	b.n	800118a <timeout_vis+0x3e>
		break;
	case 2:
		return "30s ";
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <timeout_vis+0x54>)
 800117e:	e004      	b.n	800118a <timeout_vis+0x3e>
		break;
	case 3:
		return "1min";
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <timeout_vis+0x58>)
 8001182:	e002      	b.n	800118a <timeout_vis+0x3e>
		break;
	case 4:
		return "5min";
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <timeout_vis+0x5c>)
 8001186:	e000      	b.n	800118a <timeout_vis+0x3e>
		break;
	}
	return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	20000712 	.word	0x20000712
 8001198:	0800a4cc 	.word	0x0800a4cc
 800119c:	0800a4d4 	.word	0x0800a4d4
 80011a0:	0800a4dc 	.word	0x0800a4dc
 80011a4:	0800a4e4 	.word	0x0800a4e4
 80011a8:	0800a4ec 	.word	0x0800a4ec

080011ac <feed_cat>:

void feed_cat(short time)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
	//char str[10];
	motor_intensity(0);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 faae 	bl	8001718 <motor_intensity>
	if(first_time==0)
 80011bc:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <feed_cat+0x11c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f083 0301 	eor.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d03e      	beq.n	8001248 <feed_cat+0x9c>
	{
		HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2108      	movs	r1, #8
 80011ce:	483f      	ldr	r0, [pc, #252]	; (80012cc <feed_cat+0x120>)
 80011d0:	f005 fc2a 	bl	8006a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011da:	483d      	ldr	r0, [pc, #244]	; (80012d0 <feed_cat+0x124>)
 80011dc:	f005 fc24 	bl	8006a28 <HAL_GPIO_WritePin>
		first_time=1;
 80011e0:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <feed_cat+0x11c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
		feed_time_old=TIM2->CNT;
 80011e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <feed_cat+0x128>)
 80011f0:	601a      	str	r2, [r3, #0]
		feed_time_diff=(TIM2->CNT-feed_time_old);
 80011f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	4a36      	ldr	r2, [pc, #216]	; (80012d4 <feed_cat+0x128>)
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	1a9b      	subs	r3, r3, r2
 80011fe:	461a      	mov	r2, r3
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <feed_cat+0x12c>)
 8001202:	601a      	str	r2, [r3, #0]
		TIM3->CNT=0;
 8001204:	4b35      	ldr	r3, [pc, #212]	; (80012dc <feed_cat+0x130>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2120      	movs	r1, #32
 800120e:	482f      	ldr	r0, [pc, #188]	; (80012cc <feed_cat+0x120>)
 8001210:	f005 fc0a 	bl	8006a28 <HAL_GPIO_WritePin>
		//TFT9341_FillScreen(0xFD90);
	}
	while(feed_time_diff<time) //
 8001214:	e018      	b.n	8001248 <feed_cat+0x9c>
	{
		feed_time_diff=(TIM2->CNT-feed_time_old);
 8001216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <feed_cat+0x128>)
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	461a      	mov	r2, r3
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <feed_cat+0x12c>)
 8001226:	601a      	str	r2, [r3, #0]
		if(TIM3->CNT>speed)
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <feed_cat+0x130>)
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	4a2c      	ldr	r2, [pc, #176]	; (80012e0 <feed_cat+0x134>)
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	4293      	cmp	r3, r2
 8001232:	d906      	bls.n	8001242 <feed_cat+0x96>
		{
			TIM3->CNT=0;
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <feed_cat+0x130>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_GPIO_TogglePin(STEP_GPIO_Port,STEP_Pin);
 800123a:	2110      	movs	r1, #16
 800123c:	4823      	ldr	r0, [pc, #140]	; (80012cc <feed_cat+0x120>)
 800123e:	f005 fc0c 	bl	8006a5a <HAL_GPIO_TogglePin>
		}
		first_time=0;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <feed_cat+0x11c>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
	while(feed_time_diff<time) //
 8001248:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <feed_cat+0x12c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	dce0      	bgt.n	8001216 <feed_cat+0x6a>

	}
	if(feed_time_diff>=time)
 8001254:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <feed_cat+0x12c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	dc30      	bgt.n	80012c2 <feed_cat+0x116>
	{
		if(food_shake==1)
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <feed_cat+0x138>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00b      	beq.n	8001280 <feed_cat+0xd4>
		{
			motor_intensity(2);
 8001268:	2002      	movs	r0, #2
 800126a:	f000 fa55 	bl	8001718 <motor_intensity>
			play_tone("e2",800);
 800126e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001272:	481d      	ldr	r0, [pc, #116]	; (80012e8 <feed_cat+0x13c>)
 8001274:	f004 fb8c 	bl	8005990 <play_tone>
			HAL_Delay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f005 f902 	bl	8006484 <HAL_Delay>
		}
		if(sound_feed==1)
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <feed_cat+0x140>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00a      	beq.n	800129e <feed_cat+0xf2>
		{
			motor_intensity(0);
 8001288:	2000      	movs	r0, #0
 800128a:	f000 fa45 	bl	8001718 <motor_intensity>
			play_tone("e4",100);
 800128e:	2164      	movs	r1, #100	; 0x64
 8001290:	4817      	ldr	r0, [pc, #92]	; (80012f0 <feed_cat+0x144>)
 8001292:	f004 fb7d 	bl	8005990 <play_tone>
			play_tone("b4",200);
 8001296:	21c8      	movs	r1, #200	; 0xc8
 8001298:	4816      	ldr	r0, [pc, #88]	; (80012f4 <feed_cat+0x148>)
 800129a:	f004 fb79 	bl	8005990 <play_tone>
		}
		HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2108      	movs	r1, #8
 80012a2:	480a      	ldr	r0, [pc, #40]	; (80012cc <feed_cat+0x120>)
 80012a4:	f005 fbc0 	bl	8006a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ae:	4808      	ldr	r0, [pc, #32]	; (80012d0 <feed_cat+0x124>)
 80012b0:	f005 fbba 	bl	8006a28 <HAL_GPIO_WritePin>
		TIM3->CNT=0;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <feed_cat+0x130>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
		first_time=0;
 80012ba:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <feed_cat+0x11c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
		return;
 80012c0:	bf00      	nop
	}




}
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200008b0 	.word	0x200008b0
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020000 	.word	0x40020000
 80012d4:	200008a8 	.word	0x200008a8
 80012d8:	200008ac 	.word	0x200008ac
 80012dc:	40000400 	.word	0x40000400
 80012e0:	20000708 	.word	0x20000708
 80012e4:	2000070f 	.word	0x2000070f
 80012e8:	0800a4f4 	.word	0x0800a4f4
 80012ec:	2000070e 	.word	0x2000070e
 80012f0:	0800a4f8 	.word	0x0800a4f8
 80012f4:	0800a4fc 	.word	0x0800a4fc

080012f8 <write_vars>:


void write_vars(uint8_t buffer[21])
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(buffer1, 1, 0, 23);
	sector_increment=buffer1[21]|buffer1[22]<<8;
	sector_increment++;
	curr_sector=buffer1[23];
	 */
	buffer[0]=feed_status<<2|sound_feed<<1|food_shake; // first three bits contain these in order 011=3
 8001300:	4b55      	ldr	r3, [pc, #340]	; (8001458 <write_vars+0x160>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	b25a      	sxtb	r2, r3
 8001308:	4b54      	ldr	r3, [pc, #336]	; (800145c <write_vars+0x164>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b25b      	sxtb	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b25a      	sxtb	r2, r3
 8001314:	4b52      	ldr	r3, [pc, #328]	; (8001460 <write_vars+0x168>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b25b      	sxtb	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b25b      	sxtb	r3, r3
 800131e:	b2da      	uxtb	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	701a      	strb	r2, [r3, #0]
	buffer[1]=feed_time[0][0];
 8001324:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <write_vars+0x16c>)
 8001326:	f9b3 2000 	ldrsh.w	r2, [r3]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3301      	adds	r3, #1
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]
	buffer[2]=feed_time[0][1];
 8001332:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <write_vars+0x16c>)
 8001334:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3302      	adds	r3, #2
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	701a      	strb	r2, [r3, #0]
	buffer[3]=feed_time[1][0];
 8001340:	4b48      	ldr	r3, [pc, #288]	; (8001464 <write_vars+0x16c>)
 8001342:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3303      	adds	r3, #3
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	701a      	strb	r2, [r3, #0]
	buffer[4]=feed_time[1][1];
 800134e:	4b45      	ldr	r3, [pc, #276]	; (8001464 <write_vars+0x16c>)
 8001350:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3304      	adds	r3, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]
	buffer[5]=feed_time[2][0];
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <write_vars+0x16c>)
 800135e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3305      	adds	r3, #5
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]
	buffer[6]=feed_time[2][1];
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <write_vars+0x16c>)
 800136c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3306      	adds	r3, #6
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]
	buffer[7]=feed_time[3][0];
 8001378:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <write_vars+0x16c>)
 800137a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3307      	adds	r3, #7
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]
	buffer[8]=feed_time[3][1];
 8001386:	4b37      	ldr	r3, [pc, #220]	; (8001464 <write_vars+0x16c>)
 8001388:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3308      	adds	r3, #8
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	701a      	strb	r2, [r3, #0]
	buffer[9]=feed_time[4][0];
 8001394:	4b33      	ldr	r3, [pc, #204]	; (8001464 <write_vars+0x16c>)
 8001396:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3309      	adds	r3, #9
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]
	buffer[10]=feed_time[4][1];
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <write_vars+0x16c>)
 80013a4:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	330a      	adds	r3, #10
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	701a      	strb	r2, [r3, #0]
	buffer[11]=feed_amount[0];
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <write_vars+0x170>)
 80013b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	330b      	adds	r3, #11
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]
	buffer[12]=feed_amount[1];
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <write_vars+0x170>)
 80013c0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	330c      	adds	r3, #12
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	701a      	strb	r2, [r3, #0]
	buffer[13]=feed_amount[2];
 80013cc:	4b26      	ldr	r3, [pc, #152]	; (8001468 <write_vars+0x170>)
 80013ce:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	330d      	adds	r3, #13
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
	buffer[14]=feed_amount[3];
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <write_vars+0x170>)
 80013dc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	330e      	adds	r3, #14
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	701a      	strb	r2, [r3, #0]
	buffer[15]=feed_number;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <write_vars+0x174>)
 80013ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	330f      	adds	r3, #15
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
	buffer[16]=screen_brightness & 0x00ff; //low byte
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <write_vars+0x178>)
 80013f8:	881a      	ldrh	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3310      	adds	r3, #16
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]
	buffer[17]=screen_brightness >> 8; // high byte
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <write_vars+0x178>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	0a1b      	lsrs	r3, r3, #8
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3311      	adds	r3, #17
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]
	buffer[18]=sound_intensity;
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <write_vars+0x17c>)
 8001414:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3312      	adds	r3, #18
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
	buffer[19]=time_out;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <write_vars+0x180>)
 8001422:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3313      	adds	r3, #19
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	701a      	strb	r2, [r3, #0]
	buffer[20]=feed_cal;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <write_vars+0x184>)
 8001430:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3314      	adds	r3, #20
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	701a      	strb	r2, [r3, #0]
	buffer[21]=sector_increment & 0x00ff ;//sector_increment low byte
	buffer[22]=sector_increment >>8; // sector_increment high byte
	//curr_sector=1;
	buffer[23]=curr_sector;
	 */
	W25qxx_EraseSector(1);
 800143c:	2001      	movs	r0, #1
 800143e:	f004 fd57 	bl	8005ef0 <W25qxx_EraseSector>
	W25qxx_WriteSector(buffer, 1, 0, 21); // write to sector 1 and write bytes 0-23
 8001442:	2315      	movs	r3, #21
 8001444:	2200      	movs	r2, #0
 8001446:	2101      	movs	r1, #1
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f004 fe3f 	bl	80060cc <W25qxx_WriteSector>

	return;
 800144e:	bf00      	nop

}
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200006fa 	.word	0x200006fa
 800145c:	2000070e 	.word	0x2000070e
 8001460:	2000070f 	.word	0x2000070f
 8001464:	20000a44 	.word	0x20000a44
 8001468:	20000b20 	.word	0x20000b20
 800146c:	200006fc 	.word	0x200006fc
 8001470:	20000706 	.word	0x20000706
 8001474:	20000710 	.word	0x20000710
 8001478:	20000712 	.word	0x20000712
 800147c:	20000714 	.word	0x20000714

08001480 <read_vars>:

void read_vars(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
	uint8_t buffer[24]={0};
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
	W25qxx_ReadSector(buffer, 1, 0, 23);
	curr_sector=buffer[23];
	//curr_sector=1;
	W25qxx_ReadSector(buffer, curr_sector, 0, 23);
	 */
	W25qxx_ReadSector(buffer, 1, 0, 21);
 8001498:	4638      	mov	r0, r7
 800149a:	2315      	movs	r3, #21
 800149c:	2200      	movs	r2, #0
 800149e:	2101      	movs	r1, #1
 80014a0:	f004 fef2 	bl	8006288 <W25qxx_ReadSector>
	feed_status=(buffer[0] & 4)>>2; // select third bit
 80014a4:	783b      	ldrb	r3, [r7, #0]
 80014a6:	109b      	asrs	r3, r3, #2
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b36      	ldr	r3, [pc, #216]	; (8001590 <read_vars+0x110>)
 80014b8:	701a      	strb	r2, [r3, #0]
	sound_feed=(buffer[0]&2)>>1; // select second bit
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	105b      	asrs	r3, r3, #1
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf14      	ite	ne
 80014c6:	2301      	movne	r3, #1
 80014c8:	2300      	moveq	r3, #0
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b31      	ldr	r3, [pc, #196]	; (8001594 <read_vars+0x114>)
 80014ce:	701a      	strb	r2, [r3, #0]
	food_shake=buffer[0]&1; // select first bit
 80014d0:	783b      	ldrb	r3, [r7, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <read_vars+0x118>)
 80014e2:	701a      	strb	r2, [r3, #0]
	feed_time[0][0]=buffer[1];
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <read_vars+0x11c>)
 80014ea:	801a      	strh	r2, [r3, #0]
	feed_time[0][1]=buffer[2];
 80014ec:	78bb      	ldrb	r3, [r7, #2]
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <read_vars+0x11c>)
 80014f2:	805a      	strh	r2, [r3, #2]
	feed_time[1][0]=buffer[3];
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <read_vars+0x11c>)
 80014fa:	809a      	strh	r2, [r3, #4]
	feed_time[1][1]=buffer[4];
 80014fc:	793b      	ldrb	r3, [r7, #4]
 80014fe:	b21a      	sxth	r2, r3
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <read_vars+0x11c>)
 8001502:	80da      	strh	r2, [r3, #6]
	feed_time[2][0]=buffer[5];
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	b21a      	sxth	r2, r3
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <read_vars+0x11c>)
 800150a:	811a      	strh	r2, [r3, #8]
	feed_time[2][1]=buffer[6];
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <read_vars+0x11c>)
 8001512:	815a      	strh	r2, [r3, #10]
	feed_time[3][0]=buffer[7];
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b20      	ldr	r3, [pc, #128]	; (800159c <read_vars+0x11c>)
 800151a:	819a      	strh	r2, [r3, #12]
	feed_time[3][1]=buffer[8];
 800151c:	7a3b      	ldrb	r3, [r7, #8]
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <read_vars+0x11c>)
 8001522:	81da      	strh	r2, [r3, #14]
	feed_time[4][0]=buffer[9];
 8001524:	7a7b      	ldrb	r3, [r7, #9]
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <read_vars+0x11c>)
 800152a:	821a      	strh	r2, [r3, #16]
	feed_time[4][1]=buffer[10];
 800152c:	7abb      	ldrb	r3, [r7, #10]
 800152e:	b21a      	sxth	r2, r3
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <read_vars+0x11c>)
 8001532:	825a      	strh	r2, [r3, #18]
	feed_amount[0]=buffer[11];
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	b21a      	sxth	r2, r3
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <read_vars+0x120>)
 800153a:	801a      	strh	r2, [r3, #0]
	feed_amount[1]=buffer[12];
 800153c:	7b3b      	ldrb	r3, [r7, #12]
 800153e:	b21a      	sxth	r2, r3
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <read_vars+0x120>)
 8001542:	805a      	strh	r2, [r3, #2]
	feed_amount[2]=buffer[13];
 8001544:	7b7b      	ldrb	r3, [r7, #13]
 8001546:	b21a      	sxth	r2, r3
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <read_vars+0x120>)
 800154a:	809a      	strh	r2, [r3, #4]
	feed_amount[3]=buffer[14];
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	b21a      	sxth	r2, r3
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <read_vars+0x120>)
 8001552:	80da      	strh	r2, [r3, #6]
	feed_number=buffer[15];
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <read_vars+0x124>)
 800155a:	801a      	strh	r2, [r3, #0]
	screen_brightness=buffer[16]|buffer[17]<<8;
 800155c:	7c3b      	ldrb	r3, [r7, #16]
 800155e:	b21a      	sxth	r2, r3
 8001560:	7c7b      	ldrb	r3, [r7, #17]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21b      	sxth	r3, r3
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <read_vars+0x128>)
 800156e:	801a      	strh	r2, [r3, #0]
	sound_intensity=buffer[18];
 8001570:	7cbb      	ldrb	r3, [r7, #18]
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <read_vars+0x12c>)
 8001576:	801a      	strh	r2, [r3, #0]
	time_out=buffer[19];
 8001578:	7cfb      	ldrb	r3, [r7, #19]
 800157a:	b21a      	sxth	r2, r3
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <read_vars+0x130>)
 800157e:	801a      	strh	r2, [r3, #0]
	feed_cal=buffer[20];
 8001580:	7d3b      	ldrb	r3, [r7, #20]
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <read_vars+0x134>)
 8001586:	801a      	strh	r2, [r3, #0]
}
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200006fa 	.word	0x200006fa
 8001594:	2000070e 	.word	0x2000070e
 8001598:	2000070f 	.word	0x2000070f
 800159c:	20000a44 	.word	0x20000a44
 80015a0:	20000b20 	.word	0x20000b20
 80015a4:	200006fc 	.word	0x200006fc
 80015a8:	20000706 	.word	0x20000706
 80015ac:	20000710 	.word	0x20000710
 80015b0:	20000712 	.word	0x20000712
 80015b4:	20000714 	.word	0x20000714

080015b8 <feed_cat_time>:

void feed_cat_time(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

	for(int i=0;i<feed_number;i++)
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	e05e      	b.n	8001682 <feed_cat_time+0xca>
	{
		if(rtc.Hour==feed_time[i][0] && rtc.Min==feed_time[i][1] && feed_once==0)
 80015c4:	4b35      	ldr	r3, [pc, #212]	; (800169c <feed_cat_time+0xe4>)
 80015c6:	791b      	ldrb	r3, [r3, #4]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4a35      	ldr	r2, [pc, #212]	; (80016a0 <feed_cat_time+0xe8>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 80015d2:	4299      	cmp	r1, r3
 80015d4:	d130      	bne.n	8001638 <feed_cat_time+0x80>
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <feed_cat_time+0xe4>)
 80015d8:	795b      	ldrb	r3, [r3, #5]
 80015da:	4619      	mov	r1, r3
 80015dc:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <feed_cat_time+0xe8>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015e8:	4299      	cmp	r1, r3
 80015ea:	d125      	bne.n	8001638 <feed_cat_time+0x80>
 80015ec:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <feed_cat_time+0xec>)
 80015ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d120      	bne.n	8001638 <feed_cat_time+0x80>
		{
			feeders=i;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <feed_cat_time+0xf0>)
 80015fc:	801a      	strh	r2, [r3, #0]
			feed_once=1;
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <feed_cat_time+0xec>)
 8001600:	2201      	movs	r2, #1
 8001602:	801a      	strh	r2, [r3, #0]
			if(feed_status==1)
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <feed_cat_time+0xf4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d037      	beq.n	800167c <feed_cat_time+0xc4>
			{
				feed_cat(20000/feed_cal*feed_amount[i]);
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <feed_cat_time+0xf8>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	461a      	mov	r2, r3
 8001614:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001618:	fb93 f3f2 	sdiv	r3, r3, r2
 800161c:	b29a      	uxth	r2, r3
 800161e:	4925      	ldr	r1, [pc, #148]	; (80016b4 <feed_cat_time+0xfc>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001626:	b29b      	uxth	r3, r3
 8001628:	fb12 f303 	smulbb	r3, r2, r3
 800162c:	b29b      	uxth	r3, r3
 800162e:	b21b      	sxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fdbb 	bl	80011ac <feed_cat>
			if(feed_status==1)
 8001636:	e021      	b.n	800167c <feed_cat_time+0xc4>
			}
		}
		else if(rtc.Hour!=feed_time[i][0] || rtc.Min!=feed_time[i][1])
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <feed_cat_time+0xe4>)
 800163a:	791b      	ldrb	r3, [r3, #4]
 800163c:	4619      	mov	r1, r3
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <feed_cat_time+0xe8>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8001646:	4299      	cmp	r1, r3
 8001648:	d10a      	bne.n	8001660 <feed_cat_time+0xa8>
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <feed_cat_time+0xe4>)
 800164c:	795b      	ldrb	r3, [r3, #5]
 800164e:	4619      	mov	r1, r3
 8001650:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <feed_cat_time+0xe8>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800165c:	4299      	cmp	r1, r3
 800165e:	d00d      	beq.n	800167c <feed_cat_time+0xc4>
		{
			if(feeders==i)
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <feed_cat_time+0xf0>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	461a      	mov	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4293      	cmp	r3, r2
 800166c:	d106      	bne.n	800167c <feed_cat_time+0xc4>
			{
				feed_once=0;
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <feed_cat_time+0xec>)
 8001670:	2200      	movs	r2, #0
 8001672:	801a      	strh	r2, [r3, #0]
				feeders=-1;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <feed_cat_time+0xf0>)
 8001676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167a:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<feed_number;i++)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <feed_cat_time+0x100>)
 8001684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4293      	cmp	r3, r2
 800168e:	db99      	blt.n	80015c4 <feed_cat_time+0xc>
			}
		}


	}
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000718 	.word	0x20000718
 80016a0:	20000a44 	.word	0x20000a44
 80016a4:	200008b2 	.word	0x200008b2
 80016a8:	20000000 	.word	0x20000000
 80016ac:	200006fa 	.word	0x200006fa
 80016b0:	20000714 	.word	0x20000714
 80016b4:	20000b20 	.word	0x20000b20
 80016b8:	200006fc 	.word	0x200006fc

080016bc <motor_driver>:

void motor_driver(short status)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
	if(status==1)
 80016c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10b      	bne.n	80016e6 <motor_driver+0x2a>
	{
		HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_SET);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2108      	movs	r1, #8
 80016d2:	480f      	ldr	r0, [pc, #60]	; (8001710 <motor_driver+0x54>)
 80016d4:	f005 f9a8 	bl	8006a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016de:	480d      	ldr	r0, [pc, #52]	; (8001714 <motor_driver+0x58>)
 80016e0:	f005 f9a2 	bl	8006a28 <HAL_GPIO_WritePin>
	else if(status==0)
	{
		HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
	}
	return;
 80016e4:	e00f      	b.n	8001706 <motor_driver+0x4a>
	else if(status==0)
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10b      	bne.n	8001706 <motor_driver+0x4a>
		HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2108      	movs	r1, #8
 80016f2:	4807      	ldr	r0, [pc, #28]	; (8001710 <motor_driver+0x54>)
 80016f4:	f005 f998 	bl	8006a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <motor_driver+0x58>)
 8001700:	f005 f992 	bl	8006a28 <HAL_GPIO_WritePin>
	return;
 8001704:	bf00      	nop
 8001706:	bf00      	nop
}
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40020400 	.word	0x40020400
 8001714:	40020000 	.word	0x40020000

08001718 <motor_intensity>:

void motor_intensity(short sound_intensity)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
	//0 zacht,1 middel, 2 hard
	if(sound_intensity==2)
 8001722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d112      	bne.n	8001750 <motor_intensity+0x38>
	{
		HAL_GPIO_WritePin(MS1_GPIO_Port,MS1_Pin,GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001730:	4820      	ldr	r0, [pc, #128]	; (80017b4 <motor_intensity+0x9c>)
 8001732:	f005 f979 	bl	8006a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port,MS2_Pin,GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173c:	481d      	ldr	r0, [pc, #116]	; (80017b4 <motor_intensity+0x9c>)
 800173e:	f005 f973 	bl	8006a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port,MS3_Pin,GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001748:	481a      	ldr	r0, [pc, #104]	; (80017b4 <motor_intensity+0x9c>)
 800174a:	f005 f96d 	bl	8006a28 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(MS1_GPIO_Port,MS1_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(MS2_GPIO_Port,MS2_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(MS3_GPIO_Port,MS3_Pin,GPIO_PIN_SET);
	}
	return;
 800174e:	e02d      	b.n	80017ac <motor_intensity+0x94>
	else if(sound_intensity==1)
 8001750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d112      	bne.n	800177e <motor_intensity+0x66>
		HAL_GPIO_WritePin(MS1_GPIO_Port,MS1_Pin,GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800175e:	4815      	ldr	r0, [pc, #84]	; (80017b4 <motor_intensity+0x9c>)
 8001760:	f005 f962 	bl	8006a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port,MS2_Pin,GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800176a:	4812      	ldr	r0, [pc, #72]	; (80017b4 <motor_intensity+0x9c>)
 800176c:	f005 f95c 	bl	8006a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port,MS3_Pin,GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001776:	480f      	ldr	r0, [pc, #60]	; (80017b4 <motor_intensity+0x9c>)
 8001778:	f005 f956 	bl	8006a28 <HAL_GPIO_WritePin>
	return;
 800177c:	e016      	b.n	80017ac <motor_intensity+0x94>
	else if(sound_intensity==0)
 800177e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d112      	bne.n	80017ac <motor_intensity+0x94>
		HAL_GPIO_WritePin(MS1_GPIO_Port,MS1_Pin,GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <motor_intensity+0x9c>)
 800178e:	f005 f94b 	bl	8006a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port,MS2_Pin,GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <motor_intensity+0x9c>)
 800179a:	f005 f945 	bl	8006a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port,MS3_Pin,GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <motor_intensity+0x9c>)
 80017a6:	f005 f93f 	bl	8006a28 <HAL_GPIO_WritePin>
	return;
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
}
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40020000 	.word	0x40020000

080017b8 <draw_power>:




void draw_power(short feed_status)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
	int k=15;
 80017c2:	230f      	movs	r3, #15
 80017c4:	617b      	str	r3, [r7, #20]
	int m=0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]

	for(int i=0;i<100;i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	e041      	b.n	8001854 <draw_power+0x9c>
	{
		for(int j=0;j<99;j++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	e038      	b.n	8001848 <draw_power+0x90>
		{
			TFT9341_DrawPixel(20+j,70+i,(((POWER[m]>>k)&0x0001))*((0x07E0)*(feed_status==1)+(0xf800)*(feed_status==0))); //0xf800 red
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f103 0014 	add.w	r0, r3, #20
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f103 0446 	add.w	r4, r3, #70	; 0x46
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <draw_power+0xac>)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ea:	461a      	mov	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa42 f303 	asr.w	r3, r2, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d102      	bne.n	8001808 <draw_power+0x50>
 8001802:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001806:	e000      	b.n	800180a <draw_power+0x52>
 8001808:	2100      	movs	r1, #0
 800180a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <draw_power+0x60>
 8001812:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001816:	e000      	b.n	800181a <draw_power+0x62>
 8001818:	2300      	movs	r3, #0
 800181a:	440b      	add	r3, r1
 800181c:	b29b      	uxth	r3, r3
 800181e:	fb12 f303 	smulbb	r3, r2, r3
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4621      	mov	r1, r4
 8001828:	f003 fa4c 	bl	8004cc4 <TFT9341_DrawPixel>

			if(k==0)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d104      	bne.n	800183c <draw_power+0x84>
			{
				k=16;
 8001832:	2310      	movs	r3, #16
 8001834:	617b      	str	r3, [r7, #20]
				m++;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	3301      	adds	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
			}
			k--;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3b01      	subs	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
		for(int j=0;j<99;j++)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3301      	adds	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b62      	cmp	r3, #98	; 0x62
 800184c:	ddc3      	ble.n	80017d6 <draw_power+0x1e>
	for(int i=0;i<100;i++)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b63      	cmp	r3, #99	; 0x63
 8001858:	ddba      	ble.n	80017d0 <draw_power+0x18>
		}
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	20000030 	.word	0x20000030

08001868 <draw_lock>:


void draw_lock(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
	int k=15;
 800186e:	230f      	movs	r3, #15
 8001870:	60fb      	str	r3, [r7, #12]
	int m=0;
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<40;i++) // y dimensions
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	e02c      	b.n	80018d6 <draw_lock+0x6e>
	{
		for(int j=0;j<30;j++)
 800187c:	2300      	movs	r3, #0
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	e023      	b.n	80018ca <draw_lock+0x62>
		{
			TFT9341_DrawPixel(5+j,192+i,(((LOCK[m]>>k)&0x0001))*(0xffff)); //0xf800 red
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	1d58      	adds	r0, r3, #5
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 800188c:	4a16      	ldr	r2, [pc, #88]	; (80018e8 <draw_lock+0x80>)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001894:	461a      	mov	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	fa42 f303 	asr.w	r3, r2, r3
 800189c:	b29b      	uxth	r3, r3
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	425b      	negs	r3, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	f003 fa0b 	bl	8004cc4 <TFT9341_DrawPixel>

			if(k==0)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d104      	bne.n	80018be <draw_lock+0x56>
			{
				k=16;
 80018b4:	2310      	movs	r3, #16
 80018b6:	60fb      	str	r3, [r7, #12]
				m++;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	3301      	adds	r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
			}
			k--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
		for(int j=0;j<30;j++)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b1d      	cmp	r3, #29
 80018ce:	ddd8      	ble.n	8001882 <draw_lock+0x1a>
	for(int i=0;i<40;i++) // y dimensions
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3301      	adds	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b27      	cmp	r3, #39	; 0x27
 80018da:	ddcf      	ble.n	800187c <draw_lock+0x14>
		}
	}
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000508 	.word	0x20000508

080018ec <draw_gear>:

void draw_gear(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
	int k=15;
 80018f2:	230f      	movs	r3, #15
 80018f4:	60fb      	str	r3, [r7, #12]
	int m=0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<40;i++) // y dimensions
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	e02b      	b.n	8001958 <draw_gear+0x6c>
	{
		for(int j=0;j<40;j++)
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	e022      	b.n	800194c <draw_gear+0x60>
		{
			TFT9341_DrawPixel(5+j,5+i,(((GEAR[m]>>k)&0x0001))*(0xffff)); //0xf800 red
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	1d58      	adds	r0, r3, #5
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	1d59      	adds	r1, r3, #5
 800190e:	4a16      	ldr	r2, [pc, #88]	; (8001968 <draw_gear+0x7c>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	fa42 f303 	asr.w	r3, r2, r3
 800191e:	b29b      	uxth	r3, r3
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	b29b      	uxth	r3, r3
 8001926:	425b      	negs	r3, r3
 8001928:	b29b      	uxth	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	f003 f9ca 	bl	8004cc4 <TFT9341_DrawPixel>

			if(k==0)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d104      	bne.n	8001940 <draw_gear+0x54>
			{
				k=16;
 8001936:	2310      	movs	r3, #16
 8001938:	60fb      	str	r3, [r7, #12]
				m++;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3301      	adds	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
			}
			k--;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3b01      	subs	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
		for(int j=0;j<40;j++)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b27      	cmp	r3, #39	; 0x27
 8001950:	ddd9      	ble.n	8001906 <draw_gear+0x1a>
	for(int i=0;i<40;i++) // y dimensions
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3301      	adds	r3, #1
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b27      	cmp	r3, #39	; 0x27
 800195c:	ddd0      	ble.n	8001900 <draw_gear+0x14>
		}
	}
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200005a0 	.word	0x200005a0

0800196c <draw_back>:

void draw_back()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
	int k=15;
 8001972:	230f      	movs	r3, #15
 8001974:	60fb      	str	r3, [r7, #12]
	int m=0;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<29;i++)
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	e02d      	b.n	80019dc <draw_back+0x70>
	{
		for(int j=0;j<40;j++)
 8001980:	2300      	movs	r3, #0
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	e024      	b.n	80019d0 <draw_back+0x64>
		{
			TFT9341_DrawPixel(15+j,190+i,(((BACK[m]>>k)&0x0001))*0xffff); //0xf800 red
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f103 000f 	add.w	r0, r3, #15
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f103 01be 	add.w	r1, r3, #190	; 0xbe
 8001992:	4a16      	ldr	r2, [pc, #88]	; (80019ec <draw_back+0x80>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	fa42 f303 	asr.w	r3, r2, r3
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	425b      	negs	r3, r3
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	f003 f988 	bl	8004cc4 <TFT9341_DrawPixel>

			if(k==0)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d104      	bne.n	80019c4 <draw_back+0x58>
			{
				k=16;
 80019ba:	2310      	movs	r3, #16
 80019bc:	60fb      	str	r3, [r7, #12]
				m++;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
			}
			k--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
		for(int j=0;j<40;j++)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b27      	cmp	r3, #39	; 0x27
 80019d4:	ddd7      	ble.n	8001986 <draw_back+0x1a>
	for(int i=0;i<29;i++)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3301      	adds	r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b1c      	cmp	r3, #28
 80019e0:	ddce      	ble.n	8001980 <draw_back+0x14>
		}
	}
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000668 	.word	0x20000668

080019f0 <draw_main>:


void draw_main()
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b08b      	sub	sp, #44	; 0x2c
 80019f4:	af02      	add	r7, sp, #8
	char str[5];	
	//char str[4];


	if(prev_day!=curr_day||prev_menu!=menu || update)
 80019f6:	4b9d      	ldr	r3, [pc, #628]	; (8001c6c <draw_main+0x27c>)
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	4b9d      	ldr	r3, [pc, #628]	; (8001c70 <draw_main+0x280>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d10d      	bne.n	8001a1e <draw_main+0x2e>
 8001a02:	4b9c      	ldr	r3, [pc, #624]	; (8001c74 <draw_main+0x284>)
 8001a04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a08:	4b9b      	ldr	r3, [pc, #620]	; (8001c78 <draw_main+0x288>)
 8001a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d105      	bne.n	8001a1e <draw_main+0x2e>
 8001a12:	4b9a      	ldr	r3, [pc, #616]	; (8001c7c <draw_main+0x28c>)
 8001a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 81f0 	beq.w	8001dfe <draw_main+0x40e>
	{

		count_var++;
 8001a1e:	4b98      	ldr	r3, [pc, #608]	; (8001c80 <draw_main+0x290>)
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	4b94      	ldr	r3, [pc, #592]	; (8001c80 <draw_main+0x290>)
 8001a2e:	801a      	strh	r2, [r3, #0]
		update=0;
 8001a30:	4b92      	ldr	r3, [pc, #584]	; (8001c7c <draw_main+0x28c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	801a      	strh	r2, [r3, #0]
		prev_day=curr_day;
 8001a36:	4b8e      	ldr	r3, [pc, #568]	; (8001c70 <draw_main+0x280>)
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	4b8c      	ldr	r3, [pc, #560]	; (8001c6c <draw_main+0x27c>)
 8001a3c:	701a      	strb	r2, [r3, #0]
		prev_menu=menu;
 8001a3e:	4b8e      	ldr	r3, [pc, #568]	; (8001c78 <draw_main+0x288>)
 8001a40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a44:	4b8b      	ldr	r3, [pc, #556]	; (8001c74 <draw_main+0x284>)
 8001a46:	801a      	strh	r2, [r3, #0]
		selection=0;
 8001a48:	4b8e      	ldr	r3, [pc, #568]	; (8001c84 <draw_main+0x294>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	801a      	strh	r2, [r3, #0]
		TFT9341_FillScreen(0x0000);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f003 f91c 	bl	8004c8c <TFT9341_FillScreen>
		TFT9341_SetFont(&Font20);
 8001a54:	488c      	ldr	r0, [pc, #560]	; (8001c88 <draw_main+0x298>)
 8001a56:	f003 f991 	bl	8004d7c <TFT9341_SetFont>
		//TFT9341_DrawRect(0xffff,8,8,34,34);
		TFT9341_SetTextColor(0xffff);
 8001a5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a5e:	f003 f96d 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_String(60,15,"Voermachine!");
 8001a62:	4a8a      	ldr	r2, [pc, #552]	; (8001c8c <draw_main+0x29c>)
 8001a64:	210f      	movs	r1, #15
 8001a66:	203c      	movs	r0, #60	; 0x3c
 8001a68:	f003 fa46 	bl	8004ef8 <TFT9341_String>
		// Draw feed times and amounts:
		TFT9341_SetTextColor(0x0000);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f003 f965 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font24);
 8001a72:	4887      	ldr	r0, [pc, #540]	; (8001c90 <draw_main+0x2a0>)
 8001a74:	f003 f982 	bl	8004d7c <TFT9341_SetFont>
		// Erase previous
		for(int i=0;i<(prev_feed_number);i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	e060      	b.n	8001b40 <draw_main+0x150>
		{
			sprintf(str,"%d:%d",prev_feed_time[i][0],prev_feed_time[i][1]);
 8001a7e:	4a85      	ldr	r2, [pc, #532]	; (8001c94 <draw_main+0x2a4>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4a82      	ldr	r2, [pc, #520]	; (8001c94 <draw_main+0x2a4>)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a94:	4638      	mov	r0, r7
 8001a96:	460a      	mov	r2, r1
 8001a98:	497f      	ldr	r1, [pc, #508]	; (8001c98 <draw_main+0x2a8>)
 8001a9a:	f008 f8a1 	bl	8009be0 <siprintf>
			TFT9341_String(140,90+i*40+((2-prev_feed_number)*20),str);
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	4b7b      	ldr	r3, [pc, #492]	; (8001c9c <draw_main+0x2ac>)
 8001aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab2:	f1c3 0302 	rsb	r3, r3, #2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	0089      	lsls	r1, r1, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	335a      	adds	r3, #90	; 0x5a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	463a      	mov	r2, r7
 8001acc:	4619      	mov	r1, r3
 8001ace:	208c      	movs	r0, #140	; 0x8c
 8001ad0:	f003 fa12 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"%d",prev_feed_amount[i]);
 8001ad4:	4a72      	ldr	r2, [pc, #456]	; (8001ca0 <draw_main+0x2b0>)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001adc:	461a      	mov	r2, r3
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4970      	ldr	r1, [pc, #448]	; (8001ca4 <draw_main+0x2b4>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f008 f87c 	bl	8009be0 <siprintf>
			TFT9341_String(250,90+i*40+((2-prev_feed_number)*20),strcat(str,"g"));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b69      	ldr	r3, [pc, #420]	; (8001c9c <draw_main+0x2ac>)
 8001af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afc:	f1c3 0302 	rsb	r3, r3, #2
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4619      	mov	r1, r3
 8001b04:	0089      	lsls	r1, r1, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	335a      	adds	r3, #90	; 0x5a
 8001b12:	b29c      	uxth	r4, r3
 8001b14:	463b      	mov	r3, r7
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fb6c 	bl	80001f4 <strlen>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	463b      	mov	r3, r7
 8001b22:	4413      	add	r3, r2
 8001b24:	4960      	ldr	r1, [pc, #384]	; (8001ca8 <draw_main+0x2b8>)
 8001b26:	461a      	mov	r2, r3
 8001b28:	460b      	mov	r3, r1
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	8013      	strh	r3, [r2, #0]
 8001b2e:	463b      	mov	r3, r7
 8001b30:	461a      	mov	r2, r3
 8001b32:	4621      	mov	r1, r4
 8001b34:	20fa      	movs	r0, #250	; 0xfa
 8001b36:	f003 f9df 	bl	8004ef8 <TFT9341_String>
		for(int i=0;i<(prev_feed_number);i++)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <draw_main+0x2ac>)
 8001b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b46:	461a      	mov	r2, r3
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	db97      	blt.n	8001a7e <draw_main+0x8e>
		}
		TFT9341_SetTextColor(0xFFFF);
 8001b4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b52:	f003 f8f3 	bl	8004d3c <TFT9341_SetTextColor>
		// draw new
		for(int i=0;i<(feed_number);i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	e06f      	b.n	8001c3c <draw_main+0x24c>
		{
			sprintf(str,"%d:%d",feed_time[i][0],feed_time[i][1]);
 8001b5c:	4a53      	ldr	r2, [pc, #332]	; (8001cac <draw_main+0x2bc>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4a51      	ldr	r2, [pc, #324]	; (8001cac <draw_main+0x2bc>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b72:	4638      	mov	r0, r7
 8001b74:	460a      	mov	r2, r1
 8001b76:	4948      	ldr	r1, [pc, #288]	; (8001c98 <draw_main+0x2a8>)
 8001b78:	f008 f832 	bl	8009be0 <siprintf>

			TFT9341_String(140,90+i*40+((2-feed_number)*20),time_text(feed_time[i][0],feed_time[i][1],1));
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	0092      	lsls	r2, r2, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <draw_main+0x2c0>)
 8001b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b90:	f1c3 0302 	rsb	r3, r3, #2
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4619      	mov	r1, r3
 8001b98:	0089      	lsls	r1, r1, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	335a      	adds	r3, #90	; 0x5a
 8001ba6:	b29c      	uxth	r4, r3
 8001ba8:	4a40      	ldr	r2, [pc, #256]	; (8001cac <draw_main+0x2bc>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 8001bb0:	4a3e      	ldr	r2, [pc, #248]	; (8001cac <draw_main+0x2bc>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7ff f9b6 	bl	8000f30 <time_text>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4621      	mov	r1, r4
 8001bca:	208c      	movs	r0, #140	; 0x8c
 8001bcc:	f003 f994 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"%d",feed_amount[i]);
 8001bd0:	4a38      	ldr	r2, [pc, #224]	; (8001cb4 <draw_main+0x2c4>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4931      	ldr	r1, [pc, #196]	; (8001ca4 <draw_main+0x2b4>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f007 fffe 	bl	8009be0 <siprintf>
			TFT9341_String(250,90+i*40+((2-feed_number)*20),strcat(str,"g"));
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <draw_main+0x2c0>)
 8001bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf8:	f1c3 0302 	rsb	r3, r3, #2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	0089      	lsls	r1, r1, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	335a      	adds	r3, #90	; 0x5a
 8001c0e:	b29c      	uxth	r4, r3
 8001c10:	463b      	mov	r3, r7
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe faee 	bl	80001f4 <strlen>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	4413      	add	r3, r2
 8001c20:	4921      	ldr	r1, [pc, #132]	; (8001ca8 <draw_main+0x2b8>)
 8001c22:	461a      	mov	r2, r3
 8001c24:	460b      	mov	r3, r1
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	8013      	strh	r3, [r2, #0]
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4621      	mov	r1, r4
 8001c30:	20fa      	movs	r0, #250	; 0xfa
 8001c32:	f003 f961 	bl	8004ef8 <TFT9341_String>
		for(int i=0;i<(feed_number);i++)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <draw_main+0x2c0>)
 8001c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c42:	461a      	mov	r2, r3
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	4293      	cmp	r3, r2
 8001c48:	db88      	blt.n	8001b5c <draw_main+0x16c>
		}

		draw_lock();
 8001c4a:	f7ff fe0d 	bl	8001868 <draw_lock>
		draw_gear();
 8001c4e:	f7ff fe4d 	bl	80018ec <draw_gear>
		draw_power(feed_status);
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <draw_main+0x2c8>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fdad 	bl	80017b8 <draw_power>

		for(int i=0;i<4;i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e04b      	b.n	8001cfc <draw_main+0x30c>
		{
			for(int j=0;j<2;j++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	e03a      	b.n	8001ce0 <draw_main+0x2f0>
 8001c6a:	bf00      	nop
 8001c6c:	200006fe 	.word	0x200006fe
 8001c70:	200008ba 	.word	0x200008ba
 8001c74:	20000700 	.word	0x20000700
 8001c78:	200008bc 	.word	0x200008bc
 8001c7c:	200008b4 	.word	0x200008b4
 8001c80:	200008b8 	.word	0x200008b8
 8001c84:	20000aa8 	.word	0x20000aa8
 8001c88:	20000014 	.word	0x20000014
 8001c8c:	0800a500 	.word	0x0800a500
 8001c90:	2000001c 	.word	0x2000001c
 8001c94:	200008ec 	.word	0x200008ec
 8001c98:	0800a510 	.word	0x0800a510
 8001c9c:	2000002c 	.word	0x2000002c
 8001ca0:	200008fc 	.word	0x200008fc
 8001ca4:	0800a518 	.word	0x0800a518
 8001ca8:	0800a51c 	.word	0x0800a51c
 8001cac:	20000a44 	.word	0x20000a44
 8001cb0:	200006fc 	.word	0x200006fc
 8001cb4:	20000b20 	.word	0x20000b20
 8001cb8:	200006fa 	.word	0x200006fa
			{
				prev_feed_time[i][j]=feed_time[i][j];
 8001cbc:	4993      	ldr	r1, [pc, #588]	; (8001f0c <draw_main+0x51c>)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005a      	lsls	r2, r3, #1
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
 8001cca:	4991      	ldr	r1, [pc, #580]	; (8001f10 <draw_main+0x520>)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005a      	lsls	r2, r3, #1
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j=0;j<2;j++)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	ddea      	ble.n	8001cbc <draw_main+0x2cc>

			}
			prev_feed_amount[i]=feed_amount[i];
 8001ce6:	4a8b      	ldr	r2, [pc, #556]	; (8001f14 <draw_main+0x524>)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001cee:	4a8a      	ldr	r2, [pc, #552]	; (8001f18 <draw_main+0x528>)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<4;i++)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	ddb0      	ble.n	8001c64 <draw_main+0x274>
		}

		prev_feed_number=feed_number;
 8001d02:	4b86      	ldr	r3, [pc, #536]	; (8001f1c <draw_main+0x52c>)
 8001d04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d08:	4b85      	ldr	r3, [pc, #532]	; (8001f20 <draw_main+0x530>)
 8001d0a:	801a      	strh	r2, [r3, #0]
		TFT9341_String(140,70,"08:00 10g");
		TFT9341_String(140,110,"13:00 10g");
		TFT9341_String(140,150,"18:00 10g");

		 */
		TFT9341_String(50,210,"Ma");
 8001d0c:	4a85      	ldr	r2, [pc, #532]	; (8001f24 <draw_main+0x534>)
 8001d0e:	21d2      	movs	r1, #210	; 0xd2
 8001d10:	2032      	movs	r0, #50	; 0x32
 8001d12:	f003 f8f1 	bl	8004ef8 <TFT9341_String>
		TFT9341_String(88,210,"Di");
 8001d16:	4a84      	ldr	r2, [pc, #528]	; (8001f28 <draw_main+0x538>)
 8001d18:	21d2      	movs	r1, #210	; 0xd2
 8001d1a:	2058      	movs	r0, #88	; 0x58
 8001d1c:	f003 f8ec 	bl	8004ef8 <TFT9341_String>
		TFT9341_String(126,210,"Wo");
 8001d20:	4a82      	ldr	r2, [pc, #520]	; (8001f2c <draw_main+0x53c>)
 8001d22:	21d2      	movs	r1, #210	; 0xd2
 8001d24:	207e      	movs	r0, #126	; 0x7e
 8001d26:	f003 f8e7 	bl	8004ef8 <TFT9341_String>
		TFT9341_String(164,210,"Do");
 8001d2a:	4a81      	ldr	r2, [pc, #516]	; (8001f30 <draw_main+0x540>)
 8001d2c:	21d2      	movs	r1, #210	; 0xd2
 8001d2e:	20a4      	movs	r0, #164	; 0xa4
 8001d30:	f003 f8e2 	bl	8004ef8 <TFT9341_String>
		TFT9341_String(202,210,"Vr");
 8001d34:	4a7f      	ldr	r2, [pc, #508]	; (8001f34 <draw_main+0x544>)
 8001d36:	21d2      	movs	r1, #210	; 0xd2
 8001d38:	20ca      	movs	r0, #202	; 0xca
 8001d3a:	f003 f8dd 	bl	8004ef8 <TFT9341_String>
		TFT9341_String(240,210,"Za");
 8001d3e:	4a7e      	ldr	r2, [pc, #504]	; (8001f38 <draw_main+0x548>)
 8001d40:	21d2      	movs	r1, #210	; 0xd2
 8001d42:	20f0      	movs	r0, #240	; 0xf0
 8001d44:	f003 f8d8 	bl	8004ef8 <TFT9341_String>
		TFT9341_String(278,210,"Zo");
 8001d48:	4a7c      	ldr	r2, [pc, #496]	; (8001f3c <draw_main+0x54c>)
 8001d4a:	21d2      	movs	r1, #210	; 0xd2
 8001d4c:	f44f 708b 	mov.w	r0, #278	; 0x116
 8001d50:	f003 f8d2 	bl	8004ef8 <TFT9341_String>



		//TFT9341_DrawLine(0x0000,50+38*(0),232,115+38*(6),232);
		int m;
		for(int i=1;i<8;i++)
 8001d54:	2301      	movs	r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	e04e      	b.n	8001df8 <draw_main+0x408>
				{
					m=7;
				}
			 */
			//m=i;
			m=i-1;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
			if(m==0)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <draw_main+0x37a>
			{
				m=7;
 8001d66:	2307      	movs	r3, #7
 8001d68:	60fb      	str	r3, [r7, #12]
			}
			if(curr_day==i)
 8001d6a:	4b75      	ldr	r3, [pc, #468]	; (8001f40 <draw_main+0x550>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d11f      	bne.n	8001db6 <draw_main+0x3c6>
			{
				//TFT9341_DrawLine(0xffff,50+38*(m-1),232,80+38*(m-1),232); //115
				TFT9341_FillRect(50+38*(m-1), 232, 80+38*(m-1),234, 0xffff);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	00d2      	lsls	r2, r2, #3
 8001d80:	441a      	add	r2, r3
 8001d82:	0052      	lsls	r2, r2, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3332      	adds	r3, #50	; 0x32
 8001d8c:	b298      	uxth	r0, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	00d2      	lsls	r2, r2, #3
 8001d98:	441a      	add	r2, r3
 8001d9a:	0052      	lsls	r2, r2, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3350      	adds	r3, #80	; 0x50
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	23ea      	movs	r3, #234	; 0xea
 8001dae:	21e8      	movs	r1, #232	; 0xe8
 8001db0:	f002 fef8 	bl	8004ba4 <TFT9341_FillRect>
 8001db4:	e01d      	b.n	8001df2 <draw_main+0x402>
			}
			else
			{
				//TFT9341_DrawLine(0x0000,50+38*(m-1),232,80+38*(m-1),232);

				TFT9341_FillRect(50+38*(m-1), 232, 80+38*(m-1),234, 0x0000);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	00d2      	lsls	r2, r2, #3
 8001dc0:	441a      	add	r2, r3
 8001dc2:	0052      	lsls	r2, r2, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3332      	adds	r3, #50	; 0x32
 8001dcc:	b298      	uxth	r0, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	00d2      	lsls	r2, r2, #3
 8001dd8:	441a      	add	r2, r3
 8001dda:	0052      	lsls	r2, r2, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3350      	adds	r3, #80	; 0x50
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	2300      	movs	r3, #0
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	23ea      	movs	r3, #234	; 0xea
 8001dec:	21e8      	movs	r1, #232	; 0xe8
 8001dee:	f002 fed9 	bl	8004ba4 <TFT9341_FillRect>
		for(int i=1;i<8;i++)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b07      	cmp	r3, #7
 8001dfc:	ddad      	ble.n	8001d5a <draw_main+0x36a>
	}




	if(prev_feed_status!=feed_status)
 8001dfe:	4b51      	ldr	r3, [pc, #324]	; (8001f44 <draw_main+0x554>)
 8001e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <draw_main+0x558>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d00a      	beq.n	8001e24 <draw_main+0x434>
	{
		draw_power(feed_status);
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	; (8001f48 <draw_main+0x558>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fccf 	bl	80017b8 <draw_power>
		prev_feed_status=feed_status;
 8001e1a:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <draw_main+0x558>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	4b48      	ldr	r3, [pc, #288]	; (8001f44 <draw_main+0x554>)
 8001e22:	801a      	strh	r2, [r3, #0]
	}




	if(selection!=prev_selection && selection_wheel==-1)
 8001e24:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <draw_main+0x55c>)
 8001e26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <draw_main+0x560>)
 8001e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f000 8091 	beq.w	8001f58 <draw_main+0x568>
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <draw_main+0x564>)
 8001e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e40:	f040 808a 	bne.w	8001f58 <draw_main+0x568>
	{
		limit_selection(0, 2);
 8001e44:	2102      	movs	r1, #2
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff f95c 	bl	8001104 <limit_selection>
		prev_selection=selection;
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <draw_main+0x55c>)
 8001e4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e52:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <draw_main+0x560>)
 8001e54:	801a      	strh	r2, [r3, #0]
		switch(selection)
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <draw_main+0x55c>)
 8001e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d03a      	beq.n	8001ed6 <draw_main+0x4e6>
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	dc7a      	bgt.n	8001f5a <draw_main+0x56a>
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <draw_main+0x47e>
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d01a      	beq.n	8001ea2 <draw_main+0x4b2>
 8001e6c:	e075      	b.n	8001f5a <draw_main+0x56a>
		{
		case 0:
		{
			TFT9341_FillRect(5,50,45,53,0xFD60);
 8001e6e:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2335      	movs	r3, #53	; 0x35
 8001e76:	222d      	movs	r2, #45	; 0x2d
 8001e78:	2132      	movs	r1, #50	; 0x32
 8001e7a:	2005      	movs	r0, #5
 8001e7c:	f002 fe92 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_FillRect(20,175,120,178,0x0000);
 8001e80:	2300      	movs	r3, #0
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	23b2      	movs	r3, #178	; 0xb2
 8001e86:	2278      	movs	r2, #120	; 0x78
 8001e88:	21af      	movs	r1, #175	; 0xaf
 8001e8a:	2014      	movs	r0, #20
 8001e8c:	f002 fe8a 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_FillRect(5,235,35,238,0x0000);
 8001e90:	2300      	movs	r3, #0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	23ee      	movs	r3, #238	; 0xee
 8001e96:	2223      	movs	r2, #35	; 0x23
 8001e98:	21eb      	movs	r1, #235	; 0xeb
 8001e9a:	2005      	movs	r0, #5
 8001e9c:	f002 fe82 	bl	8004ba4 <TFT9341_FillRect>
			break;
 8001ea0:	e05b      	b.n	8001f5a <draw_main+0x56a>
		}
		case 1:
		{
			TFT9341_FillRect(5,50,45,53,0x0000);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2335      	movs	r3, #53	; 0x35
 8001ea8:	222d      	movs	r2, #45	; 0x2d
 8001eaa:	2132      	movs	r1, #50	; 0x32
 8001eac:	2005      	movs	r0, #5
 8001eae:	f002 fe79 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_FillRect(20,175,120,178,0xFD60);
 8001eb2:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	23b2      	movs	r3, #178	; 0xb2
 8001eba:	2278      	movs	r2, #120	; 0x78
 8001ebc:	21af      	movs	r1, #175	; 0xaf
 8001ebe:	2014      	movs	r0, #20
 8001ec0:	f002 fe70 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_FillRect(5,235,35,238,0x0000);
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	23ee      	movs	r3, #238	; 0xee
 8001eca:	2223      	movs	r2, #35	; 0x23
 8001ecc:	21eb      	movs	r1, #235	; 0xeb
 8001ece:	2005      	movs	r0, #5
 8001ed0:	f002 fe68 	bl	8004ba4 <TFT9341_FillRect>
				feed_status=1-feed_status;
				//draw_main();
				button_pressed=false;
			}
			 */
			break;
 8001ed4:	e041      	b.n	8001f5a <draw_main+0x56a>
		}
		case 2:
		{
			TFT9341_FillRect(5,50,45,53,0x0000);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2335      	movs	r3, #53	; 0x35
 8001edc:	222d      	movs	r2, #45	; 0x2d
 8001ede:	2132      	movs	r1, #50	; 0x32
 8001ee0:	2005      	movs	r0, #5
 8001ee2:	f002 fe5f 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_FillRect(20,175,120,178,0x0000);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	23b2      	movs	r3, #178	; 0xb2
 8001eec:	2278      	movs	r2, #120	; 0x78
 8001eee:	21af      	movs	r1, #175	; 0xaf
 8001ef0:	2014      	movs	r0, #20
 8001ef2:	f002 fe57 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_FillRect(5,235,35,238,0xFD60);
 8001ef6:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	23ee      	movs	r3, #238	; 0xee
 8001efe:	2223      	movs	r2, #35	; 0x23
 8001f00:	21eb      	movs	r1, #235	; 0xeb
 8001f02:	2005      	movs	r0, #5
 8001f04:	f002 fe4e 	bl	8004ba4 <TFT9341_FillRect>
			break;
 8001f08:	e027      	b.n	8001f5a <draw_main+0x56a>
 8001f0a:	bf00      	nop
 8001f0c:	20000a44 	.word	0x20000a44
 8001f10:	200008ec 	.word	0x200008ec
 8001f14:	20000b20 	.word	0x20000b20
 8001f18:	200008fc 	.word	0x200008fc
 8001f1c:	200006fc 	.word	0x200006fc
 8001f20:	2000002c 	.word	0x2000002c
 8001f24:	0800a520 	.word	0x0800a520
 8001f28:	0800a524 	.word	0x0800a524
 8001f2c:	0800a528 	.word	0x0800a528
 8001f30:	0800a52c 	.word	0x0800a52c
 8001f34:	0800a530 	.word	0x0800a530
 8001f38:	0800a534 	.word	0x0800a534
 8001f3c:	0800a538 	.word	0x0800a538
 8001f40:	200008ba 	.word	0x200008ba
 8001f44:	2000002e 	.word	0x2000002e
 8001f48:	200006fa 	.word	0x200006fa
 8001f4c:	20000aa8 	.word	0x20000aa8
 8001f50:	20000b78 	.word	0x20000b78
 8001f54:	2000070c 	.word	0x2000070c
		}
		}
	}
 8001f58:	bf00      	nop

	if(selection_wheel==0)
 8001f5a:	4b49      	ldr	r3, [pc, #292]	; (8002080 <draw_main+0x690>)
 8001f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f040 8086 	bne.w	8002072 <draw_main+0x682>
	{
		limit_selection(0, 1);
 8001f66:	2101      	movs	r1, #1
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff f8cb 	bl	8001104 <limit_selection>
		if(once==0)
 8001f6e:	4b45      	ldr	r3, [pc, #276]	; (8002084 <draw_main+0x694>)
 8001f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d141      	bne.n	8001ffc <draw_main+0x60c>
		{
			once=1;
 8001f78:	4b42      	ldr	r3, [pc, #264]	; (8002084 <draw_main+0x694>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	801a      	strh	r2, [r3, #0]
			//TFT9341_FillRect(55, 35, 320-55,40 , 0x00f0);
			TFT9341_FillRect(60, 40, 320-60,150 , 0x0000);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2396      	movs	r3, #150	; 0x96
 8001f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f88:	2128      	movs	r1, #40	; 0x28
 8001f8a:	203c      	movs	r0, #60	; 0x3c
 8001f8c:	f002 fe0a 	bl	8004ba4 <TFT9341_FillRect>

			TFT9341_SetTextColor(0xffff);
 8001f90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f94:	f002 fed2 	bl	8004d3c <TFT9341_SetTextColor>
			TFT9341_SetFont(&Font16);
 8001f98:	483b      	ldr	r0, [pc, #236]	; (8002088 <draw_main+0x698>)
 8001f9a:	f002 feef 	bl	8004d7c <TFT9341_SetFont>
			TFT9341_String(62, 50, "Weet je het zeker?");
 8001f9e:	4a3b      	ldr	r2, [pc, #236]	; (800208c <draw_main+0x69c>)
 8001fa0:	2132      	movs	r1, #50	; 0x32
 8001fa2:	203e      	movs	r0, #62	; 0x3e
 8001fa4:	f002 ffa8 	bl	8004ef8 <TFT9341_String>

			TFT9341_FillRect(65, 85, 150, 125, 0x0E3F);
 8001fa8:	f640 633f 	movw	r3, #3647	; 0xe3f
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	237d      	movs	r3, #125	; 0x7d
 8001fb0:	2296      	movs	r2, #150	; 0x96
 8001fb2:	2155      	movs	r1, #85	; 0x55
 8001fb4:	2041      	movs	r0, #65	; 0x41
 8001fb6:	f002 fdf5 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_FillRect(170, 85, 255, 125, 0x0E3F);
 8001fba:	f640 633f 	movw	r3, #3647	; 0xe3f
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	237d      	movs	r3, #125	; 0x7d
 8001fc2:	22ff      	movs	r2, #255	; 0xff
 8001fc4:	2155      	movs	r1, #85	; 0x55
 8001fc6:	20aa      	movs	r0, #170	; 0xaa
 8001fc8:	f002 fdec 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_SetFont(&Font24);
 8001fcc:	4830      	ldr	r0, [pc, #192]	; (8002090 <draw_main+0x6a0>)
 8001fce:	f002 fed5 	bl	8004d7c <TFT9341_SetFont>
			TFT9341_SetTextColor(0xf000);
 8001fd2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001fd6:	f002 feb1 	bl	8004d3c <TFT9341_SetTextColor>
			TFT9341_SetBackColor(0x0E3F);
 8001fda:	f640 603f 	movw	r0, #3647	; 0xe3f
 8001fde:	f002 febd 	bl	8004d5c <TFT9341_SetBackColor>
			TFT9341_String(85,95,"Nee");
 8001fe2:	4a2c      	ldr	r2, [pc, #176]	; (8002094 <draw_main+0x6a4>)
 8001fe4:	215f      	movs	r1, #95	; 0x5f
 8001fe6:	2055      	movs	r0, #85	; 0x55
 8001fe8:	f002 ff86 	bl	8004ef8 <TFT9341_String>
			TFT9341_String(195,95,"Ja");
 8001fec:	4a2a      	ldr	r2, [pc, #168]	; (8002098 <draw_main+0x6a8>)
 8001fee:	215f      	movs	r1, #95	; 0x5f
 8001ff0:	20c3      	movs	r0, #195	; 0xc3
 8001ff2:	f002 ff81 	bl	8004ef8 <TFT9341_String>
			TFT9341_SetBackColor(0x0000);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f002 feb0 	bl	8004d5c <TFT9341_SetBackColor>

		}

		if(selection!=prev_selection)
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <draw_main+0x6ac>)
 8001ffe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002002:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <draw_main+0x6b0>)
 8002004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002008:	429a      	cmp	r2, r3
 800200a:	d035      	beq.n	8002078 <draw_main+0x688>
		{
			if(selection==0)
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <draw_main+0x6ac>)
 800200e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d111      	bne.n	800203a <draw_main+0x64a>
			{
				TFT9341_FillRect(170, 135, 255, 145, 0x0000);
 8002016:	2300      	movs	r3, #0
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2391      	movs	r3, #145	; 0x91
 800201c:	22ff      	movs	r2, #255	; 0xff
 800201e:	2187      	movs	r1, #135	; 0x87
 8002020:	20aa      	movs	r0, #170	; 0xaa
 8002022:	f002 fdbf 	bl	8004ba4 <TFT9341_FillRect>
				TFT9341_FillRect(65, 135, 150, 145, 0xf000);
 8002026:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2391      	movs	r3, #145	; 0x91
 800202e:	2296      	movs	r2, #150	; 0x96
 8002030:	2187      	movs	r1, #135	; 0x87
 8002032:	2041      	movs	r0, #65	; 0x41
 8002034:	f002 fdb6 	bl	8004ba4 <TFT9341_FillRect>
 8002038:	e015      	b.n	8002066 <draw_main+0x676>
			}
			else if(selection==1)
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <draw_main+0x6ac>)
 800203c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d110      	bne.n	8002066 <draw_main+0x676>
			{
				TFT9341_FillRect(170, 135, 255, 145, 0xf000);
 8002044:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2391      	movs	r3, #145	; 0x91
 800204c:	22ff      	movs	r2, #255	; 0xff
 800204e:	2187      	movs	r1, #135	; 0x87
 8002050:	20aa      	movs	r0, #170	; 0xaa
 8002052:	f002 fda7 	bl	8004ba4 <TFT9341_FillRect>
				TFT9341_FillRect(65, 135, 150, 145, 0x0000);
 8002056:	2300      	movs	r3, #0
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2391      	movs	r3, #145	; 0x91
 800205c:	2296      	movs	r2, #150	; 0x96
 800205e:	2187      	movs	r1, #135	; 0x87
 8002060:	2041      	movs	r0, #65	; 0x41
 8002062:	f002 fd9f 	bl	8004ba4 <TFT9341_FillRect>
			}
			prev_selection=selection;
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <draw_main+0x6ac>)
 8002068:	f9b3 2000 	ldrsh.w	r2, [r3]
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <draw_main+0x6b0>)
 800206e:	801a      	strh	r2, [r3, #0]
	 */



	//TFT9341_DrawRect(0xffff,5,200,35,235);
}
 8002070:	e002      	b.n	8002078 <draw_main+0x688>
		once=0;
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <draw_main+0x694>)
 8002074:	2200      	movs	r2, #0
 8002076:	801a      	strh	r2, [r3, #0]
}
 8002078:	bf00      	nop
 800207a:	3724      	adds	r7, #36	; 0x24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd90      	pop	{r4, r7, pc}
 8002080:	2000070c 	.word	0x2000070c
 8002084:	200008b6 	.word	0x200008b6
 8002088:	2000000c 	.word	0x2000000c
 800208c:	0800a53c 	.word	0x0800a53c
 8002090:	2000001c 	.word	0x2000001c
 8002094:	0800a550 	.word	0x0800a550
 8002098:	0800a554 	.word	0x0800a554
 800209c:	20000aa8 	.word	0x20000aa8
 80020a0:	20000b78 	.word	0x20000b78

080020a4 <draw_extra_options>:
		}
	}
}	

void draw_extra_options(void) //overige instellingen
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b09f      	sub	sp, #124	; 0x7c
 80020a8:	af02      	add	r7, sp, #8
	char str[50];
	short x_pos=15;
 80020aa:	230f      	movs	r3, #15
 80020ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	short y_pos[7];
	y_pos[0]=15;
 80020b0:	230f      	movs	r3, #15
 80020b2:	80bb      	strh	r3, [r7, #4]

	if(sub_menu!=prev_sub_menu||update)
 80020b4:	4bbc      	ldr	r3, [pc, #752]	; (80023a8 <draw_extra_options+0x304>)
 80020b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020ba:	4bbc      	ldr	r3, [pc, #752]	; (80023ac <draw_extra_options+0x308>)
 80020bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d105      	bne.n	80020d0 <draw_extra_options+0x2c>
 80020c4:	4bba      	ldr	r3, [pc, #744]	; (80023b0 <draw_extra_options+0x30c>)
 80020c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 810f 	beq.w	80022ee <draw_extra_options+0x24a>
	{
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80020d0:	2301      	movs	r3, #1
 80020d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020d4:	e015      	b.n	8002102 <draw_extra_options+0x5e>
		{
			y_pos[i]=y_pos[i-1]+30;
 80020d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d8:	3b01      	subs	r3, #1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80020e0:	4413      	add	r3, r2
 80020e2:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	331e      	adds	r3, #30
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	b21a      	sxth	r2, r3
 80020ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80020f6:	440b      	add	r3, r1
 80020f8:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80020fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fe:	3301      	adds	r3, #1
 8002100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002104:	2b06      	cmp	r3, #6
 8002106:	d9e6      	bls.n	80020d6 <draw_extra_options+0x32>
		}
		TFT9341_FillScreen(0x0000);
 8002108:	2000      	movs	r0, #0
 800210a:	f002 fdbf 	bl	8004c8c <TFT9341_FillScreen>
		TFT9341_SetTextColor(0xffff);
 800210e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002112:	f002 fe13 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8002116:	48a7      	ldr	r0, [pc, #668]	; (80023b4 <draw_extra_options+0x310>)
 8002118:	f002 fe30 	bl	8004d7c <TFT9341_SetFont>



		//sprintf(str,"Overige instellingen");
		//TFT9341_String(x_pos,y_pos[0],str);
		sprintf(str,"Time-out scherm : %s",timeout_vis());
 800211c:	f7ff f816 	bl	800114c <timeout_vis>
 8002120:	4602      	mov	r2, r0
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	49a4      	ldr	r1, [pc, #656]	; (80023b8 <draw_extra_options+0x314>)
 8002128:	4618      	mov	r0, r3
 800212a:	f007 fd59 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[0],str);
 800212e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002132:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002136:	b291      	uxth	r1, r2
 8002138:	f107 0214 	add.w	r2, r7, #20
 800213c:	4618      	mov	r0, r3
 800213e:	f002 fedb 	bl	8004ef8 <TFT9341_String>
		short percentage=screen_brightness/65500;
 8002142:	4b9e      	ldr	r3, [pc, #632]	; (80023bc <draw_extra_options+0x318>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	4a9d      	ldr	r2, [pc, #628]	; (80023c0 <draw_extra_options+0x31c>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0b1b      	lsrs	r3, r3, #12
 8002150:	b29b      	uxth	r3, r3
 8002152:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		sprintf(str,"Schermhelderheid:%d %%",percentage);
 8002156:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4999      	ldr	r1, [pc, #612]	; (80023c4 <draw_extra_options+0x320>)
 8002160:	4618      	mov	r0, r3
 8002162:	f007 fd3d 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[1],str);
 8002166:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800216a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800216e:	b291      	uxth	r1, r2
 8002170:	f107 0214 	add.w	r2, r7, #20
 8002174:	4618      	mov	r0, r3
 8002176:	f002 febf 	bl	8004ef8 <TFT9341_String>
		if(sound_feed==1)
 800217a:	4b93      	ldr	r3, [pc, #588]	; (80023c8 <draw_extra_options+0x324>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d010      	beq.n	80021a4 <draw_extra_options+0x100>
		{
			sprintf(str,"Geluid voeren       : AAN");
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4991      	ldr	r1, [pc, #580]	; (80023cc <draw_extra_options+0x328>)
 8002188:	4618      	mov	r0, r3
 800218a:	f007 fd29 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[2],str);
 800218e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002192:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002196:	b291      	uxth	r1, r2
 8002198:	f107 0214 	add.w	r2, r7, #20
 800219c:	4618      	mov	r0, r3
 800219e:	f002 feab 	bl	8004ef8 <TFT9341_String>
 80021a2:	e00f      	b.n	80021c4 <draw_extra_options+0x120>
		}
		else
		{
			sprintf(str,"Geluid voeren       : UIT");
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4989      	ldr	r1, [pc, #548]	; (80023d0 <draw_extra_options+0x32c>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f007 fd18 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[2],str);
 80021b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021b4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80021b8:	b291      	uxth	r1, r2
 80021ba:	f107 0214 	add.w	r2, r7, #20
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 fe9a 	bl	8004ef8 <TFT9341_String>
		}

		if(food_shake==1)
 80021c4:	4b83      	ldr	r3, [pc, #524]	; (80023d4 <draw_extra_options+0x330>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d010      	beq.n	80021ee <draw_extra_options+0x14a>
		{
			sprintf(str,"Trillen voer        : AAN");
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4981      	ldr	r1, [pc, #516]	; (80023d8 <draw_extra_options+0x334>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f007 fd04 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[3],str);
 80021d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80021e0:	b291      	uxth	r1, r2
 80021e2:	f107 0214 	add.w	r2, r7, #20
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 fe86 	bl	8004ef8 <TFT9341_String>
 80021ec:	e00f      	b.n	800220e <draw_extra_options+0x16a>
		}
		else
		{
			sprintf(str,"Trillen voer        : UIT");
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	497a      	ldr	r1, [pc, #488]	; (80023dc <draw_extra_options+0x338>)
 80021f4:	4618      	mov	r0, r3
 80021f6:	f007 fcf3 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[3],str);
 80021fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002202:	b291      	uxth	r1, r2
 8002204:	f107 0214 	add.w	r2, r7, #20
 8002208:	4618      	mov	r0, r3
 800220a:	f002 fe75 	bl	8004ef8 <TFT9341_String>
		}

		if(sound_intensity==0)
 800220e:	4b74      	ldr	r3, [pc, #464]	; (80023e0 <draw_extra_options+0x33c>)
 8002210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10f      	bne.n	8002238 <draw_extra_options+0x194>
		{
			sprintf(str,"Geluid knoppen      : UIT  ");
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4971      	ldr	r1, [pc, #452]	; (80023e4 <draw_extra_options+0x340>)
 800221e:	4618      	mov	r0, r3
 8002220:	f007 fcde 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 8002224:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002228:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800222c:	b291      	uxth	r1, r2
 800222e:	f107 0214 	add.w	r2, r7, #20
 8002232:	4618      	mov	r0, r3
 8002234:	f002 fe60 	bl	8004ef8 <TFT9341_String>
		}
		if(sound_intensity==1)
 8002238:	4b69      	ldr	r3, [pc, #420]	; (80023e0 <draw_extra_options+0x33c>)
 800223a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10f      	bne.n	8002262 <draw_extra_options+0x1be>
		{
			sprintf(str,"Geluid knoppen      : ZACHT");
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4968      	ldr	r1, [pc, #416]	; (80023e8 <draw_extra_options+0x344>)
 8002248:	4618      	mov	r0, r3
 800224a:	f007 fcc9 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 800224e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002252:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002256:	b291      	uxth	r1, r2
 8002258:	f107 0214 	add.w	r2, r7, #20
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fe4b 	bl	8004ef8 <TFT9341_String>
		}
		if(sound_intensity==2)
 8002262:	4b5f      	ldr	r3, [pc, #380]	; (80023e0 <draw_extra_options+0x33c>)
 8002264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d10f      	bne.n	800228c <draw_extra_options+0x1e8>
		{
			sprintf(str,"Geluid knoppen      : NORM ");
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	495e      	ldr	r1, [pc, #376]	; (80023ec <draw_extra_options+0x348>)
 8002272:	4618      	mov	r0, r3
 8002274:	f007 fcb4 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 8002278:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800227c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002280:	b291      	uxth	r1, r2
 8002282:	f107 0214 	add.w	r2, r7, #20
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fe36 	bl	8004ef8 <TFT9341_String>
		}
		if(sound_intensity==3)
 800228c:	4b54      	ldr	r3, [pc, #336]	; (80023e0 <draw_extra_options+0x33c>)
 800228e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d10f      	bne.n	80022b6 <draw_extra_options+0x212>
		{
			sprintf(str,"Geluid knoppen      : HARD ");
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4955      	ldr	r1, [pc, #340]	; (80023f0 <draw_extra_options+0x34c>)
 800229c:	4618      	mov	r0, r3
 800229e:	f007 fc9f 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 80022a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80022aa:	b291      	uxth	r1, r2
 80022ac:	f107 0214 	add.w	r2, r7, #20
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fe21 	bl	8004ef8 <TFT9341_String>
		}
		//sprintf(str,"Geluid intensiteit  : HOOG");
		//TFT9341_String(x_pos,y_pos[4],str);
		TFT9341_FillRect(x_pos,y_pos[0]+20,x_pos+80,y_pos[0]+22,0xFD60); // draw selection on #0
 80022b6:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
 80022ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3314      	adds	r3, #20
 80022c2:	b299      	uxth	r1, r3
 80022c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022c8:	3350      	adds	r3, #80	; 0x50
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3316      	adds	r3, #22
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	f64f 5460 	movw	r4, #64864	; 0xfd60
 80022da:	9400      	str	r4, [sp, #0]
 80022dc:	f002 fc62 	bl	8004ba4 <TFT9341_FillRect>
		draw_back();
 80022e0:	f7ff fb44 	bl	800196c <draw_back>
		prev_sub_menu=sub_menu;
 80022e4:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <draw_extra_options+0x304>)
 80022e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022ea:	4b30      	ldr	r3, [pc, #192]	; (80023ac <draw_extra_options+0x308>)
 80022ec:	801a      	strh	r2, [r3, #0]
	if(selection<0)
	{
	selection=6;
	}
	 */
	if(selection_wheel==-1)
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <draw_extra_options+0x350>)
 80022f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d103      	bne.n	8002302 <draw_extra_options+0x25e>
	{
		limit_selection(0, 5);
 80022fa:	2105      	movs	r1, #5
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7fe ff01 	bl	8001104 <limit_selection>
	}

	if(selection!=prev_selection ||update)
 8002302:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <draw_extra_options+0x354>)
 8002304:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002308:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <draw_extra_options+0x358>)
 800230a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230e:	429a      	cmp	r2, r3
 8002310:	d105      	bne.n	800231e <draw_extra_options+0x27a>
 8002312:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <draw_extra_options+0x30c>)
 8002314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80cd 	beq.w	80024b8 <draw_extra_options+0x414>
	{
		update=0;
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <draw_extra_options+0x30c>)
 8002320:	2200      	movs	r2, #0
 8002322:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002324:	2301      	movs	r3, #1
 8002326:	66bb      	str	r3, [r7, #104]	; 0x68
 8002328:	e015      	b.n	8002356 <draw_extra_options+0x2b2>
		{
			y_pos[i]=y_pos[i-1]+30;
 800232a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800232c:	3b01      	subs	r3, #1
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002334:	4413      	add	r3, r2
 8002336:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 800233a:	b29b      	uxth	r3, r3
 800233c:	331e      	adds	r3, #30
 800233e:	b29b      	uxth	r3, r3
 8002340:	b21a      	sxth	r2, r3
 8002342:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800234a:	440b      	add	r3, r1
 800234c:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002352:	3301      	adds	r3, #1
 8002354:	66bb      	str	r3, [r7, #104]	; 0x68
 8002356:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002358:	2b06      	cmp	r3, #6
 800235a:	d9e6      	bls.n	800232a <draw_extra_options+0x286>
		}

		if(selection!=5)
 800235c:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <draw_extra_options+0x354>)
 800235e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002362:	2b05      	cmp	r3, #5
 8002364:	d00b      	beq.n	800237e <draw_extra_options+0x2da>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0x0000);
 8002366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800236a:	3328      	adds	r3, #40	; 0x28
 800236c:	b29a      	uxth	r2, r3
 800236e:	2300      	movs	r3, #0
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	23e1      	movs	r3, #225	; 0xe1
 8002374:	21df      	movs	r1, #223	; 0xdf
 8002376:	200f      	movs	r0, #15
 8002378:	f002 fc14 	bl	8004ba4 <TFT9341_FillRect>
 800237c:	e011      	b.n	80023a2 <draw_extra_options+0x2fe>
		}
		else if(selection_wheel==-1)
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <draw_extra_options+0x350>)
 8002380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d10b      	bne.n	80023a2 <draw_extra_options+0x2fe>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0xFD60);
 800238a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800238e:	3328      	adds	r3, #40	; 0x28
 8002390:	b29a      	uxth	r2, r3
 8002392:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	23e1      	movs	r3, #225	; 0xe1
 800239a:	21df      	movs	r1, #223	; 0xdf
 800239c:	200f      	movs	r0, #15
 800239e:	f002 fc01 	bl	8004ba4 <TFT9341_FillRect>
		}
		for(int i=0;i<5;i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	667b      	str	r3, [r7, #100]	; 0x64
 80023a6:	e079      	b.n	800249c <draw_extra_options+0x3f8>
 80023a8:	20000702 	.word	0x20000702
 80023ac:	20000704 	.word	0x20000704
 80023b0:	200008b4 	.word	0x200008b4
 80023b4:	2000000c 	.word	0x2000000c
 80023b8:	0800a558 	.word	0x0800a558
 80023bc:	20000706 	.word	0x20000706
 80023c0:	40090145 	.word	0x40090145
 80023c4:	0800a570 	.word	0x0800a570
 80023c8:	2000070e 	.word	0x2000070e
 80023cc:	0800a588 	.word	0x0800a588
 80023d0:	0800a5a4 	.word	0x0800a5a4
 80023d4:	2000070f 	.word	0x2000070f
 80023d8:	0800a5c0 	.word	0x0800a5c0
 80023dc:	0800a5dc 	.word	0x0800a5dc
 80023e0:	20000710 	.word	0x20000710
 80023e4:	0800a5f8 	.word	0x0800a5f8
 80023e8:	0800a614 	.word	0x0800a614
 80023ec:	0800a630 	.word	0x0800a630
 80023f0:	0800a64c 	.word	0x0800a64c
 80023f4:	2000070c 	.word	0x2000070c
 80023f8:	20000aa8 	.word	0x20000aa8
 80023fc:	20000b78 	.word	0x20000b78
		{
			if(selection!=i)
 8002400:	4b9d      	ldr	r3, [pc, #628]	; (8002678 <draw_extra_options+0x5d4>)
 8002402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002406:	461a      	mov	r2, r3
 8002408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800240a:	4293      	cmp	r3, r2
 800240c:	d01e      	beq.n	800244c <draw_extra_options+0x3a8>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0x0000);
 800240e:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
 8002412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800241a:	4413      	add	r3, r2
 800241c:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 8002420:	b29b      	uxth	r3, r3
 8002422:	3314      	adds	r3, #20
 8002424:	b299      	uxth	r1, r3
 8002426:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800242a:	3350      	adds	r3, #80	; 0x50
 800242c:	b29a      	uxth	r2, r3
 800242e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002436:	4423      	add	r3, r4
 8002438:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 800243c:	b29b      	uxth	r3, r3
 800243e:	3316      	adds	r3, #22
 8002440:	b29b      	uxth	r3, r3
 8002442:	2400      	movs	r4, #0
 8002444:	9400      	str	r4, [sp, #0]
 8002446:	f002 fbad 	bl	8004ba4 <TFT9341_FillRect>
 800244a:	e024      	b.n	8002496 <draw_extra_options+0x3f2>
			}
			else if(selection_wheel==-1)
 800244c:	4b8b      	ldr	r3, [pc, #556]	; (800267c <draw_extra_options+0x5d8>)
 800244e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d11e      	bne.n	8002496 <draw_extra_options+0x3f2>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0xFD60);
 8002458:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
 800245c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002464:	4413      	add	r3, r2
 8002466:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 800246a:	b29b      	uxth	r3, r3
 800246c:	3314      	adds	r3, #20
 800246e:	b299      	uxth	r1, r3
 8002470:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002474:	3350      	adds	r3, #80	; 0x50
 8002476:	b29a      	uxth	r2, r3
 8002478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002480:	4423      	add	r3, r4
 8002482:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 8002486:	b29b      	uxth	r3, r3
 8002488:	3316      	adds	r3, #22
 800248a:	b29b      	uxth	r3, r3
 800248c:	f64f 5460 	movw	r4, #64864	; 0xfd60
 8002490:	9400      	str	r4, [sp, #0]
 8002492:	f002 fb87 	bl	8004ba4 <TFT9341_FillRect>
		for(int i=0;i<5;i++)
 8002496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002498:	3301      	adds	r3, #1
 800249a:	667b      	str	r3, [r7, #100]	; 0x64
 800249c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800249e:	2b04      	cmp	r3, #4
 80024a0:	ddae      	ble.n	8002400 <draw_extra_options+0x35c>
			}
		}
		if(selection_wheel==-1)
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <draw_extra_options+0x5d8>)
 80024a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d104      	bne.n	80024b8 <draw_extra_options+0x414>
		{
			prev_selection=selection;
 80024ae:	4b72      	ldr	r3, [pc, #456]	; (8002678 <draw_extra_options+0x5d4>)
 80024b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024b4:	4b72      	ldr	r3, [pc, #456]	; (8002680 <draw_extra_options+0x5dc>)
 80024b6:	801a      	strh	r2, [r3, #0]
	}


	//---------- selection_wheel -------------------

	if(selection!=prev_selection && selection_wheel==0) //time_out
 80024b8:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <draw_extra_options+0x5d4>)
 80024ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024be:	4b70      	ldr	r3, [pc, #448]	; (8002680 <draw_extra_options+0x5dc>)
 80024c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d052      	beq.n	800256e <draw_extra_options+0x4ca>
 80024c8:	4b6c      	ldr	r3, [pc, #432]	; (800267c <draw_extra_options+0x5d8>)
 80024ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d14d      	bne.n	800256e <draw_extra_options+0x4ca>
	{
		prev_selection=selection;
 80024d2:	4b69      	ldr	r3, [pc, #420]	; (8002678 <draw_extra_options+0x5d4>)
 80024d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024d8:	4b69      	ldr	r3, [pc, #420]	; (8002680 <draw_extra_options+0x5dc>)
 80024da:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80024dc:	2301      	movs	r3, #1
 80024de:	663b      	str	r3, [r7, #96]	; 0x60
 80024e0:	e015      	b.n	800250e <draw_extra_options+0x46a>
		{
			y_pos[i]=y_pos[i-1]+30;
 80024e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e4:	3b01      	subs	r3, #1
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80024ec:	4413      	add	r3, r2
 80024ee:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	331e      	adds	r3, #30
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002502:	440b      	add	r3, r1
 8002504:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250a:	3301      	adds	r3, #1
 800250c:	663b      	str	r3, [r7, #96]	; 0x60
 800250e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002510:	2b06      	cmp	r3, #6
 8002512:	d9e6      	bls.n	80024e2 <draw_extra_options+0x43e>
		}

		limit_selection(0,4);
 8002514:	2104      	movs	r1, #4
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fdf4 	bl	8001104 <limit_selection>
		time_out=selection;
 800251c:	4b56      	ldr	r3, [pc, #344]	; (8002678 <draw_extra_options+0x5d4>)
 800251e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002522:	4b58      	ldr	r3, [pc, #352]	; (8002684 <draw_extra_options+0x5e0>)
 8002524:	801a      	strh	r2, [r3, #0]
		TFT9341_FillRect(220,y_pos[0]+20,250,y_pos[0]+22,0xf000);
 8002526:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800252a:	b29b      	uxth	r3, r3
 800252c:	3314      	adds	r3, #20
 800252e:	b299      	uxth	r1, r3
 8002530:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002534:	b29b      	uxth	r3, r3
 8002536:	3316      	adds	r3, #22
 8002538:	b29b      	uxth	r3, r3
 800253a:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800253e:	9200      	str	r2, [sp, #0]
 8002540:	22fa      	movs	r2, #250	; 0xfa
 8002542:	20dc      	movs	r0, #220	; 0xdc
 8002544:	f002 fb2e 	bl	8004ba4 <TFT9341_FillRect>
		sprintf(str,"Time-out scherm : %s",timeout_vis());
 8002548:	f7fe fe00 	bl	800114c <timeout_vis>
 800254c:	4602      	mov	r2, r0
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	494d      	ldr	r1, [pc, #308]	; (8002688 <draw_extra_options+0x5e4>)
 8002554:	4618      	mov	r0, r3
 8002556:	f007 fb43 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[0],str);
 800255a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800255e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002562:	b291      	uxth	r1, r2
 8002564:	f107 0214 	add.w	r2, r7, #20
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fcc5 	bl	8004ef8 <TFT9341_String>

	}
	if(selection!=prev_selection && selection_wheel==1)
 800256e:	4b42      	ldr	r3, [pc, #264]	; (8002678 <draw_extra_options+0x5d4>)
 8002570:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002574:	4b42      	ldr	r3, [pc, #264]	; (8002680 <draw_extra_options+0x5dc>)
 8002576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800257a:	429a      	cmp	r2, r3
 800257c:	d065      	beq.n	800264a <draw_extra_options+0x5a6>
 800257e:	4b3f      	ldr	r3, [pc, #252]	; (800267c <draw_extra_options+0x5d8>)
 8002580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d160      	bne.n	800264a <draw_extra_options+0x5a6>
	{
		prev_selection=selection;
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <draw_extra_options+0x5d4>)
 800258a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <draw_extra_options+0x5dc>)
 8002590:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002592:	2301      	movs	r3, #1
 8002594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002596:	e015      	b.n	80025c4 <draw_extra_options+0x520>
		{
			y_pos[i]=y_pos[i-1]+30;
 8002598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259a:	3b01      	subs	r3, #1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80025a2:	4413      	add	r3, r2
 80025a4:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	331e      	adds	r3, #30
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	b21a      	sxth	r2, r3
 80025b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80025b8:	440b      	add	r3, r1
 80025ba:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80025be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c0:	3301      	adds	r3, #1
 80025c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d9e6      	bls.n	8002598 <draw_extra_options+0x4f4>
		}

		limit_selection(1, 20);
 80025ca:	2114      	movs	r1, #20
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7fe fd99 	bl	8001104 <limit_selection>
		TIM1->CCR1=(65500/20)*selection;
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <draw_extra_options+0x5d4>)
 80025d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d8:	461a      	mov	r2, r3
 80025da:	f640 43cb 	movw	r3, #3275	; 0xccb
 80025de:	fb03 f202 	mul.w	r2, r3, r2
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <draw_extra_options+0x5e8>)
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
		screen_brightness=(65500/20)*selection;
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <draw_extra_options+0x5d4>)
 80025e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	0192      	lsls	r2, r2, #6
 80025f2:	441a      	add	r2, r3
 80025f4:	0052      	lsls	r2, r2, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	0091      	lsls	r1, r2, #2
 80025fc:	461a      	mov	r2, r3
 80025fe:	460b      	mov	r3, r1
 8002600:	4413      	add	r3, r2
 8002602:	461a      	mov	r2, r3
 8002604:	0091      	lsls	r1, r2, #2
 8002606:	461a      	mov	r2, r3
 8002608:	460b      	mov	r3, r1
 800260a:	4413      	add	r3, r2
 800260c:	b29a      	uxth	r2, r3
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <draw_extra_options+0x5ec>)
 8002610:	801a      	strh	r2, [r3, #0]
		//sprintf(str,"%d",screen_brightness);
		//TFT9341_String(250,200,str);
		int percentage=screen_brightness/655;
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <draw_extra_options+0x5ec>)
 8002614:	881a      	ldrh	r2, [r3, #0]
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <draw_extra_options+0x5f0>)
 8002618:	fba3 1302 	umull	r1, r3, r3, r2
 800261c:	1ad2      	subs	r2, r2, r3
 800261e:	0852      	lsrs	r2, r2, #1
 8002620:	4413      	add	r3, r2
 8002622:	0a5b      	lsrs	r3, r3, #9
 8002624:	b29b      	uxth	r3, r3
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48

		sprintf(str,"Schermhelderheid:%d %%   ",percentage);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800262e:	491a      	ldr	r1, [pc, #104]	; (8002698 <draw_extra_options+0x5f4>)
 8002630:	4618      	mov	r0, r3
 8002632:	f007 fad5 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[1],str);
 8002636:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800263a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800263e:	b291      	uxth	r1, r2
 8002640:	f107 0214 	add.w	r2, r7, #20
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fc57 	bl	8004ef8 <TFT9341_String>

	}
	if(selection!=prev_selection && selection_wheel==2) // geluid bij voeren
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <draw_extra_options+0x5d4>)
 800264c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <draw_extra_options+0x5dc>)
 8002652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002656:	429a      	cmp	r2, r3
 8002658:	f000 8086 	beq.w	8002768 <draw_extra_options+0x6c4>
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <draw_extra_options+0x5d8>)
 800265e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002662:	2b02      	cmp	r3, #2
 8002664:	f040 8080 	bne.w	8002768 <draw_extra_options+0x6c4>
	{
		prev_selection=selection;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <draw_extra_options+0x5d4>)
 800266a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <draw_extra_options+0x5dc>)
 8002670:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002672:	2301      	movs	r3, #1
 8002674:	65bb      	str	r3, [r7, #88]	; 0x58
 8002676:	e027      	b.n	80026c8 <draw_extra_options+0x624>
 8002678:	20000aa8 	.word	0x20000aa8
 800267c:	2000070c 	.word	0x2000070c
 8002680:	20000b78 	.word	0x20000b78
 8002684:	20000712 	.word	0x20000712
 8002688:	0800a558 	.word	0x0800a558
 800268c:	40010000 	.word	0x40010000
 8002690:	20000706 	.word	0x20000706
 8002694:	903847eb 	.word	0x903847eb
 8002698:	0800a668 	.word	0x0800a668
		{
			y_pos[i]=y_pos[i-1]+30;
 800269c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800269e:	3b01      	subs	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80026a6:	4413      	add	r3, r2
 80026a8:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	331e      	adds	r3, #30
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80026bc:	440b      	add	r3, r1
 80026be:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80026c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c4:	3301      	adds	r3, #1
 80026c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80026c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d9e6      	bls.n	800269c <draw_extra_options+0x5f8>
		}

		limit_selection(0,1);
 80026ce:	2101      	movs	r1, #1
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe fd17 	bl	8001104 <limit_selection>
		sound_feed=selection;
 80026d6:	4bb7      	ldr	r3, [pc, #732]	; (80029b4 <draw_extra_options+0x910>)
 80026d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4bb4      	ldr	r3, [pc, #720]	; (80029b8 <draw_extra_options+0x914>)
 80026e8:	701a      	strb	r2, [r3, #0]
		TFT9341_FillRect(258,y_pos[2]+20,288,y_pos[2]+22,0xf000);
 80026ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3314      	adds	r3, #20
 80026f2:	b299      	uxth	r1, r3
 80026f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3316      	adds	r3, #22
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8002702:	9200      	str	r2, [sp, #0]
 8002704:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002708:	f44f 7081 	mov.w	r0, #258	; 0x102
 800270c:	f002 fa4a 	bl	8004ba4 <TFT9341_FillRect>

		TFT9341_SetTextColor(0xffff);
 8002710:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002714:	f002 fb12 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8002718:	48a8      	ldr	r0, [pc, #672]	; (80029bc <draw_extra_options+0x918>)
 800271a:	f002 fb2f 	bl	8004d7c <TFT9341_SetFont>

		if(sound_feed==1)
 800271e:	4ba6      	ldr	r3, [pc, #664]	; (80029b8 <draw_extra_options+0x914>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d010      	beq.n	8002748 <draw_extra_options+0x6a4>
		{
			sprintf(str,"Geluid voeren       : AAN");
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	49a5      	ldr	r1, [pc, #660]	; (80029c0 <draw_extra_options+0x91c>)
 800272c:	4618      	mov	r0, r3
 800272e:	f007 fa57 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[2],str);
 8002732:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002736:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800273a:	b291      	uxth	r1, r2
 800273c:	f107 0214 	add.w	r2, r7, #20
 8002740:	4618      	mov	r0, r3
 8002742:	f002 fbd9 	bl	8004ef8 <TFT9341_String>
 8002746:	e00f      	b.n	8002768 <draw_extra_options+0x6c4>
		}
		else
		{
			sprintf(str,"Geluid voeren       : UIT");
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	499d      	ldr	r1, [pc, #628]	; (80029c4 <draw_extra_options+0x920>)
 800274e:	4618      	mov	r0, r3
 8002750:	f007 fa46 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[2],str);
 8002754:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002758:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800275c:	b291      	uxth	r1, r2
 800275e:	f107 0214 	add.w	r2, r7, #20
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fbc8 	bl	8004ef8 <TFT9341_String>
		}

	}
	if(selection!=prev_selection && selection_wheel==3) // geluid bij knoppen
 8002768:	4b92      	ldr	r3, [pc, #584]	; (80029b4 <draw_extra_options+0x910>)
 800276a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800276e:	4b96      	ldr	r3, [pc, #600]	; (80029c8 <draw_extra_options+0x924>)
 8002770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002774:	429a      	cmp	r2, r3
 8002776:	d072      	beq.n	800285e <draw_extra_options+0x7ba>
 8002778:	4b94      	ldr	r3, [pc, #592]	; (80029cc <draw_extra_options+0x928>)
 800277a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d16d      	bne.n	800285e <draw_extra_options+0x7ba>
	{
		prev_selection=selection;
 8002782:	4b8c      	ldr	r3, [pc, #560]	; (80029b4 <draw_extra_options+0x910>)
 8002784:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002788:	4b8f      	ldr	r3, [pc, #572]	; (80029c8 <draw_extra_options+0x924>)
 800278a:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 800278c:	2301      	movs	r3, #1
 800278e:	657b      	str	r3, [r7, #84]	; 0x54
 8002790:	e015      	b.n	80027be <draw_extra_options+0x71a>
		{
			y_pos[i]=y_pos[i-1]+30;
 8002792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002794:	3b01      	subs	r3, #1
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800279c:	4413      	add	r3, r2
 800279e:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	331e      	adds	r3, #30
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	b21a      	sxth	r2, r3
 80027aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80027b2:	440b      	add	r3, r1
 80027b4:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	3301      	adds	r3, #1
 80027bc:	657b      	str	r3, [r7, #84]	; 0x54
 80027be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d9e6      	bls.n	8002792 <draw_extra_options+0x6ee>
		}

		limit_selection(0,1);
 80027c4:	2101      	movs	r1, #1
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe fc9c 	bl	8001104 <limit_selection>
		food_shake=selection;
 80027cc:	4b79      	ldr	r3, [pc, #484]	; (80029b4 <draw_extra_options+0x910>)
 80027ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bf14      	ite	ne
 80027d6:	2301      	movne	r3, #1
 80027d8:	2300      	moveq	r3, #0
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b7c      	ldr	r3, [pc, #496]	; (80029d0 <draw_extra_options+0x92c>)
 80027de:	701a      	strb	r2, [r3, #0]
		TFT9341_FillRect(258,y_pos[3]+20,288,y_pos[3]+22,0xf000);
 80027e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3314      	adds	r3, #20
 80027e8:	b299      	uxth	r1, r3
 80027ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3316      	adds	r3, #22
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80027f8:	9200      	str	r2, [sp, #0]
 80027fa:	f44f 7290 	mov.w	r2, #288	; 0x120
 80027fe:	f44f 7081 	mov.w	r0, #258	; 0x102
 8002802:	f002 f9cf 	bl	8004ba4 <TFT9341_FillRect>

		TFT9341_SetTextColor(0xffff);
 8002806:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800280a:	f002 fa97 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 800280e:	486b      	ldr	r0, [pc, #428]	; (80029bc <draw_extra_options+0x918>)
 8002810:	f002 fab4 	bl	8004d7c <TFT9341_SetFont>

		if(food_shake==1)
 8002814:	4b6e      	ldr	r3, [pc, #440]	; (80029d0 <draw_extra_options+0x92c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d010      	beq.n	800283e <draw_extra_options+0x79a>
		{
			sprintf(str,"Trillen voer        : AAN");
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	496c      	ldr	r1, [pc, #432]	; (80029d4 <draw_extra_options+0x930>)
 8002822:	4618      	mov	r0, r3
 8002824:	f007 f9dc 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[3],str);
 8002828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800282c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002830:	b291      	uxth	r1, r2
 8002832:	f107 0214 	add.w	r2, r7, #20
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fb5e 	bl	8004ef8 <TFT9341_String>
 800283c:	e00f      	b.n	800285e <draw_extra_options+0x7ba>
		}
		else
		{
			sprintf(str,"Trillen voer        : UIT");
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4965      	ldr	r1, [pc, #404]	; (80029d8 <draw_extra_options+0x934>)
 8002844:	4618      	mov	r0, r3
 8002846:	f007 f9cb 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[3],str);
 800284a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800284e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002852:	b291      	uxth	r1, r2
 8002854:	f107 0214 	add.w	r2, r7, #20
 8002858:	4618      	mov	r0, r3
 800285a:	f002 fb4d 	bl	8004ef8 <TFT9341_String>
		}

	}
	if(selection!=prev_selection && selection_wheel==4) // geluidintensiteit
 800285e:	4b55      	ldr	r3, [pc, #340]	; (80029b4 <draw_extra_options+0x910>)
 8002860:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002864:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <draw_extra_options+0x924>)
 8002866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286a:	429a      	cmp	r2, r3
 800286c:	f000 809e 	beq.w	80029ac <draw_extra_options+0x908>
 8002870:	4b56      	ldr	r3, [pc, #344]	; (80029cc <draw_extra_options+0x928>)
 8002872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002876:	2b04      	cmp	r3, #4
 8002878:	f040 8098 	bne.w	80029ac <draw_extra_options+0x908>
	{
		prev_selection=selection;
 800287c:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <draw_extra_options+0x910>)
 800287e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <draw_extra_options+0x924>)
 8002884:	801a      	strh	r2, [r3, #0]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002886:	2301      	movs	r3, #1
 8002888:	653b      	str	r3, [r7, #80]	; 0x50
 800288a:	e015      	b.n	80028b8 <draw_extra_options+0x814>
		{
			y_pos[i]=y_pos[i-1]+30;
 800288c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800288e:	3b01      	subs	r3, #1
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002896:	4413      	add	r3, r2
 8002898:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 800289c:	b29b      	uxth	r3, r3
 800289e:	331e      	adds	r3, #30
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	b21a      	sxth	r2, r3
 80028a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80028ac:	440b      	add	r3, r1
 80028ae:	f823 2c6c 	strh.w	r2, [r3, #-108]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 80028b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b4:	3301      	adds	r3, #1
 80028b6:	653b      	str	r3, [r7, #80]	; 0x50
 80028b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d9e6      	bls.n	800288c <draw_extra_options+0x7e8>
		}

		limit_selection(0,3);
 80028be:	2103      	movs	r1, #3
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7fe fc1f 	bl	8001104 <limit_selection>
		sound_intensity=selection;
 80028c6:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <draw_extra_options+0x910>)
 80028c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028cc:	4b43      	ldr	r3, [pc, #268]	; (80029dc <draw_extra_options+0x938>)
 80028ce:	801a      	strh	r2, [r3, #0]
		TFT9341_FillRect(258,y_pos[4 ]+20,288,y_pos[4]+22,0xf000);
 80028d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3314      	adds	r3, #20
 80028d8:	b299      	uxth	r1, r3
 80028da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3316      	adds	r3, #22
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80028e8:	9200      	str	r2, [sp, #0]
 80028ea:	f44f 7290 	mov.w	r2, #288	; 0x120
 80028ee:	f44f 7081 	mov.w	r0, #258	; 0x102
 80028f2:	f002 f957 	bl	8004ba4 <TFT9341_FillRect>

		TFT9341_SetTextColor(0xffff);
 80028f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028fa:	f002 fa1f 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 80028fe:	482f      	ldr	r0, [pc, #188]	; (80029bc <draw_extra_options+0x918>)
 8002900:	f002 fa3c 	bl	8004d7c <TFT9341_SetFont>

		if(sound_intensity==0)
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <draw_extra_options+0x938>)
 8002906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <draw_extra_options+0x88a>
		{
			sprintf(str,"Geluid knoppen      : UIT  ");
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4933      	ldr	r1, [pc, #204]	; (80029e0 <draw_extra_options+0x93c>)
 8002914:	4618      	mov	r0, r3
 8002916:	f007 f963 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 800291a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800291e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002922:	b291      	uxth	r1, r2
 8002924:	f107 0214 	add.w	r2, r7, #20
 8002928:	4618      	mov	r0, r3
 800292a:	f002 fae5 	bl	8004ef8 <TFT9341_String>
		}
		if(sound_intensity==1)
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <draw_extra_options+0x938>)
 8002930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d10f      	bne.n	8002958 <draw_extra_options+0x8b4>
		{
			sprintf(str,"Geluid knoppen      : ZACHT");
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4929      	ldr	r1, [pc, #164]	; (80029e4 <draw_extra_options+0x940>)
 800293e:	4618      	mov	r0, r3
 8002940:	f007 f94e 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 8002944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002948:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800294c:	b291      	uxth	r1, r2
 800294e:	f107 0214 	add.w	r2, r7, #20
 8002952:	4618      	mov	r0, r3
 8002954:	f002 fad0 	bl	8004ef8 <TFT9341_String>
		}
		if(sound_intensity==2)
 8002958:	4b20      	ldr	r3, [pc, #128]	; (80029dc <draw_extra_options+0x938>)
 800295a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d10f      	bne.n	8002982 <draw_extra_options+0x8de>
		{
			sprintf(str,"Geluid knoppen      : NORM ");
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4920      	ldr	r1, [pc, #128]	; (80029e8 <draw_extra_options+0x944>)
 8002968:	4618      	mov	r0, r3
 800296a:	f007 f939 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 800296e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002972:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002976:	b291      	uxth	r1, r2
 8002978:	f107 0214 	add.w	r2, r7, #20
 800297c:	4618      	mov	r0, r3
 800297e:	f002 fabb 	bl	8004ef8 <TFT9341_String>
		}
		if(sound_intensity==3)
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <draw_extra_options+0x938>)
 8002984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d10f      	bne.n	80029ac <draw_extra_options+0x908>
		{
			sprintf(str,"Geluid knoppen      : HARD ");
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4916      	ldr	r1, [pc, #88]	; (80029ec <draw_extra_options+0x948>)
 8002992:	4618      	mov	r0, r3
 8002994:	f007 f924 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[4],str);
 8002998:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800299c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80029a0:	b291      	uxth	r1, r2
 80029a2:	f107 0214 	add.w	r2, r7, #20
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 faa6 	bl	8004ef8 <TFT9341_String>

	//TFT9341_DrawRect(0xffff,5,235,5+60,235-42);



}
 80029ac:	bf00      	nop
 80029ae:	3774      	adds	r7, #116	; 0x74
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	20000aa8 	.word	0x20000aa8
 80029b8:	2000070e 	.word	0x2000070e
 80029bc:	2000000c 	.word	0x2000000c
 80029c0:	0800a588 	.word	0x0800a588
 80029c4:	0800a5a4 	.word	0x0800a5a4
 80029c8:	20000b78 	.word	0x20000b78
 80029cc:	2000070c 	.word	0x2000070c
 80029d0:	2000070f 	.word	0x2000070f
 80029d4:	0800a5c0 	.word	0x0800a5c0
 80029d8:	0800a5dc 	.word	0x0800a5dc
 80029dc:	20000710 	.word	0x20000710
 80029e0:	0800a5f8 	.word	0x0800a5f8
 80029e4:	0800a614 	.word	0x0800a614
 80029e8:	0800a630 	.word	0x0800a630
 80029ec:	0800a64c 	.word	0x0800a64c

080029f0 <draw_options>:

void draw_options()
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b097      	sub	sp, #92	; 0x5c
 80029f4:	af02      	add	r7, sp, #8

	char str[50];
	short x_pos=15;
 80029f6:	230f      	movs	r3, #15
 80029f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	short y_pos[6];
	y_pos[0]=20;
 80029fa:	2314      	movs	r3, #20
 80029fc:	803b      	strh	r3, [r7, #0]
	if(menu!=prev_menu || sub_menu!=prev_sub_menu || update)
 80029fe:	4bb1      	ldr	r3, [pc, #708]	; (8002cc4 <draw_options+0x2d4>)
 8002a00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a04:	4bb0      	ldr	r3, [pc, #704]	; (8002cc8 <draw_options+0x2d8>)
 8002a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d10d      	bne.n	8002a2a <draw_options+0x3a>
 8002a0e:	4baf      	ldr	r3, [pc, #700]	; (8002ccc <draw_options+0x2dc>)
 8002a10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a14:	4bae      	ldr	r3, [pc, #696]	; (8002cd0 <draw_options+0x2e0>)
 8002a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d105      	bne.n	8002a2a <draw_options+0x3a>
 8002a1e:	4bad      	ldr	r3, [pc, #692]	; (8002cd4 <draw_options+0x2e4>)
 8002a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8096 	beq.w	8002b56 <draw_options+0x166>
	{
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a2e:	e015      	b.n	8002a5c <draw_options+0x6c>
				{
					y_pos[i]=y_pos[i-1]+30;
 8002a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a32:	3b01      	subs	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	331e      	adds	r3, #30
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21a      	sxth	r2, r3
 8002a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002a50:	440b      	add	r3, r1
 8002a52:	f823 2c50 	strh.w	r2, [r3, #-80]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a58:	3301      	adds	r3, #1
 8002a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d9e6      	bls.n	8002a30 <draw_options+0x40>
				}
		update=0;
 8002a62:	4b9c      	ldr	r3, [pc, #624]	; (8002cd4 <draw_options+0x2e4>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	801a      	strh	r2, [r3, #0]
		selection=0;
 8002a68:	4b9b      	ldr	r3, [pc, #620]	; (8002cd8 <draw_options+0x2e8>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
		TFT9341_FillScreen(0x0000);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f002 f90c 	bl	8004c8c <TFT9341_FillScreen>
		TFT9341_SetTextColor(0xffff);
 8002a74:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a78:	f002 f960 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8002a7c:	4897      	ldr	r0, [pc, #604]	; (8002cdc <draw_options+0x2ec>)
 8002a7e:	f002 f97d 	bl	8004d7c <TFT9341_SetFont>



		sprintf(str,"Voertijden/hoeveelheden");
 8002a82:	f107 030c 	add.w	r3, r7, #12
 8002a86:	4996      	ldr	r1, [pc, #600]	; (8002ce0 <draw_options+0x2f0>)
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f007 f8a9 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[0],str);
 8002a8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002a90:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002a94:	b291      	uxth	r1, r2
 8002a96:	f107 020c 	add.w	r2, r7, #12
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 fa2c 	bl	8004ef8 <TFT9341_String>
		sprintf(str,"Calibreer voerhoeveelheid");
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	498f      	ldr	r1, [pc, #572]	; (8002ce4 <draw_options+0x2f4>)
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f007 f89a 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[1],str);
 8002aac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002aae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002ab2:	b291      	uxth	r1, r2
 8002ab4:	f107 020c 	add.w	r2, r7, #12
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f002 fa1d 	bl	8004ef8 <TFT9341_String>
		sprintf(str,"Tijd instellen");
 8002abe:	f107 030c 	add.w	r3, r7, #12
 8002ac2:	4989      	ldr	r1, [pc, #548]	; (8002ce8 <draw_options+0x2f8>)
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f007 f88b 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[2],str);
 8002aca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002acc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ad0:	b291      	uxth	r1, r2
 8002ad2:	f107 020c 	add.w	r2, r7, #12
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fa0e 	bl	8004ef8 <TFT9341_String>
		sprintf(str,"Overige instellingen");
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	4982      	ldr	r1, [pc, #520]	; (8002cec <draw_options+0x2fc>)
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f007 f87c 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[3],str);
 8002ae8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002aea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002aee:	b291      	uxth	r1, r2
 8002af0:	f107 020c 	add.w	r2, r7, #12
 8002af4:	4618      	mov	r0, r3
 8002af6:	f002 f9ff 	bl	8004ef8 <TFT9341_String>
		sprintf(str,"Instellingen opslaan");
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	497c      	ldr	r1, [pc, #496]	; (8002cf0 <draw_options+0x300>)
 8002b00:	4618      	mov	r0, r3
 8002b02:	f007 f86d 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[4],str);
 8002b06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002b08:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002b0c:	b291      	uxth	r1, r2
 8002b0e:	f107 020c 	add.w	r2, r7, #12
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 f9f0 	bl	8004ef8 <TFT9341_String>

		TFT9341_FillRect(x_pos,y_pos[0]+20,x_pos+80,y_pos[0]+22,0xFD60);
 8002b18:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8002b1a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3314      	adds	r3, #20
 8002b22:	b299      	uxth	r1, r3
 8002b24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002b26:	3350      	adds	r3, #80	; 0x50
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3316      	adds	r3, #22
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f64f 5460 	movw	r4, #64864	; 0xfd60
 8002b38:	9400      	str	r4, [sp, #0]
 8002b3a:	f002 f833 	bl	8004ba4 <TFT9341_FillRect>
		draw_back();
 8002b3e:	f7fe ff15 	bl	800196c <draw_back>

		//draw only once
		prev_menu=menu;
 8002b42:	4b60      	ldr	r3, [pc, #384]	; (8002cc4 <draw_options+0x2d4>)
 8002b44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b48:	4b5f      	ldr	r3, [pc, #380]	; (8002cc8 <draw_options+0x2d8>)
 8002b4a:	801a      	strh	r2, [r3, #0]
		prev_sub_menu=sub_menu;
 8002b4c:	4b5f      	ldr	r3, [pc, #380]	; (8002ccc <draw_options+0x2dc>)
 8002b4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b52:	4b5f      	ldr	r3, [pc, #380]	; (8002cd0 <draw_options+0x2e0>)
 8002b54:	801a      	strh	r2, [r3, #0]
	}




	if(selection!=prev_selection)
 8002b56:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <draw_options+0x2e8>)
 8002b58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b5c:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <draw_options+0x304>)
 8002b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	f000 80aa 	beq.w	8002cbc <draw_options+0x2cc>
	{
		prev_selection=selection;
 8002b68:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <draw_options+0x2e8>)
 8002b6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b6e:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <draw_options+0x304>)
 8002b70:	801a      	strh	r2, [r3, #0]
		limit_selection(0, 5);
 8002b72:	2105      	movs	r1, #5
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fe fac5 	bl	8001104 <limit_selection>
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b7e:	e015      	b.n	8002bac <draw_options+0x1bc>
				{
					y_pos[i]=y_pos[i-1]+30;
 8002b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b82:	3b01      	subs	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	331e      	adds	r3, #30
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f823 2c50 	strh.w	r2, [r3, #-80]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba8:	3301      	adds	r3, #1
 8002baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d9e6      	bls.n	8002b80 <draw_options+0x190>
				}
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb6:	e015      	b.n	8002be4 <draw_options+0x1f4>
		{
			y_pos[i]=y_pos[i-1]+30;
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	331e      	adds	r3, #30
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	b21a      	sxth	r2, r3
 8002bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002bd8:	440b      	add	r3, r1
 8002bda:	f823 2c50 	strh.w	r2, [r3, #-80]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be0:	3301      	adds	r3, #1
 8002be2:	647b      	str	r3, [r7, #68]	; 0x44
 8002be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	d9e6      	bls.n	8002bb8 <draw_options+0x1c8>
		}

		if(selection==5)
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <draw_options+0x2e8>)
 8002bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d10a      	bne.n	8002c0a <draw_options+0x21a>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0xFD60);
 8002bf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002bf6:	3328      	adds	r3, #40	; 0x28
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	23e1      	movs	r3, #225	; 0xe1
 8002c02:	21df      	movs	r1, #223	; 0xdf
 8002c04:	200f      	movs	r0, #15
 8002c06:	f001 ffcd 	bl	8004ba4 <TFT9341_FillRect>
		}
		if(selection!=5)
 8002c0a:	4b33      	ldr	r3, [pc, #204]	; (8002cd8 <draw_options+0x2e8>)
 8002c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d009      	beq.n	8002c28 <draw_options+0x238>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0x0000);
 8002c14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c16:	3328      	adds	r3, #40	; 0x28
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	23e1      	movs	r3, #225	; 0xe1
 8002c20:	21df      	movs	r1, #223	; 0xdf
 8002c22:	200f      	movs	r0, #15
 8002c24:	f001 ffbe 	bl	8004ba4 <TFT9341_FillRect>
		}
		for(int i=0;i<((sizeof (y_pos))/(sizeof (short)))-1;i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c2c:	e043      	b.n	8002cb6 <draw_options+0x2c6>
		{
			if(selection!=i)
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <draw_options+0x2e8>)
 8002c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c34:	461a      	mov	r2, r3
 8002c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d01c      	beq.n	8002c76 <draw_options+0x286>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0x0000);
 8002c3c:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8002c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c46:	4413      	add	r3, r2
 8002c48:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3314      	adds	r3, #20
 8002c50:	b299      	uxth	r1, r3
 8002c52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c54:	3350      	adds	r3, #80	; 0x50
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002c60:	4423      	add	r3, r4
 8002c62:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3316      	adds	r3, #22
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2400      	movs	r4, #0
 8002c6e:	9400      	str	r4, [sp, #0]
 8002c70:	f001 ff98 	bl	8004ba4 <TFT9341_FillRect>
 8002c74:	e01c      	b.n	8002cb0 <draw_options+0x2c0>
			}
			else
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0xFD60);
 8002c76:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8002c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c80:	4413      	add	r3, r2
 8002c82:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3314      	adds	r3, #20
 8002c8a:	b299      	uxth	r1, r3
 8002c8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c8e:	3350      	adds	r3, #80	; 0x50
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002c9a:	4423      	add	r3, r4
 8002c9c:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3316      	adds	r3, #22
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f64f 5460 	movw	r4, #64864	; 0xfd60
 8002caa:	9400      	str	r4, [sp, #0]
 8002cac:	f001 ff7a 	bl	8004ba4 <TFT9341_FillRect>
		for(int i=0;i<((sizeof (y_pos))/(sizeof (short)))-1;i++)
 8002cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8002cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d9b8      	bls.n	8002c2e <draw_options+0x23e>

	//TFT9341_DrawRect(0xffff,5,235,5+60,235-42);



}
 8002cbc:	bf00      	nop
 8002cbe:	3754      	adds	r7, #84	; 0x54
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	200008bc 	.word	0x200008bc
 8002cc8:	20000700 	.word	0x20000700
 8002ccc:	20000702 	.word	0x20000702
 8002cd0:	20000704 	.word	0x20000704
 8002cd4:	200008b4 	.word	0x200008b4
 8002cd8:	20000aa8 	.word	0x20000aa8
 8002cdc:	2000000c 	.word	0x2000000c
 8002ce0:	0800a684 	.word	0x0800a684
 8002ce4:	0800a69c 	.word	0x0800a69c
 8002ce8:	0800a6b8 	.word	0x0800a6b8
 8002cec:	0800a6c8 	.word	0x0800a6c8
 8002cf0:	0800a6e0 	.word	0x0800a6e0
 8002cf4:	20000b78 	.word	0x20000b78

08002cf8 <feed_set>:

void feed_set(void) //activates on button_press since it is in that function --> perhaps not the way to go since selection should also change the screen
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b08f      	sub	sp, #60	; 0x3c
 8002cfc:	af02      	add	r7, sp, #8
	}
	 */


	char str[20];	
	short x_pos=15;
 8002cfe:	230f      	movs	r3, #15
 8002d00:	847b      	strh	r3, [r7, #34]	; 0x22
	short y_pos[5];
	y_pos[0]=20;
 8002d02:	2314      	movs	r3, #20
 8002d04:	803b      	strh	r3, [r7, #0]


	//sprintf(str,"selection=%d",selection);
	//TFT9341_String(180,160,str);

	if(menu!=prev_menu || sub_menu!=prev_sub_menu || feed_number!=prev_feed_number ||update) //change upon sub_menu will draw this once
 8002d06:	4b96      	ldr	r3, [pc, #600]	; (8002f60 <feed_set+0x268>)
 8002d08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d0c:	4b95      	ldr	r3, [pc, #596]	; (8002f64 <feed_set+0x26c>)
 8002d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d114      	bne.n	8002d40 <feed_set+0x48>
 8002d16:	4b94      	ldr	r3, [pc, #592]	; (8002f68 <feed_set+0x270>)
 8002d18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d1c:	4b93      	ldr	r3, [pc, #588]	; (8002f6c <feed_set+0x274>)
 8002d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d10c      	bne.n	8002d40 <feed_set+0x48>
 8002d26:	4b92      	ldr	r3, [pc, #584]	; (8002f70 <feed_set+0x278>)
 8002d28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d2c:	4b91      	ldr	r3, [pc, #580]	; (8002f74 <feed_set+0x27c>)
 8002d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d104      	bne.n	8002d40 <feed_set+0x48>
 8002d36:	4b90      	ldr	r3, [pc, #576]	; (8002f78 <feed_set+0x280>)
 8002d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d078      	beq.n	8002e32 <feed_set+0x13a>
	{
		prev_selection=-1;
 8002d40:	4b8e      	ldr	r3, [pc, #568]	; (8002f7c <feed_set+0x284>)
 8002d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d46:	801a      	strh	r2, [r3, #0]
		selection=0;
 8002d48:	4b8d      	ldr	r3, [pc, #564]	; (8002f80 <feed_set+0x288>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	801a      	strh	r2, [r3, #0]
		TFT9341_FillScreen(0x0000);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f001 ff9c 	bl	8004c8c <TFT9341_FillScreen>
		TFT9341_SetTextColor(0xffff);
 8002d54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d58:	f001 fff0 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8002d5c:	4889      	ldr	r0, [pc, #548]	; (8002f84 <feed_set+0x28c>)
 8002d5e:	f002 f80d 	bl	8004d7c <TFT9341_SetFont>

		sprintf(str,"Voermomenten:%d",feed_number);
 8002d62:	4b83      	ldr	r3, [pc, #524]	; (8002f70 <feed_set+0x278>)
 8002d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f107 030c 	add.w	r3, r7, #12
 8002d6e:	4986      	ldr	r1, [pc, #536]	; (8002f88 <feed_set+0x290>)
 8002d70:	4618      	mov	r0, r3
 8002d72:	f006 ff35 	bl	8009be0 <siprintf>
		TFT9341_String(15,20,str);
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2114      	movs	r1, #20
 8002d7e:	200f      	movs	r0, #15
 8002d80:	f002 f8ba 	bl	8004ef8 <TFT9341_String>

		//TFT9341_String(15,20,"Aantal Voermomenten:");
		for(int i=0;i<feed_number;i++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d88:	e03b      	b.n	8002e02 <feed_set+0x10a>
		{
			//sprintf(str,time_text(feed_time[i][1],feed_time[i][2]));
			TFT9341_String(15,20+(i+1)*30,time_text(feed_time[i][0],feed_time[i][1],1));
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	b29c      	uxth	r4, r3
 8002d9e:	4a7b      	ldr	r2, [pc, #492]	; (8002f8c <feed_set+0x294>)
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 8002da6:	4a79      	ldr	r2, [pc, #484]	; (8002f8c <feed_set+0x294>)
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fe f8bb 	bl	8000f30 <time_text>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	200f      	movs	r0, #15
 8002dc2:	f002 f899 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"%d g   ",feed_amount[i]);
 8002dc6:	4a72      	ldr	r2, [pc, #456]	; (8002f90 <feed_set+0x298>)
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f107 030c 	add.w	r3, r7, #12
 8002dd4:	496f      	ldr	r1, [pc, #444]	; (8002f94 <feed_set+0x29c>)
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f006 ff02 	bl	8009be0 <siprintf>
			TFT9341_String(110,20+(i+1)*30,str);
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	3301      	adds	r3, #1
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	0112      	lsls	r2, r2, #4
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3314      	adds	r3, #20
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f107 020c 	add.w	r2, r7, #12
 8002df4:	4619      	mov	r1, r3
 8002df6:	206e      	movs	r0, #110	; 0x6e
 8002df8:	f002 f87e 	bl	8004ef8 <TFT9341_String>
		for(int i=0;i<feed_number;i++)
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	3301      	adds	r3, #1
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <feed_set+0x278>)
 8002e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	dbbc      	blt.n	8002d8a <feed_set+0x92>
		}


		draw_back();
 8002e10:	f7fe fdac 	bl	800196c <draw_back>
		prev_menu=menu;
 8002e14:	4b52      	ldr	r3, [pc, #328]	; (8002f60 <feed_set+0x268>)
 8002e16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e1a:	4b52      	ldr	r3, [pc, #328]	; (8002f64 <feed_set+0x26c>)
 8002e1c:	801a      	strh	r2, [r3, #0]
		prev_sub_menu=sub_menu;
 8002e1e:	4b52      	ldr	r3, [pc, #328]	; (8002f68 <feed_set+0x270>)
 8002e20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e24:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <feed_set+0x274>)
 8002e26:	801a      	strh	r2, [r3, #0]
		prev_feed_number=feed_number;
 8002e28:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <feed_set+0x278>)
 8002e2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e2e:	4b51      	ldr	r3, [pc, #324]	; (8002f74 <feed_set+0x27c>)
 8002e30:	801a      	strh	r2, [r3, #0]
	}

	if(selection_wheel==-1)
 8002e32:	4b59      	ldr	r3, [pc, #356]	; (8002f98 <feed_set+0x2a0>)
 8002e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d10a      	bne.n	8002e54 <feed_set+0x15c>
	{
		limit_selection(0,feed_number+1);
 8002e3e:	4b4c      	ldr	r3, [pc, #304]	; (8002f70 <feed_set+0x278>)
 8002e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fe f958 	bl	8001104 <limit_selection>
	}

	if(selection!=prev_selection || update)
 8002e54:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <feed_set+0x288>)
 8002e56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e5a:	4b48      	ldr	r3, [pc, #288]	; (8002f7c <feed_set+0x284>)
 8002e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d105      	bne.n	8002e70 <feed_set+0x178>
 8002e64:	4b44      	ldr	r3, [pc, #272]	; (8002f78 <feed_set+0x280>)
 8002e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80f0 	beq.w	8003050 <feed_set+0x358>
	{

		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002e70:	2301      	movs	r3, #1
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e74:	e015      	b.n	8002ea2 <feed_set+0x1aa>
		{
			y_pos[i]=y_pos[i-1]+30;
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e80:	4413      	add	r3, r2
 8002e82:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	331e      	adds	r3, #30
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b21a      	sxth	r2, r3
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002e96:	440b      	add	r3, r1
 8002e98:	f823 2c30 	strh.w	r2, [r3, #-48]
		for(int i=1;i<((sizeof (y_pos))/(sizeof (short)));i++)
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d9e6      	bls.n	8002e76 <feed_set+0x17e>
			//sprintf(str,"%d",y_pos[i]);
			//TFT9341_String(100+30*i,90+10*i,str);
		}

		if(selection==feed_number+1  && selection_wheel==-1)
 8002ea8:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <feed_set+0x288>)
 8002eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <feed_set+0x278>)
 8002eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d110      	bne.n	8002ede <feed_set+0x1e6>
 8002ebc:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <feed_set+0x2a0>)
 8002ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d10a      	bne.n	8002ede <feed_set+0x1e6>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0xFD60);
 8002ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002eca:	3328      	adds	r3, #40	; 0x28
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	23e1      	movs	r3, #225	; 0xe1
 8002ed6:	21df      	movs	r1, #223	; 0xdf
 8002ed8:	200f      	movs	r0, #15
 8002eda:	f001 fe63 	bl	8004ba4 <TFT9341_FillRect>
		}
		if(selection!=feed_number+1  && selection_wheel==-1)
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <feed_set+0x288>)
 8002ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <feed_set+0x278>)
 8002ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eec:	3301      	adds	r3, #1
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d00f      	beq.n	8002f12 <feed_set+0x21a>
 8002ef2:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <feed_set+0x2a0>)
 8002ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d109      	bne.n	8002f12 <feed_set+0x21a>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0x0000);
 8002efe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f00:	3328      	adds	r3, #40	; 0x28
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	2300      	movs	r3, #0
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	23e1      	movs	r3, #225	; 0xe1
 8002f0a:	21df      	movs	r1, #223	; 0xdf
 8002f0c:	200f      	movs	r0, #15
 8002f0e:	f001 fe49 	bl	8004ba4 <TFT9341_FillRect>
		}
		for(int i=0;i<feed_number+1;i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	e090      	b.n	800303a <feed_set+0x342>
		{
			if(selection!=i) // && selection_wheel==-1
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <feed_set+0x288>)
 8002f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d03a      	beq.n	8002f9c <feed_set+0x2a4>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0x0000);
 8002f26:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002f30:	4413      	add	r3, r2
 8002f32:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3314      	adds	r3, #20
 8002f3a:	b299      	uxth	r1, r3
 8002f3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f3e:	3350      	adds	r3, #80	; 0x50
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002f4a:	4423      	add	r3, r4
 8002f4c:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3316      	adds	r3, #22
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2400      	movs	r4, #0
 8002f58:	9400      	str	r4, [sp, #0]
 8002f5a:	f001 fe23 	bl	8004ba4 <TFT9341_FillRect>
 8002f5e:	e040      	b.n	8002fe2 <feed_set+0x2ea>
 8002f60:	200008bc 	.word	0x200008bc
 8002f64:	20000700 	.word	0x20000700
 8002f68:	20000702 	.word	0x20000702
 8002f6c:	20000704 	.word	0x20000704
 8002f70:	200006fc 	.word	0x200006fc
 8002f74:	2000002c 	.word	0x2000002c
 8002f78:	200008b4 	.word	0x200008b4
 8002f7c:	20000b78 	.word	0x20000b78
 8002f80:	20000aa8 	.word	0x20000aa8
 8002f84:	2000000c 	.word	0x2000000c
 8002f88:	0800a6f8 	.word	0x0800a6f8
 8002f8c:	20000a44 	.word	0x20000a44
 8002f90:	20000b20 	.word	0x20000b20
 8002f94:	0800a708 	.word	0x0800a708
 8002f98:	2000070c 	.word	0x2000070c
			}
			else if(selection_wheel==-1)
 8002f9c:	4ba2      	ldr	r3, [pc, #648]	; (8003228 <feed_set+0x530>)
 8002f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa6:	d11c      	bne.n	8002fe2 <feed_set+0x2ea>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0xFD60);
 8002fa8:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3314      	adds	r3, #20
 8002fbc:	b299      	uxth	r1, r3
 8002fbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fc0:	3350      	adds	r3, #80	; 0x50
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002fcc:	4423      	add	r3, r4
 8002fce:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3316      	adds	r3, #22
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f64f 5460 	movw	r4, #64864	; 0xfd60
 8002fdc:	9400      	str	r4, [sp, #0]
 8002fde:	f001 fde1 	bl	8004ba4 <TFT9341_FillRect>
			}

			if(selection_wheel!=-1)
 8002fe2:	4b91      	ldr	r3, [pc, #580]	; (8003228 <feed_set+0x530>)
 8002fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d022      	beq.n	8003034 <feed_set+0x33c>
			{
				if(i!=selection_wheel)
 8002fee:	4b8e      	ldr	r3, [pc, #568]	; (8003228 <feed_set+0x530>)
 8002ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d01b      	beq.n	8003034 <feed_set+0x33c>
				{
					TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0x0000);
 8002ffc:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003006:	4413      	add	r3, r2
 8003008:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800300c:	b29b      	uxth	r3, r3
 800300e:	3314      	adds	r3, #20
 8003010:	b299      	uxth	r1, r3
 8003012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003014:	3350      	adds	r3, #80	; 0x50
 8003016:	b29a      	uxth	r2, r3
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003020:	4423      	add	r3, r4
 8003022:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8003026:	b29b      	uxth	r3, r3
 8003028:	3316      	adds	r3, #22
 800302a:	b29b      	uxth	r3, r3
 800302c:	2400      	movs	r4, #0
 800302e:	9400      	str	r4, [sp, #0]
 8003030:	f001 fdb8 	bl	8004ba4 <TFT9341_FillRect>
		for(int i=0;i<feed_number+1;i++)
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	3301      	adds	r3, #1
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	4b7c      	ldr	r3, [pc, #496]	; (800322c <feed_set+0x534>)
 800303c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003040:	461a      	mov	r2, r3
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	4293      	cmp	r3, r2
 8003046:	f77f af67 	ble.w	8002f18 <feed_set+0x220>
			}

			//sprintf(str,"%d",y_pos[i]);
			//TFT9341_String(100+30*i,50+10*i,str);
		}
		update=0;
 800304a:	4b79      	ldr	r3, [pc, #484]	; (8003230 <feed_set+0x538>)
 800304c:	2200      	movs	r2, #0
 800304e:	801a      	strh	r2, [r3, #0]
	}

	if(selection_wheel==0 && selection!=prev_selection)
 8003050:	4b75      	ldr	r3, [pc, #468]	; (8003228 <feed_set+0x530>)
 8003052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d138      	bne.n	80030cc <feed_set+0x3d4>
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <feed_set+0x53c>)
 800305c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003060:	4b75      	ldr	r3, [pc, #468]	; (8003238 <feed_set+0x540>)
 8003062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003066:	429a      	cmp	r2, r3
 8003068:	d030      	beq.n	80030cc <feed_set+0x3d4>
	{
		limit_selection(1,4);
 800306a:	2104      	movs	r1, #4
 800306c:	2001      	movs	r0, #1
 800306e:	f7fe f849 	bl	8001104 <limit_selection>
		TFT9341_SetTextColor(0xffff);
 8003072:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003076:	f001 fe61 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 800307a:	4870      	ldr	r0, [pc, #448]	; (800323c <feed_set+0x544>)
 800307c:	f001 fe7e 	bl	8004d7c <TFT9341_SetFont>
		sprintf(str,"Voermomenten:%d",selection);
 8003080:	4b6c      	ldr	r3, [pc, #432]	; (8003234 <feed_set+0x53c>)
 8003082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003086:	461a      	mov	r2, r3
 8003088:	f107 030c 	add.w	r3, r7, #12
 800308c:	496c      	ldr	r1, [pc, #432]	; (8003240 <feed_set+0x548>)
 800308e:	4618      	mov	r0, r3
 8003090:	f006 fda6 	bl	8009be0 <siprintf>
		TFT9341_String(15,20,str);
 8003094:	f107 030c 	add.w	r3, r7, #12
 8003098:	461a      	mov	r2, r3
 800309a:	2114      	movs	r1, #20
 800309c:	200f      	movs	r0, #15
 800309e:	f001 ff2b 	bl	8004ef8 <TFT9341_String>
		TFT9341_FillRect(x_pos+4,y_pos[0]+20,x_pos+90,y_pos[0]+18,0xf000);
 80030a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030a4:	3304      	adds	r3, #4
 80030a6:	b298      	uxth	r0, r3
 80030a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3314      	adds	r3, #20
 80030b0:	b299      	uxth	r1, r3
 80030b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030b4:	335a      	adds	r3, #90	; 0x5a
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3312      	adds	r3, #18
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 80030c6:	9400      	str	r4, [sp, #0]
 80030c8:	f001 fd6c 	bl	8004ba4 <TFT9341_FillRect>
	}

	if(selection!=prev_selection && selection_wheel!=-1 && selection_wheel>0)
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <feed_set+0x53c>)
 80030ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80030d2:	4b59      	ldr	r3, [pc, #356]	; (8003238 <feed_set+0x540>)
 80030d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f000 815e 	beq.w	800339a <feed_set+0x6a2>
 80030de:	4b52      	ldr	r3, [pc, #328]	; (8003228 <feed_set+0x530>)
 80030e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	f000 8157 	beq.w	800339a <feed_set+0x6a2>
 80030ec:	4b4e      	ldr	r3, [pc, #312]	; (8003228 <feed_set+0x530>)
 80030ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f340 8151 	ble.w	800339a <feed_set+0x6a2>
	{
		if(skip==0)
 80030f8:	4b52      	ldr	r3, [pc, #328]	; (8003244 <feed_set+0x54c>)
 80030fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d133      	bne.n	800316a <feed_set+0x472>
		{
			limit_selection(0,23);
 8003102:	2117      	movs	r1, #23
 8003104:	2000      	movs	r0, #0
 8003106:	f7fd fffd 	bl	8001104 <limit_selection>
			feed_time[selection_wheel-1][0]=selection;
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <feed_set+0x530>)
 800310c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003110:	3b01      	subs	r3, #1
 8003112:	4a48      	ldr	r2, [pc, #288]	; (8003234 <feed_set+0x53c>)
 8003114:	f9b2 1000 	ldrsh.w	r1, [r2]
 8003118:	4a4b      	ldr	r2, [pc, #300]	; (8003248 <feed_set+0x550>)
 800311a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			TFT9341_FillRect(x_pos+4,y_pos[selection_wheel-1]+50,x_pos+24,y_pos[selection_wheel-1]+48,0xf000);
 800311e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003120:	3304      	adds	r3, #4
 8003122:	b298      	uxth	r0, r3
 8003124:	4b40      	ldr	r3, [pc, #256]	; (8003228 <feed_set+0x530>)
 8003126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312a:	3b01      	subs	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003132:	4413      	add	r3, r2
 8003134:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8003138:	b29b      	uxth	r3, r3
 800313a:	3332      	adds	r3, #50	; 0x32
 800313c:	b299      	uxth	r1, r3
 800313e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003140:	3318      	adds	r3, #24
 8003142:	b29a      	uxth	r2, r3
 8003144:	4b38      	ldr	r3, [pc, #224]	; (8003228 <feed_set+0x530>)
 8003146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800314a:	3b01      	subs	r3, #1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003152:	4423      	add	r3, r4
 8003154:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8003158:	b29b      	uxth	r3, r3
 800315a:	3330      	adds	r3, #48	; 0x30
 800315c:	b29b      	uxth	r3, r3
 800315e:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 8003162:	9400      	str	r4, [sp, #0]
 8003164:	f001 fd1e 	bl	8004ba4 <TFT9341_FillRect>
 8003168:	e0eb      	b.n	8003342 <feed_set+0x64a>
		}
		else if(skip==1)
 800316a:	4b36      	ldr	r3, [pc, #216]	; (8003244 <feed_set+0x54c>)
 800316c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d16b      	bne.n	800324c <feed_set+0x554>
		{
			limit_selection(0,59);
 8003174:	213b      	movs	r1, #59	; 0x3b
 8003176:	2000      	movs	r0, #0
 8003178:	f7fd ffc4 	bl	8001104 <limit_selection>
			feed_time[selection_wheel-1][1]=selection;
 800317c:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <feed_set+0x530>)
 800317e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003182:	3b01      	subs	r3, #1
 8003184:	4a2b      	ldr	r2, [pc, #172]	; (8003234 <feed_set+0x53c>)
 8003186:	f9b2 1000 	ldrsh.w	r1, [r2]
 800318a:	4a2f      	ldr	r2, [pc, #188]	; (8003248 <feed_set+0x550>)
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	460a      	mov	r2, r1
 8003192:	805a      	strh	r2, [r3, #2]
			TFT9341_FillRect(x_pos+4,y_pos[selection_wheel-1]+50,x_pos+24,y_pos[selection_wheel-1]+48,0x0000);
 8003194:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003196:	3304      	adds	r3, #4
 8003198:	b298      	uxth	r0, r3
 800319a:	4b23      	ldr	r3, [pc, #140]	; (8003228 <feed_set+0x530>)
 800319c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80031a8:	4413      	add	r3, r2
 80031aa:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3332      	adds	r3, #50	; 0x32
 80031b2:	b299      	uxth	r1, r3
 80031b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031b6:	3318      	adds	r3, #24
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <feed_set+0x530>)
 80031bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80031c8:	4423      	add	r3, r4
 80031ca:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3330      	adds	r3, #48	; 0x30
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2400      	movs	r4, #0
 80031d6:	9400      	str	r4, [sp, #0]
 80031d8:	f001 fce4 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_FillRect(x_pos+34,y_pos[selection_wheel-1]+50,x_pos+54,y_pos[selection_wheel-1]+48,0xf000);
 80031dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031de:	3322      	adds	r3, #34	; 0x22
 80031e0:	b298      	uxth	r0, r3
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <feed_set+0x530>)
 80031e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80031f0:	4413      	add	r3, r2
 80031f2:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3332      	adds	r3, #50	; 0x32
 80031fa:	b299      	uxth	r1, r3
 80031fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031fe:	3336      	adds	r3, #54	; 0x36
 8003200:	b29a      	uxth	r2, r3
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <feed_set+0x530>)
 8003204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003208:	3b01      	subs	r3, #1
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003210:	4423      	add	r3, r4
 8003212:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8003216:	b29b      	uxth	r3, r3
 8003218:	3330      	adds	r3, #48	; 0x30
 800321a:	b29b      	uxth	r3, r3
 800321c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 8003220:	9400      	str	r4, [sp, #0]
 8003222:	f001 fcbf 	bl	8004ba4 <TFT9341_FillRect>
 8003226:	e08c      	b.n	8003342 <feed_set+0x64a>
 8003228:	2000070c 	.word	0x2000070c
 800322c:	200006fc 	.word	0x200006fc
 8003230:	200008b4 	.word	0x200008b4
 8003234:	20000aa8 	.word	0x20000aa8
 8003238:	20000b78 	.word	0x20000b78
 800323c:	2000000c 	.word	0x2000000c
 8003240:	0800a6f8 	.word	0x0800a6f8
 8003244:	200008a4 	.word	0x200008a4
 8003248:	20000a44 	.word	0x20000a44
		}
		else if(skip==2)
 800324c:	4b57      	ldr	r3, [pc, #348]	; (80033ac <feed_set+0x6b4>)
 800324e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d175      	bne.n	8003342 <feed_set+0x64a>
		{
			limit_selection(0,100);
 8003256:	2164      	movs	r1, #100	; 0x64
 8003258:	2000      	movs	r0, #0
 800325a:	f7fd ff53 	bl	8001104 <limit_selection>
			feed_amount[selection_wheel-1]=selection;
 800325e:	4b54      	ldr	r3, [pc, #336]	; (80033b0 <feed_set+0x6b8>)
 8003260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003264:	3b01      	subs	r3, #1
 8003266:	4a53      	ldr	r2, [pc, #332]	; (80033b4 <feed_set+0x6bc>)
 8003268:	f9b2 1000 	ldrsh.w	r1, [r2]
 800326c:	4a52      	ldr	r2, [pc, #328]	; (80033b8 <feed_set+0x6c0>)
 800326e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			TFT9341_FillRect(x_pos+34,y_pos[selection_wheel-1]+50,x_pos+54,y_pos[selection_wheel-1]+48,0x0000);
 8003272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003274:	3322      	adds	r3, #34	; 0x22
 8003276:	b298      	uxth	r0, r3
 8003278:	4b4d      	ldr	r3, [pc, #308]	; (80033b0 <feed_set+0x6b8>)
 800327a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800327e:	3b01      	subs	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003286:	4413      	add	r3, r2
 8003288:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800328c:	b29b      	uxth	r3, r3
 800328e:	3332      	adds	r3, #50	; 0x32
 8003290:	b299      	uxth	r1, r3
 8003292:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003294:	3336      	adds	r3, #54	; 0x36
 8003296:	b29a      	uxth	r2, r3
 8003298:	4b45      	ldr	r3, [pc, #276]	; (80033b0 <feed_set+0x6b8>)
 800329a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800329e:	3b01      	subs	r3, #1
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80032a6:	4423      	add	r3, r4
 80032a8:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3330      	adds	r3, #48	; 0x30
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2400      	movs	r4, #0
 80032b4:	9400      	str	r4, [sp, #0]
 80032b6:	f001 fc75 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_FillRect(x_pos+94,y_pos[selection_wheel-1]+50,x_pos+130,y_pos[selection_wheel-1]+48,0xf000);
 80032ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032bc:	335e      	adds	r3, #94	; 0x5e
 80032be:	b298      	uxth	r0, r3
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <feed_set+0x6b8>)
 80032c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032ce:	4413      	add	r3, r2
 80032d0:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3332      	adds	r3, #50	; 0x32
 80032d8:	b299      	uxth	r1, r3
 80032da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032dc:	3382      	adds	r3, #130	; 0x82
 80032de:	b29a      	uxth	r2, r3
 80032e0:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <feed_set+0x6b8>)
 80032e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80032ee:	4423      	add	r3, r4
 80032f0:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3330      	adds	r3, #48	; 0x30
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 80032fe:	9400      	str	r4, [sp, #0]
 8003300:	f001 fc50 	bl	8004ba4 <TFT9341_FillRect>
			sprintf(str,"%d g   ",feed_amount[selection_wheel-1]);
 8003304:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <feed_set+0x6b8>)
 8003306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800330a:	3b01      	subs	r3, #1
 800330c:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <feed_set+0x6c0>)
 800330e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003312:	461a      	mov	r2, r3
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	4928      	ldr	r1, [pc, #160]	; (80033bc <feed_set+0x6c4>)
 800331a:	4618      	mov	r0, r3
 800331c:	f006 fc60 	bl	8009be0 <siprintf>
			TFT9341_String(110,20+(selection_wheel)*30,str);
 8003320:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <feed_set+0x6b8>)
 8003322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003326:	b29b      	uxth	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	0112      	lsls	r2, r2, #4
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	b29b      	uxth	r3, r3
 8003332:	3314      	adds	r3, #20
 8003334:	b29b      	uxth	r3, r3
 8003336:	f107 020c 	add.w	r2, r7, #12
 800333a:	4619      	mov	r1, r3
 800333c:	206e      	movs	r0, #110	; 0x6e
 800333e:	f001 fddb 	bl	8004ef8 <TFT9341_String>
		}
		TFT9341_SetTextColor(0xffff);
 8003342:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003346:	f001 fcf9 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 800334a:	481d      	ldr	r0, [pc, #116]	; (80033c0 <feed_set+0x6c8>)
 800334c:	f001 fd16 	bl	8004d7c <TFT9341_SetFont>
		TFT9341_String(15,20+(selection_wheel)*30,time_text(feed_time[selection_wheel-1][0],feed_time[selection_wheel-1][1],1));
 8003350:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <feed_set+0x6b8>)
 8003352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	0112      	lsls	r2, r2, #4
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	b29b      	uxth	r3, r3
 8003362:	3314      	adds	r3, #20
 8003364:	b29c      	uxth	r4, r3
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <feed_set+0x6b8>)
 8003368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800336c:	3b01      	subs	r3, #1
 800336e:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <feed_set+0x6cc>)
 8003370:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <feed_set+0x6b8>)
 8003376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337a:	3b01      	subs	r3, #1
 800337c:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <feed_set+0x6cc>)
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003386:	2201      	movs	r2, #1
 8003388:	4619      	mov	r1, r3
 800338a:	f7fd fdd1 	bl	8000f30 <time_text>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	4621      	mov	r1, r4
 8003394:	200f      	movs	r0, #15
 8003396:	f001 fdaf 	bl	8004ef8 <TFT9341_String>
		TFT9341_String(15,20+(0+4)*30,time_text(feed_time[3][0],feed_time[3][1]));
	}
	 */


	prev_selection=selection;
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <feed_set+0x6bc>)
 800339c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <feed_set+0x6d0>)
 80033a2:	801a      	strh	r2, [r3, #0]
		}

	}
	 */

}
 80033a4:	bf00      	nop
 80033a6:	3734      	adds	r7, #52	; 0x34
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	200008a4 	.word	0x200008a4
 80033b0:	2000070c 	.word	0x2000070c
 80033b4:	20000aa8 	.word	0x20000aa8
 80033b8:	20000b20 	.word	0x20000b20
 80033bc:	0800a708 	.word	0x0800a708
 80033c0:	2000000c 	.word	0x2000000c
 80033c4:	20000a44 	.word	0x20000a44
 80033c8:	20000b78 	.word	0x20000b78

080033cc <set_time>:

void set_time(void)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b08d      	sub	sp, #52	; 0x34
 80033d0:	af02      	add	r7, sp, #8
	char str[10];
	short x_pos=15;
 80033d2:	230f      	movs	r3, #15
 80033d4:	84fb      	strh	r3, [r7, #38]	; 0x26
	short y_pos[6];
	y_pos[0]=20;
 80033d6:	2314      	movs	r3, #20
 80033d8:	80bb      	strh	r3, [r7, #4]
	y_pos[1]=50;
 80033da:	2332      	movs	r3, #50	; 0x32
 80033dc:	80fb      	strh	r3, [r7, #6]
	//
	if(selection!=prev_selection &&selection_wheel==-1)
 80033de:	4b7b      	ldr	r3, [pc, #492]	; (80035cc <set_time+0x200>)
 80033e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80033e4:	4b7a      	ldr	r3, [pc, #488]	; (80035d0 <set_time+0x204>)
 80033e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d009      	beq.n	8003402 <set_time+0x36>
 80033ee:	4b79      	ldr	r3, [pc, #484]	; (80035d4 <set_time+0x208>)
 80033f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d103      	bne.n	8003402 <set_time+0x36>
	{
		limit_selection(0, 2);
 80033fa:	2102      	movs	r1, #2
 80033fc:	2000      	movs	r0, #0
 80033fe:	f7fd fe81 	bl	8001104 <limit_selection>
	}
	if(menu!=prev_menu || sub_menu!=prev_sub_menu ||update)
 8003402:	4b75      	ldr	r3, [pc, #468]	; (80035d8 <set_time+0x20c>)
 8003404:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003408:	4b74      	ldr	r3, [pc, #464]	; (80035dc <set_time+0x210>)
 800340a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800340e:	429a      	cmp	r2, r3
 8003410:	d10c      	bne.n	800342c <set_time+0x60>
 8003412:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <set_time+0x214>)
 8003414:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003418:	4b72      	ldr	r3, [pc, #456]	; (80035e4 <set_time+0x218>)
 800341a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800341e:	429a      	cmp	r2, r3
 8003420:	d104      	bne.n	800342c <set_time+0x60>
 8003422:	4b71      	ldr	r3, [pc, #452]	; (80035e8 <set_time+0x21c>)
 8003424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d04e      	beq.n	80034ca <set_time+0xfe>
	{
		prev_selection=-1;
 800342c:	4b68      	ldr	r3, [pc, #416]	; (80035d0 <set_time+0x204>)
 800342e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003432:	801a      	strh	r2, [r3, #0]
		selection=0;
 8003434:	4b65      	ldr	r3, [pc, #404]	; (80035cc <set_time+0x200>)
 8003436:	2200      	movs	r2, #0
 8003438:	801a      	strh	r2, [r3, #0]
		TFT9341_FillScreen(0x0000);
 800343a:	2000      	movs	r0, #0
 800343c:	f001 fc26 	bl	8004c8c <TFT9341_FillScreen>
		TFT9341_SetTextColor(0xffff);
 8003440:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003444:	f001 fc7a 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8003448:	4868      	ldr	r0, [pc, #416]	; (80035ec <set_time+0x220>)
 800344a:	f001 fc97 	bl	8004d7c <TFT9341_SetFont>
		sprintf(str,"Tijd: %s",time_text(rtc.Hour,rtc.Min,1));
 800344e:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <set_time+0x224>)
 8003450:	791b      	ldrb	r3, [r3, #4]
 8003452:	b21b      	sxth	r3, r3
 8003454:	4a66      	ldr	r2, [pc, #408]	; (80035f0 <set_time+0x224>)
 8003456:	7952      	ldrb	r2, [r2, #5]
 8003458:	b211      	sxth	r1, r2
 800345a:	2201      	movs	r2, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fd67 	bl	8000f30 <time_text>
 8003462:	4602      	mov	r2, r0
 8003464:	f107 0310 	add.w	r3, r7, #16
 8003468:	4962      	ldr	r1, [pc, #392]	; (80035f4 <set_time+0x228>)
 800346a:	4618      	mov	r0, r3
 800346c:	f006 fbb8 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[0],str);
 8003470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003472:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003476:	b291      	uxth	r1, r2
 8003478:	f107 0210 	add.w	r2, r7, #16
 800347c:	4618      	mov	r0, r3
 800347e:	f001 fd3b 	bl	8004ef8 <TFT9341_String>
		sprintf(str,"Dag: %s",enum_to_day(rtc.DaysOfWeek));
 8003482:	4b5b      	ldr	r3, [pc, #364]	; (80035f0 <set_time+0x224>)
 8003484:	78db      	ldrb	r3, [r3, #3]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fdfe 	bl	8001088 <enum_to_day>
 800348c:	4602      	mov	r2, r0
 800348e:	f107 0310 	add.w	r3, r7, #16
 8003492:	4959      	ldr	r1, [pc, #356]	; (80035f8 <set_time+0x22c>)
 8003494:	4618      	mov	r0, r3
 8003496:	f006 fba3 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[1],str);
 800349a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800349c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034a0:	b291      	uxth	r1, r2
 80034a2:	f107 0210 	add.w	r2, r7, #16
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fd26 	bl	8004ef8 <TFT9341_String>

		prev_menu=menu;
 80034ac:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <set_time+0x20c>)
 80034ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034b2:	4b4a      	ldr	r3, [pc, #296]	; (80035dc <set_time+0x210>)
 80034b4:	801a      	strh	r2, [r3, #0]
		prev_sub_menu=sub_menu;
 80034b6:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <set_time+0x214>)
 80034b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034bc:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <set_time+0x218>)
 80034be:	801a      	strh	r2, [r3, #0]
		update=0;
 80034c0:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <set_time+0x21c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	801a      	strh	r2, [r3, #0]
		draw_back();
 80034c6:	f7fe fa51 	bl	800196c <draw_back>

	}

	if(selection!=prev_selection)
 80034ca:	4b40      	ldr	r3, [pc, #256]	; (80035cc <set_time+0x200>)
 80034cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034d0:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <set_time+0x204>)
 80034d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	f000 80b9 	beq.w	800364e <set_time+0x282>
	{
		if(selection_wheel==-1)
 80034dc:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <set_time+0x208>)
 80034de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d104      	bne.n	80034f2 <set_time+0x126>
		{
			prev_selection=selection;
 80034e8:	4b38      	ldr	r3, [pc, #224]	; (80035cc <set_time+0x200>)
 80034ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034ee:	4b38      	ldr	r3, [pc, #224]	; (80035d0 <set_time+0x204>)
 80034f0:	801a      	strh	r2, [r3, #0]
		}
		x_pos=15;
 80034f2:	230f      	movs	r3, #15
 80034f4:	84fb      	strh	r3, [r7, #38]	; 0x26
		y_pos[0]=20;
 80034f6:	2314      	movs	r3, #20
 80034f8:	80bb      	strh	r3, [r7, #4]
		for(int i=1;i<2;i++)
 80034fa:	2301      	movs	r3, #1
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	e015      	b.n	800352c <set_time+0x160>
		{
			y_pos[i]=y_pos[i-1]+30;
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	3b01      	subs	r3, #1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800350a:	4413      	add	r3, r2
 800350c:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8003510:	b29b      	uxth	r3, r3
 8003512:	331e      	adds	r3, #30
 8003514:	b29b      	uxth	r3, r3
 8003516:	b21a      	sxth	r2, r3
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003520:	440b      	add	r3, r1
 8003522:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(int i=1;i<2;i++)
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	3301      	adds	r3, #1
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	2b01      	cmp	r3, #1
 8003530:	dde6      	ble.n	8003500 <set_time+0x134>
		}

		if(selection==2 && selection_wheel==-1)
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <set_time+0x200>)
 8003534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d110      	bne.n	800355e <set_time+0x192>
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <set_time+0x208>)
 800353e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d10a      	bne.n	800355e <set_time+0x192>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0xFD60);
 8003548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800354a:	3328      	adds	r3, #40	; 0x28
 800354c:	b29a      	uxth	r2, r3
 800354e:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	23e1      	movs	r3, #225	; 0xe1
 8003556:	21df      	movs	r1, #223	; 0xdf
 8003558:	200f      	movs	r0, #15
 800355a:	f001 fb23 	bl	8004ba4 <TFT9341_FillRect>
		}
		if(selection!=2)
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <set_time+0x200>)
 8003560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d009      	beq.n	800357c <set_time+0x1b0>
		{
			TFT9341_FillRect(15,190+29+4,x_pos+40,190+29+4+2,0x0000);
 8003568:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800356a:	3328      	adds	r3, #40	; 0x28
 800356c:	b29a      	uxth	r2, r3
 800356e:	2300      	movs	r3, #0
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	23e1      	movs	r3, #225	; 0xe1
 8003574:	21df      	movs	r1, #223	; 0xdf
 8003576:	200f      	movs	r0, #15
 8003578:	f001 fb14 	bl	8004ba4 <TFT9341_FillRect>
		}
		for(int i=0;i<2;i++)
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	e062      	b.n	8003648 <set_time+0x27c>
		{
			if(selection!=i)
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <set_time+0x200>)
 8003584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003588:	461a      	mov	r2, r3
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	4293      	cmp	r3, r2
 800358e:	d035      	beq.n	80035fc <set_time+0x230>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0x0000);
 8003590:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800359a:	4413      	add	r3, r2
 800359c:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3314      	adds	r3, #20
 80035a4:	b299      	uxth	r1, r3
 80035a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035a8:	3350      	adds	r3, #80	; 0x50
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80035b4:	4423      	add	r3, r4
 80035b6:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3316      	adds	r3, #22
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2400      	movs	r4, #0
 80035c2:	9400      	str	r4, [sp, #0]
 80035c4:	f001 faee 	bl	8004ba4 <TFT9341_FillRect>
 80035c8:	e03b      	b.n	8003642 <set_time+0x276>
 80035ca:	bf00      	nop
 80035cc:	20000aa8 	.word	0x20000aa8
 80035d0:	20000b78 	.word	0x20000b78
 80035d4:	2000070c 	.word	0x2000070c
 80035d8:	200008bc 	.word	0x200008bc
 80035dc:	20000700 	.word	0x20000700
 80035e0:	20000702 	.word	0x20000702
 80035e4:	20000704 	.word	0x20000704
 80035e8:	200008b4 	.word	0x200008b4
 80035ec:	2000000c 	.word	0x2000000c
 80035f0:	20000718 	.word	0x20000718
 80035f4:	0800a710 	.word	0x0800a710
 80035f8:	0800a71c 	.word	0x0800a71c
			}
			else if(selection_wheel==-1)
 80035fc:	4baa      	ldr	r3, [pc, #680]	; (80038a8 <set_time+0x4dc>)
 80035fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d11c      	bne.n	8003642 <set_time+0x276>
			{
				TFT9341_FillRect(x_pos,y_pos[i]+20,x_pos+80,y_pos[i]+22,0xFD60);
 8003608:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003612:	4413      	add	r3, r2
 8003614:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8003618:	b29b      	uxth	r3, r3
 800361a:	3314      	adds	r3, #20
 800361c:	b299      	uxth	r1, r3
 800361e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003620:	3350      	adds	r3, #80	; 0x50
 8003622:	b29a      	uxth	r2, r3
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800362c:	4423      	add	r3, r4
 800362e:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8003632:	b29b      	uxth	r3, r3
 8003634:	3316      	adds	r3, #22
 8003636:	b29b      	uxth	r3, r3
 8003638:	f64f 5460 	movw	r4, #64864	; 0xfd60
 800363c:	9400      	str	r4, [sp, #0]
 800363e:	f001 fab1 	bl	8004ba4 <TFT9341_FillRect>
		for(int i=0;i<2;i++)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3301      	adds	r3, #1
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b01      	cmp	r3, #1
 800364c:	dd99      	ble.n	8003582 <set_time+0x1b6>

		}
	}


	if(selection_wheel==0 && selection!=prev_selection) //time adjust selected
 800364e:	4b96      	ldr	r3, [pc, #600]	; (80038a8 <set_time+0x4dc>)
 8003650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f040 80d6 	bne.w	8003806 <set_time+0x43a>
 800365a:	4b94      	ldr	r3, [pc, #592]	; (80038ac <set_time+0x4e0>)
 800365c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003660:	4b93      	ldr	r3, [pc, #588]	; (80038b0 <set_time+0x4e4>)
 8003662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003666:	429a      	cmp	r2, r3
 8003668:	f000 80cd 	beq.w	8003806 <set_time+0x43a>
	{
		prev_selection=selection;
 800366c:	4b8f      	ldr	r3, [pc, #572]	; (80038ac <set_time+0x4e0>)
 800366e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003672:	4b8f      	ldr	r3, [pc, #572]	; (80038b0 <set_time+0x4e4>)
 8003674:	801a      	strh	r2, [r3, #0]
		if(skip==0)
 8003676:	4b8f      	ldr	r3, [pc, #572]	; (80038b4 <set_time+0x4e8>)
 8003678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d154      	bne.n	800372a <set_time+0x35e>
		{
			limit_selection(0, 23);
 8003680:	2117      	movs	r1, #23
 8003682:	2000      	movs	r0, #0
 8003684:	f7fd fd3e 	bl	8001104 <limit_selection>
			TFT9341_FillRect(x_pos+67,y_pos[0]+20,x_pos+87,y_pos[0]+18,0xf000);
 8003688:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800368a:	3343      	adds	r3, #67	; 0x43
 800368c:	b298      	uxth	r0, r3
 800368e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003692:	b29b      	uxth	r3, r3
 8003694:	3314      	adds	r3, #20
 8003696:	b299      	uxth	r1, r3
 8003698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800369a:	3357      	adds	r3, #87	; 0x57
 800369c:	b29a      	uxth	r2, r3
 800369e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3312      	adds	r3, #18
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 80036ac:	9400      	str	r4, [sp, #0]
 80036ae:	f001 fa79 	bl	8004ba4 <TFT9341_FillRect>

			TFT9341_SetTextColor(0xffff);
 80036b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80036b6:	f001 fb41 	bl	8004d3c <TFT9341_SetTextColor>
			TFT9341_SetFont(&Font16);
 80036ba:	487f      	ldr	r0, [pc, #508]	; (80038b8 <set_time+0x4ec>)
 80036bc:	f001 fb5e 	bl	8004d7c <TFT9341_SetFont>
			rtc.Hour=selection;
 80036c0:	4b7a      	ldr	r3, [pc, #488]	; (80038ac <set_time+0x4e0>)
 80036c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4b7c      	ldr	r3, [pc, #496]	; (80038bc <set_time+0x4f0>)
 80036ca:	711a      	strb	r2, [r3, #4]
			sprintf(str,"Tijd: %s",time_text(rtc.Hour,rtc.Min,1));
 80036cc:	4b7b      	ldr	r3, [pc, #492]	; (80038bc <set_time+0x4f0>)
 80036ce:	791b      	ldrb	r3, [r3, #4]
 80036d0:	b21b      	sxth	r3, r3
 80036d2:	4a7a      	ldr	r2, [pc, #488]	; (80038bc <set_time+0x4f0>)
 80036d4:	7952      	ldrb	r2, [r2, #5]
 80036d6:	b211      	sxth	r1, r2
 80036d8:	2201      	movs	r2, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fd fc28 	bl	8000f30 <time_text>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f107 0310 	add.w	r3, r7, #16
 80036e6:	4976      	ldr	r1, [pc, #472]	; (80038c0 <set_time+0x4f4>)
 80036e8:	4618      	mov	r0, r3
 80036ea:	f006 fa79 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[0],str);
 80036ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80036f4:	b291      	uxth	r1, r2
 80036f6:	f107 0210 	add.w	r2, r7, #16
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fbfc 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"Dag: %s",enum_to_day(rtc.DaysOfWeek));
 8003700:	4b6e      	ldr	r3, [pc, #440]	; (80038bc <set_time+0x4f0>)
 8003702:	78db      	ldrb	r3, [r3, #3]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd fcbf 	bl	8001088 <enum_to_day>
 800370a:	4602      	mov	r2, r0
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	496c      	ldr	r1, [pc, #432]	; (80038c4 <set_time+0x4f8>)
 8003712:	4618      	mov	r0, r3
 8003714:	f006 fa64 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[1],str);
 8003718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800371a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800371e:	b291      	uxth	r1, r2
 8003720:	f107 0210 	add.w	r2, r7, #16
 8003724:	4618      	mov	r0, r3
 8003726:	f001 fbe7 	bl	8004ef8 <TFT9341_String>
		}
		if(skip==1)
 800372a:	4b62      	ldr	r3, [pc, #392]	; (80038b4 <set_time+0x4e8>)
 800372c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d168      	bne.n	8003806 <set_time+0x43a>
		{

			limit_selection(0, 59);
 8003734:	213b      	movs	r1, #59	; 0x3b
 8003736:	2000      	movs	r0, #0
 8003738:	f7fd fce4 	bl	8001104 <limit_selection>
			TFT9341_FillRect(x_pos+67,y_pos[0]+20,x_pos+87,y_pos[0]+18,0x0000);
 800373c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800373e:	3343      	adds	r3, #67	; 0x43
 8003740:	b298      	uxth	r0, r3
 8003742:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003746:	b29b      	uxth	r3, r3
 8003748:	3314      	adds	r3, #20
 800374a:	b299      	uxth	r1, r3
 800374c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800374e:	3357      	adds	r3, #87	; 0x57
 8003750:	b29a      	uxth	r2, r3
 8003752:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003756:	b29b      	uxth	r3, r3
 8003758:	3312      	adds	r3, #18
 800375a:	b29b      	uxth	r3, r3
 800375c:	2400      	movs	r4, #0
 800375e:	9400      	str	r4, [sp, #0]
 8003760:	f001 fa20 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_FillRect(x_pos+100,y_pos[0]+20,x_pos+120,y_pos[0]+18,0xf000);
 8003764:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003766:	3364      	adds	r3, #100	; 0x64
 8003768:	b298      	uxth	r0, r3
 800376a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800376e:	b29b      	uxth	r3, r3
 8003770:	3314      	adds	r3, #20
 8003772:	b299      	uxth	r1, r3
 8003774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003776:	3378      	adds	r3, #120	; 0x78
 8003778:	b29a      	uxth	r2, r3
 800377a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800377e:	b29b      	uxth	r3, r3
 8003780:	3312      	adds	r3, #18
 8003782:	b29b      	uxth	r3, r3
 8003784:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 8003788:	9400      	str	r4, [sp, #0]
 800378a:	f001 fa0b 	bl	8004ba4 <TFT9341_FillRect>
			TFT9341_SetTextColor(0xffff);
 800378e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003792:	f001 fad3 	bl	8004d3c <TFT9341_SetTextColor>
			TFT9341_SetFont(&Font16);
 8003796:	4848      	ldr	r0, [pc, #288]	; (80038b8 <set_time+0x4ec>)
 8003798:	f001 faf0 	bl	8004d7c <TFT9341_SetFont>
			rtc.Min=selection;
 800379c:	4b43      	ldr	r3, [pc, #268]	; (80038ac <set_time+0x4e0>)
 800379e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	4b45      	ldr	r3, [pc, #276]	; (80038bc <set_time+0x4f0>)
 80037a6:	715a      	strb	r2, [r3, #5]
			sprintf(str,"Tijd: %s",time_text(rtc.Hour,rtc.Min,1));
 80037a8:	4b44      	ldr	r3, [pc, #272]	; (80038bc <set_time+0x4f0>)
 80037aa:	791b      	ldrb	r3, [r3, #4]
 80037ac:	b21b      	sxth	r3, r3
 80037ae:	4a43      	ldr	r2, [pc, #268]	; (80038bc <set_time+0x4f0>)
 80037b0:	7952      	ldrb	r2, [r2, #5]
 80037b2:	b211      	sxth	r1, r2
 80037b4:	2201      	movs	r2, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fbba 	bl	8000f30 <time_text>
 80037bc:	4602      	mov	r2, r0
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	493f      	ldr	r1, [pc, #252]	; (80038c0 <set_time+0x4f4>)
 80037c4:	4618      	mov	r0, r3
 80037c6:	f006 fa0b 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[0],str);
 80037ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80037d0:	b291      	uxth	r1, r2
 80037d2:	f107 0210 	add.w	r2, r7, #16
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 fb8e 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"Dag: %s",enum_to_day(rtc.DaysOfWeek));
 80037dc:	4b37      	ldr	r3, [pc, #220]	; (80038bc <set_time+0x4f0>)
 80037de:	78db      	ldrb	r3, [r3, #3]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fc51 	bl	8001088 <enum_to_day>
 80037e6:	4602      	mov	r2, r0
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	4935      	ldr	r1, [pc, #212]	; (80038c4 <set_time+0x4f8>)
 80037ee:	4618      	mov	r0, r3
 80037f0:	f006 f9f6 	bl	8009be0 <siprintf>
			TFT9341_String(x_pos,y_pos[1],str);
 80037f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037fa:	b291      	uxth	r1, r2
 80037fc:	f107 0210 	add.w	r2, r7, #16
 8003800:	4618      	mov	r0, r3
 8003802:	f001 fb79 	bl	8004ef8 <TFT9341_String>
		}
	}
	if(selection_wheel==1 && selection!=prev_selection)
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <set_time+0x4dc>)
 8003808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d147      	bne.n	80038a0 <set_time+0x4d4>
 8003810:	4b26      	ldr	r3, [pc, #152]	; (80038ac <set_time+0x4e0>)
 8003812:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003816:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <set_time+0x4e4>)
 8003818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800381c:	429a      	cmp	r2, r3
 800381e:	d03f      	beq.n	80038a0 <set_time+0x4d4>
	{
		prev_selection=selection;
 8003820:	4b22      	ldr	r3, [pc, #136]	; (80038ac <set_time+0x4e0>)
 8003822:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003826:	4b22      	ldr	r3, [pc, #136]	; (80038b0 <set_time+0x4e4>)
 8003828:	801a      	strh	r2, [r3, #0]
		limit_selection(1,7);
 800382a:	2107      	movs	r1, #7
 800382c:	2001      	movs	r0, #1
 800382e:	f7fd fc69 	bl	8001104 <limit_selection>
		rtc.DaysOfWeek=selection;
 8003832:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <set_time+0x4e0>)
 8003834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <set_time+0x4f0>)
 800383c:	70da      	strb	r2, [r3, #3]
		TFT9341_FillRect(x_pos+55,y_pos[0]+50,x_pos+75,y_pos[0]+48,0xf000);
 800383e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003840:	3337      	adds	r3, #55	; 0x37
 8003842:	b298      	uxth	r0, r3
 8003844:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003848:	b29b      	uxth	r3, r3
 800384a:	3332      	adds	r3, #50	; 0x32
 800384c:	b299      	uxth	r1, r3
 800384e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003850:	334b      	adds	r3, #75	; 0x4b
 8003852:	b29a      	uxth	r2, r3
 8003854:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003858:	b29b      	uxth	r3, r3
 800385a:	3330      	adds	r3, #48	; 0x30
 800385c:	b29b      	uxth	r3, r3
 800385e:	f44f 4470 	mov.w	r4, #61440	; 0xf000
 8003862:	9400      	str	r4, [sp, #0]
 8003864:	f001 f99e 	bl	8004ba4 <TFT9341_FillRect>
		TFT9341_SetTextColor(0xffff);
 8003868:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800386c:	f001 fa66 	bl	8004d3c <TFT9341_SetTextColor>
		TFT9341_SetFont(&Font16);
 8003870:	4811      	ldr	r0, [pc, #68]	; (80038b8 <set_time+0x4ec>)
 8003872:	f001 fa83 	bl	8004d7c <TFT9341_SetFont>
		sprintf(str,"Dag: %s",enum_to_day(rtc.DaysOfWeek));
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <set_time+0x4f0>)
 8003878:	78db      	ldrb	r3, [r3, #3]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fc04 	bl	8001088 <enum_to_day>
 8003880:	4602      	mov	r2, r0
 8003882:	f107 0310 	add.w	r3, r7, #16
 8003886:	490f      	ldr	r1, [pc, #60]	; (80038c4 <set_time+0x4f8>)
 8003888:	4618      	mov	r0, r3
 800388a:	f006 f9a9 	bl	8009be0 <siprintf>
		TFT9341_String(x_pos,y_pos[1],str);
 800388e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003890:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003894:	b291      	uxth	r1, r2
 8003896:	f107 0210 	add.w	r2, r7, #16
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fb2c 	bl	8004ef8 <TFT9341_String>
	{
		y_pos[i]=y_pos[i-1]+30;
	}
	 */

}
 80038a0:	bf00      	nop
 80038a2:	372c      	adds	r7, #44	; 0x2c
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd90      	pop	{r4, r7, pc}
 80038a8:	2000070c 	.word	0x2000070c
 80038ac:	20000aa8 	.word	0x20000aa8
 80038b0:	20000b78 	.word	0x20000b78
 80038b4:	200008a4 	.word	0x200008a4
 80038b8:	2000000c 	.word	0x2000000c
 80038bc:	20000718 	.word	0x20000718
 80038c0:	0800a710 	.word	0x0800a710
 80038c4:	0800a71c 	.word	0x0800a71c

080038c8 <calibrate_feed>:



void calibrate_feed(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b09c      	sub	sp, #112	; 0x70
 80038cc:	af02      	add	r7, sp, #8
	char str[100];
	if(menu!=prev_menu || sub_menu!=prev_sub_menu ||update)
 80038ce:	4bc2      	ldr	r3, [pc, #776]	; (8003bd8 <calibrate_feed+0x310>)
 80038d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80038d4:	4bc1      	ldr	r3, [pc, #772]	; (8003bdc <calibrate_feed+0x314>)
 80038d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d10d      	bne.n	80038fa <calibrate_feed+0x32>
 80038de:	4bc0      	ldr	r3, [pc, #768]	; (8003be0 <calibrate_feed+0x318>)
 80038e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80038e4:	4bbf      	ldr	r3, [pc, #764]	; (8003be4 <calibrate_feed+0x31c>)
 80038e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d105      	bne.n	80038fa <calibrate_feed+0x32>
 80038ee:	4bbe      	ldr	r3, [pc, #760]	; (8003be8 <calibrate_feed+0x320>)
 80038f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8125 	beq.w	8003b44 <calibrate_feed+0x27c>
	{
		prev_selection=-1;
 80038fa:	4bbc      	ldr	r3, [pc, #752]	; (8003bec <calibrate_feed+0x324>)
 80038fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003900:	801a      	strh	r2, [r3, #0]
		if(skip!=4)
 8003902:	4bbb      	ldr	r3, [pc, #748]	; (8003bf0 <calibrate_feed+0x328>)
 8003904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d002      	beq.n	8003912 <calibrate_feed+0x4a>
		{
			selection=0;
 800390c:	4bb9      	ldr	r3, [pc, #740]	; (8003bf4 <calibrate_feed+0x32c>)
 800390e:	2200      	movs	r2, #0
 8003910:	801a      	strh	r2, [r3, #0]
		}
		TFT9341_FillScreen(0x0000);
 8003912:	2000      	movs	r0, #0
 8003914:	f001 f9ba 	bl	8004c8c <TFT9341_FillScreen>
		TFT9341_SetTextColor(0xffff);
 8003918:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800391c:	f001 fa0e 	bl	8004d3c <TFT9341_SetTextColor>

		prev_menu=menu;
 8003920:	4bad      	ldr	r3, [pc, #692]	; (8003bd8 <calibrate_feed+0x310>)
 8003922:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003926:	4bad      	ldr	r3, [pc, #692]	; (8003bdc <calibrate_feed+0x314>)
 8003928:	801a      	strh	r2, [r3, #0]
		prev_sub_menu=sub_menu;
 800392a:	4bad      	ldr	r3, [pc, #692]	; (8003be0 <calibrate_feed+0x318>)
 800392c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003930:	4bac      	ldr	r3, [pc, #688]	; (8003be4 <calibrate_feed+0x31c>)
 8003932:	801a      	strh	r2, [r3, #0]
		update=0;
 8003934:	4bac      	ldr	r3, [pc, #688]	; (8003be8 <calibrate_feed+0x320>)
 8003936:	2200      	movs	r2, #0
 8003938:	801a      	strh	r2, [r3, #0]
		draw_back();
 800393a:	f7fe f817 	bl	800196c <draw_back>



		if(skip==0)
 800393e:	4bac      	ldr	r3, [pc, #688]	; (8003bf0 <calibrate_feed+0x328>)
 8003940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d12c      	bne.n	80039a2 <calibrate_feed+0xda>
		{
			sprintf(str,"Er wordt 20 seconden");
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	49ab      	ldr	r1, [pc, #684]	; (8003bf8 <calibrate_feed+0x330>)
 800394c:	4618      	mov	r0, r3
 800394e:	f006 f947 	bl	8009be0 <siprintf>
			TFT9341_String(15, 20, str);
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	461a      	mov	r2, r3
 8003956:	2114      	movs	r1, #20
 8003958:	200f      	movs	r0, #15
 800395a:	f001 facd 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"lang voer uitgedraaid.");
 800395e:	1d3b      	adds	r3, r7, #4
 8003960:	49a6      	ldr	r1, [pc, #664]	; (8003bfc <calibrate_feed+0x334>)
 8003962:	4618      	mov	r0, r3
 8003964:	f006 f93c 	bl	8009be0 <siprintf>
			TFT9341_String(15, 50, str);
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	461a      	mov	r2, r3
 800396c:	2132      	movs	r1, #50	; 0x32
 800396e:	200f      	movs	r0, #15
 8003970:	f001 fac2 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"Druk op de knop om");
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	49a2      	ldr	r1, [pc, #648]	; (8003c00 <calibrate_feed+0x338>)
 8003978:	4618      	mov	r0, r3
 800397a:	f006 f931 	bl	8009be0 <siprintf>
			TFT9341_String(15, 80, str);
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	461a      	mov	r2, r3
 8003982:	2150      	movs	r1, #80	; 0x50
 8003984:	200f      	movs	r0, #15
 8003986:	f001 fab7 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"verder te gaan.");
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	499d      	ldr	r1, [pc, #628]	; (8003c04 <calibrate_feed+0x33c>)
 800398e:	4618      	mov	r0, r3
 8003990:	f006 f926 	bl	8009be0 <siprintf>
			TFT9341_String(15, 110, str);
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	461a      	mov	r2, r3
 8003998:	216e      	movs	r1, #110	; 0x6e
 800399a:	200f      	movs	r0, #15
 800399c:	f001 faac 	bl	8004ef8 <TFT9341_String>
 80039a0:	e0d0      	b.n	8003b44 <calibrate_feed+0x27c>

		}
		else if(skip==1)
 80039a2:	4b93      	ldr	r3, [pc, #588]	; (8003bf0 <calibrate_feed+0x328>)
 80039a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d121      	bne.n	80039f0 <calibrate_feed+0x128>
		{
			sprintf(str,"Pak een weegschaal");
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	4996      	ldr	r1, [pc, #600]	; (8003c08 <calibrate_feed+0x340>)
 80039b0:	4618      	mov	r0, r3
 80039b2:	f006 f915 	bl	8009be0 <siprintf>
			TFT9341_String(15, 20, str);
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	461a      	mov	r2, r3
 80039ba:	2114      	movs	r1, #20
 80039bc:	200f      	movs	r0, #15
 80039be:	f001 fa9b 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"en een lege kom om de");
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	4991      	ldr	r1, [pc, #580]	; (8003c0c <calibrate_feed+0x344>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	f006 f90a 	bl	8009be0 <siprintf>
			TFT9341_String(15, 50, str);
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	461a      	mov	r2, r3
 80039d0:	2132      	movs	r1, #50	; 0x32
 80039d2:	200f      	movs	r0, #15
 80039d4:	f001 fa90 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"hoeveelheid voer te meten.");
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	498d      	ldr	r1, [pc, #564]	; (8003c10 <calibrate_feed+0x348>)
 80039dc:	4618      	mov	r0, r3
 80039de:	f006 f8ff 	bl	8009be0 <siprintf>
			TFT9341_String(15, 80, str);
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	461a      	mov	r2, r3
 80039e6:	2150      	movs	r1, #80	; 0x50
 80039e8:	200f      	movs	r0, #15
 80039ea:	f001 fa85 	bl	8004ef8 <TFT9341_String>
 80039ee:	e0a9      	b.n	8003b44 <calibrate_feed+0x27c>
		}
		else if(skip==2)
 80039f0:	4b7f      	ldr	r3, [pc, #508]	; (8003bf0 <calibrate_feed+0x328>)
 80039f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d137      	bne.n	8003a6a <calibrate_feed+0x1a2>
		{
			sprintf(str,"Houd eerst de knop");
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	4985      	ldr	r1, [pc, #532]	; (8003c14 <calibrate_feed+0x34c>)
 80039fe:	4618      	mov	r0, r3
 8003a00:	f006 f8ee 	bl	8009be0 <siprintf>
			TFT9341_String(15, 20, str);
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	461a      	mov	r2, r3
 8003a08:	2114      	movs	r1, #20
 8003a0a:	200f      	movs	r0, #15
 8003a0c:	f001 fa74 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"lang ingedrukt totdat er");
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	4981      	ldr	r1, [pc, #516]	; (8003c18 <calibrate_feed+0x350>)
 8003a14:	4618      	mov	r0, r3
 8003a16:	f006 f8e3 	bl	8009be0 <siprintf>
			TFT9341_String(15, 50, str);
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2132      	movs	r1, #50	; 0x32
 8003a20:	200f      	movs	r0, #15
 8003a22:	f001 fa69 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"voer uitkomt. Haal dit wel");
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	497c      	ldr	r1, [pc, #496]	; (8003c1c <calibrate_feed+0x354>)
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f006 f8d8 	bl	8009be0 <siprintf>
			TFT9341_String(15, 80, str);
 8003a30:	1d3b      	adds	r3, r7, #4
 8003a32:	461a      	mov	r2, r3
 8003a34:	2150      	movs	r1, #80	; 0x50
 8003a36:	200f      	movs	r0, #15
 8003a38:	f001 fa5e 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"uit de bak voordat je naar");
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	4978      	ldr	r1, [pc, #480]	; (8003c20 <calibrate_feed+0x358>)
 8003a40:	4618      	mov	r0, r3
 8003a42:	f006 f8cd 	bl	8009be0 <siprintf>
			TFT9341_String(15, 110, str);
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	461a      	mov	r2, r3
 8003a4a:	216e      	movs	r1, #110	; 0x6e
 8003a4c:	200f      	movs	r0, #15
 8003a4e:	f001 fa53 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"de volgende stap gaat.");
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	4973      	ldr	r1, [pc, #460]	; (8003c24 <calibrate_feed+0x35c>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f006 f8c2 	bl	8009be0 <siprintf>
			TFT9341_String(15, 140, str);
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	461a      	mov	r2, r3
 8003a60:	218c      	movs	r1, #140	; 0x8c
 8003a62:	200f      	movs	r0, #15
 8003a64:	f001 fa48 	bl	8004ef8 <TFT9341_String>
 8003a68:	e06c      	b.n	8003b44 <calibrate_feed+0x27c>
		}
		else if(skip==3)
 8003a6a:	4b61      	ldr	r3, [pc, #388]	; (8003bf0 <calibrate_feed+0x328>)
 8003a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d121      	bne.n	8003ab8 <calibrate_feed+0x1f0>
		{
			sprintf(str,"In de volgende stap");
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	496c      	ldr	r1, [pc, #432]	; (8003c28 <calibrate_feed+0x360>)
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f006 f8b1 	bl	8009be0 <siprintf>
			TFT9341_String(15, 20, str);
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	461a      	mov	r2, r3
 8003a82:	2114      	movs	r1, #20
 8003a84:	200f      	movs	r0, #15
 8003a86:	f001 fa37 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"wordt de 20 seconden lang");
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	4967      	ldr	r1, [pc, #412]	; (8003c2c <calibrate_feed+0x364>)
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f006 f8a6 	bl	8009be0 <siprintf>
			TFT9341_String(15, 50, str);
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	461a      	mov	r2, r3
 8003a98:	2132      	movs	r1, #50	; 0x32
 8003a9a:	200f      	movs	r0, #15
 8003a9c:	f001 fa2c 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"voer uitgedraaid.");
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	4963      	ldr	r1, [pc, #396]	; (8003c30 <calibrate_feed+0x368>)
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f006 f89b 	bl	8009be0 <siprintf>
			TFT9341_String(15, 80, str);
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	461a      	mov	r2, r3
 8003aae:	2150      	movs	r1, #80	; 0x50
 8003ab0:	200f      	movs	r0, #15
 8003ab2:	f001 fa21 	bl	8004ef8 <TFT9341_String>
 8003ab6:	e045      	b.n	8003b44 <calibrate_feed+0x27c>
		}
		else if(skip==4)
 8003ab8:	4b4d      	ldr	r3, [pc, #308]	; (8003bf0 <calibrate_feed+0x328>)
 8003aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d116      	bne.n	8003af0 <calibrate_feed+0x228>
		{
			sprintf(str,"Gemeten hoeveelheid");
 8003ac2:	1d3b      	adds	r3, r7, #4
 8003ac4:	495b      	ldr	r1, [pc, #364]	; (8003c34 <calibrate_feed+0x36c>)
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f006 f88a 	bl	8009be0 <siprintf>
			TFT9341_String(15, 20, str);
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2114      	movs	r1, #20
 8003ad2:	200f      	movs	r0, #15
 8003ad4:	f001 fa10 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"voer: ");
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	4957      	ldr	r1, [pc, #348]	; (8003c38 <calibrate_feed+0x370>)
 8003adc:	4618      	mov	r0, r3
 8003ade:	f006 f87f 	bl	8009be0 <siprintf>
			TFT9341_String(15, 50, str);
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2132      	movs	r1, #50	; 0x32
 8003ae8:	200f      	movs	r0, #15
 8003aea:	f001 fa05 	bl	8004ef8 <TFT9341_String>
 8003aee:	e029      	b.n	8003b44 <calibrate_feed+0x27c>

		}
		else if(skip==5)
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <calibrate_feed+0x328>)
 8003af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d124      	bne.n	8003b44 <calibrate_feed+0x27c>
		{
			sprintf(str,"De voerhoeveelheid is");
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	494f      	ldr	r1, [pc, #316]	; (8003c3c <calibrate_feed+0x374>)
 8003afe:	4618      	mov	r0, r3
 8003b00:	f006 f86e 	bl	8009be0 <siprintf>
			TFT9341_String(15, 20, str);
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	461a      	mov	r2, r3
 8003b08:	2114      	movs	r1, #20
 8003b0a:	200f      	movs	r0, #15
 8003b0c:	f001 f9f4 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"gecalibreerd!");
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	494b      	ldr	r1, [pc, #300]	; (8003c40 <calibrate_feed+0x378>)
 8003b14:	4618      	mov	r0, r3
 8003b16:	f006 f863 	bl	8009be0 <siprintf>
			TFT9341_String(15, 50, str);
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2132      	movs	r1, #50	; 0x32
 8003b20:	200f      	movs	r0, #15
 8003b22:	f001 f9e9 	bl	8004ef8 <TFT9341_String>
			sprintf(str,"Calibratiewaarde:%d  ",feed_cal);
 8003b26:	4b47      	ldr	r3, [pc, #284]	; (8003c44 <calibrate_feed+0x37c>)
 8003b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	4945      	ldr	r1, [pc, #276]	; (8003c48 <calibrate_feed+0x380>)
 8003b32:	4618      	mov	r0, r3
 8003b34:	f006 f854 	bl	8009be0 <siprintf>
			TFT9341_String(15, 80, str);
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2150      	movs	r1, #80	; 0x50
 8003b3e:	200f      	movs	r0, #15
 8003b40:	f001 f9da 	bl	8004ef8 <TFT9341_String>
		}

	}

	if(selection!=prev_selection)
 8003b44:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <calibrate_feed+0x32c>)
 8003b46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003b4a:	4b28      	ldr	r3, [pc, #160]	; (8003bec <calibrate_feed+0x324>)
 8003b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d03d      	beq.n	8003bd0 <calibrate_feed+0x308>
	{
		prev_selection=selection;
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <calibrate_feed+0x32c>)
 8003b56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <calibrate_feed+0x324>)
 8003b5c:	801a      	strh	r2, [r3, #0]

		if(skip!=4)
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <calibrate_feed+0x328>)
 8003b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d01b      	beq.n	8003ba0 <calibrate_feed+0x2d8>
		{
			limit_selection(0, 1);
 8003b68:	2101      	movs	r1, #1
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7fd faca 	bl	8001104 <limit_selection>
			if(selection==0)
 8003b70:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <calibrate_feed+0x32c>)
 8003b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <calibrate_feed+0x2c4>
			{
				TFT9341_FillRect(15,190+29+4,15+40,190+29+4+2,0x0000); //streep onder terugknop verwijderen.
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	23e1      	movs	r3, #225	; 0xe1
 8003b80:	2237      	movs	r2, #55	; 0x37
 8003b82:	21df      	movs	r1, #223	; 0xdf
 8003b84:	200f      	movs	r0, #15
 8003b86:	f001 f80d 	bl	8004ba4 <TFT9341_FillRect>
	}




}
 8003b8a:	e021      	b.n	8003bd0 <calibrate_feed+0x308>
				TFT9341_FillRect(15,190+29+4,15+40,190+29+4+2,0xFD60);
 8003b8c:	f64f 5360 	movw	r3, #64864	; 0xfd60
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	23e1      	movs	r3, #225	; 0xe1
 8003b94:	2237      	movs	r2, #55	; 0x37
 8003b96:	21df      	movs	r1, #223	; 0xdf
 8003b98:	200f      	movs	r0, #15
 8003b9a:	f001 f803 	bl	8004ba4 <TFT9341_FillRect>
}
 8003b9e:	e017      	b.n	8003bd0 <calibrate_feed+0x308>
			limit_selection(1,99);
 8003ba0:	2163      	movs	r1, #99	; 0x63
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f7fd faae 	bl	8001104 <limit_selection>
			feed_cal=selection;
 8003ba8:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <calibrate_feed+0x32c>)
 8003baa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003bae:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <calibrate_feed+0x37c>)
 8003bb0:	801a      	strh	r2, [r3, #0]
			sprintf(str,"%d g   ",feed_cal);
 8003bb2:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <calibrate_feed+0x37c>)
 8003bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	4923      	ldr	r1, [pc, #140]	; (8003c4c <calibrate_feed+0x384>)
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f006 f80e 	bl	8009be0 <siprintf>
			TFT9341_String(80, 50, str);
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2132      	movs	r1, #50	; 0x32
 8003bca:	2050      	movs	r0, #80	; 0x50
 8003bcc:	f001 f994 	bl	8004ef8 <TFT9341_String>
}
 8003bd0:	bf00      	nop
 8003bd2:	3768      	adds	r7, #104	; 0x68
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	200008bc 	.word	0x200008bc
 8003bdc:	20000700 	.word	0x20000700
 8003be0:	20000702 	.word	0x20000702
 8003be4:	20000704 	.word	0x20000704
 8003be8:	200008b4 	.word	0x200008b4
 8003bec:	20000b78 	.word	0x20000b78
 8003bf0:	200008a4 	.word	0x200008a4
 8003bf4:	20000aa8 	.word	0x20000aa8
 8003bf8:	0800a724 	.word	0x0800a724
 8003bfc:	0800a73c 	.word	0x0800a73c
 8003c00:	0800a754 	.word	0x0800a754
 8003c04:	0800a768 	.word	0x0800a768
 8003c08:	0800a778 	.word	0x0800a778
 8003c0c:	0800a78c 	.word	0x0800a78c
 8003c10:	0800a7a4 	.word	0x0800a7a4
 8003c14:	0800a7c0 	.word	0x0800a7c0
 8003c18:	0800a7d4 	.word	0x0800a7d4
 8003c1c:	0800a7f0 	.word	0x0800a7f0
 8003c20:	0800a80c 	.word	0x0800a80c
 8003c24:	0800a828 	.word	0x0800a828
 8003c28:	0800a840 	.word	0x0800a840
 8003c2c:	0800a854 	.word	0x0800a854
 8003c30:	0800a870 	.word	0x0800a870
 8003c34:	0800a884 	.word	0x0800a884
 8003c38:	0800a898 	.word	0x0800a898
 8003c3c:	0800a8a0 	.word	0x0800a8a0
 8003c40:	0800a8b8 	.word	0x0800a8b8
 8003c44:	20000714 	.word	0x20000714
 8003c48:	0800a8c8 	.word	0x0800a8c8
 8003c4c:	0800a708 	.word	0x0800a708

08003c50 <main>:
 * @retval int
 */


int main(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003c56:	f002 fba3 	bl	80063a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003c5a:	f000 fae3 	bl	8004224 <SystemClock_Config>
	//HAL_TIM_Base_Start_IT(&htim1);

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003c5e:	f000 fdb7 	bl	80047d0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8003c62:	f000 fb75 	bl	8004350 <MX_SPI1_Init>
	MX_TIM1_Init();
 8003c66:	f000 fbdf 	bl	8004428 <MX_TIM1_Init>
	MX_SPI2_Init();
 8003c6a:	f000 fba7 	bl	80043bc <MX_SPI2_Init>
	MX_TIM2_Init();
 8003c6e:	f000 fc7d 	bl	800456c <MX_TIM2_Init>
	MX_TIM3_Init();
 8003c72:	f000 fcc9 	bl	8004608 <MX_TIM3_Init>
	MX_I2C1_Init();
 8003c76:	f000 fb3d 	bl	80042f4 <MX_I2C1_Init>
	MX_TIM4_Init();
 8003c7a:	f000 fd13 	bl	80046a4 <MX_TIM4_Init>
	MX_TIM10_Init();
 8003c7e:	f000 fd5f 	bl	8004740 <MX_TIM10_Init>
	MX_TIM11_Init();
 8003c82:	f000 fd81 	bl	8004788 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */



	TFT9341_ini(240, 320);
 8003c86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c8a:	20f0      	movs	r0, #240	; 0xf0
 8003c8c:	f001 f9de 	bl	800504c <TFT9341_ini>
	TFT9341_SetRotation(1);
 8003c90:	2001      	movs	r0, #1
 8003c92:	f001 f955 	bl	8004f40 <TFT9341_SetRotation>
	TFT9341_FillScreen(0x000);
 8003c96:	2000      	movs	r0, #0
 8003c98:	f000 fff8 	bl	8004c8c <TFT9341_FillScreen>


	//extern short feed_time[4][2];
	feed_time[0][0]=8;
 8003c9c:	4b72      	ldr	r3, [pc, #456]	; (8003e68 <main+0x218>)
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	801a      	strh	r2, [r3, #0]
	feed_time[0][1]=0;
 8003ca2:	4b71      	ldr	r3, [pc, #452]	; (8003e68 <main+0x218>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	805a      	strh	r2, [r3, #2]
	feed_time[1][0]=13;
 8003ca8:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <main+0x218>)
 8003caa:	220d      	movs	r2, #13
 8003cac:	809a      	strh	r2, [r3, #4]
	feed_time[1][1]=1;
 8003cae:	4b6e      	ldr	r3, [pc, #440]	; (8003e68 <main+0x218>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	80da      	strh	r2, [r3, #6]
	feed_time[2][0]=18;
 8003cb4:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <main+0x218>)
 8003cb6:	2212      	movs	r2, #18
 8003cb8:	811a      	strh	r2, [r3, #8]
	feed_time[2][1]=0;
 8003cba:	4b6b      	ldr	r3, [pc, #428]	; (8003e68 <main+0x218>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	815a      	strh	r2, [r3, #10]
	feed_time[3][0]=0;
 8003cc0:	4b69      	ldr	r3, [pc, #420]	; (8003e68 <main+0x218>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	819a      	strh	r2, [r3, #12]
	feed_time[3][1]=10;
 8003cc6:	4b68      	ldr	r3, [pc, #416]	; (8003e68 <main+0x218>)
 8003cc8:	220a      	movs	r2, #10
 8003cca:	81da      	strh	r2, [r3, #14]
	//long text_colour;
	//short feed_status=1;
	//curr_time[0]=19;
	//curr_time[1]=47;
	//short feed_number=1;
	feed_amount[0]=7;
 8003ccc:	4b67      	ldr	r3, [pc, #412]	; (8003e6c <main+0x21c>)
 8003cce:	2207      	movs	r2, #7
 8003cd0:	801a      	strh	r2, [r3, #0]
	feed_amount[1]=10;
 8003cd2:	4b66      	ldr	r3, [pc, #408]	; (8003e6c <main+0x21c>)
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	805a      	strh	r2, [r3, #2]
	feed_amount[2]=10;
 8003cd8:	4b64      	ldr	r3, [pc, #400]	; (8003e6c <main+0x21c>)
 8003cda:	220a      	movs	r2, #10
 8003cdc:	809a      	strh	r2, [r3, #4]
	feed_amount[3]=7;
 8003cde:	4b63      	ldr	r3, [pc, #396]	; (8003e6c <main+0x21c>)
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	80da      	strh	r2, [r3, #6]
	prev_selection=-1;
 8003ce4:	4b62      	ldr	r3, [pc, #392]	; (8003e70 <main+0x220>)
 8003ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cea:	801a      	strh	r2, [r3, #0]



	pressed=false;
 8003cec:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <main+0x224>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
	char str[5];

	button_pressed=false;
 8003cf2:	4b61      	ldr	r3, [pc, #388]	; (8003e78 <main+0x228>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
	/*
	int hour,min;
	hour=23;
	min=14;
	 */
	GPIO_PinState SW_state=GPIO_PIN_RESET;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	737b      	strb	r3, [r7, #13]
	//HAL_GPIO_WritePin(BLED_GPIO_Port,BLED_Pin,GPIO_PIN_RESET);
	//char curr_time [50];
	HAL_TIM_Base_Start(&htim1);
 8003cfc:	485f      	ldr	r0, [pc, #380]	; (8003e7c <main+0x22c>)
 8003cfe:	f005 f8cb 	bl	8008e98 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8003d02:	485f      	ldr	r0, [pc, #380]	; (8003e80 <main+0x230>)
 8003d04:	f005 f8c8 	bl	8008e98 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8003d08:	485e      	ldr	r0, [pc, #376]	; (8003e84 <main+0x234>)
 8003d0a:	f005 f8c5 	bl	8008e98 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8003d0e:	485e      	ldr	r0, [pc, #376]	; (8003e88 <main+0x238>)
 8003d10:	f005 f8c2 	bl	8008e98 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim10);
 8003d14:	485d      	ldr	r0, [pc, #372]	; (8003e8c <main+0x23c>)
 8003d16:	f005 f8bf 	bl	8008e98 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4857      	ldr	r0, [pc, #348]	; (8003e7c <main+0x22c>)
 8003d1e:	f005 f96f 	bl	8009000 <HAL_TIM_PWM_Start>
	//TIM1->CCR1=500;
	DS3231_Init(&hi2c1);
 8003d22:	485b      	ldr	r0, [pc, #364]	; (8003e90 <main+0x240>)
 8003d24:	f001 faea 	bl	80052fc <DS3231_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//	short count=0;
	HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_RESET); //RESET is turn on
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d2e:	4859      	ldr	r0, [pc, #356]	; (8003e94 <main+0x244>)
 8003d30:	f002 fe7a 	bl	8006a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_SET); //set is turn on
 8003d34:	2201      	movs	r2, #1
 8003d36:	2108      	movs	r1, #8
 8003d38:	4857      	ldr	r0, [pc, #348]	; (8003e98 <main+0x248>)
 8003d3a:	f002 fe75 	bl	8006a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,GPIO_PIN_SET); //set is turn on
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d44:	4853      	ldr	r0, [pc, #332]	; (8003e94 <main+0x244>)
 8003d46:	f002 fe6f 	bl	8006a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS1_GPIO_Port,MS1_Pin,GPIO_PIN_SET);
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d50:	4850      	ldr	r0, [pc, #320]	; (8003e94 <main+0x244>)
 8003d52:	f002 fe69 	bl	8006a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS2_GPIO_Port,MS2_Pin,GPIO_PIN_SET);
 8003d56:	2201      	movs	r2, #1
 8003d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d5c:	484d      	ldr	r0, [pc, #308]	; (8003e94 <main+0x244>)
 8003d5e:	f002 fe63 	bl	8006a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS3_GPIO_Port,MS3_Pin,GPIO_PIN_SET);
 8003d62:	2201      	movs	r2, #1
 8003d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d68:	484a      	ldr	r0, [pc, #296]	; (8003e94 <main+0x244>)
 8003d6a:	f002 fe5d 	bl	8006a28 <HAL_GPIO_WritePin>
	menu=0;
 8003d6e:	4b4b      	ldr	r3, [pc, #300]	; (8003e9c <main+0x24c>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	801a      	strh	r2, [r3, #0]
	sub_menu=-1;
 8003d74:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <main+0x250>)
 8003d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d7a:	801a      	strh	r2, [r3, #0]
	skip=0;
 8003d7c:	4b49      	ldr	r3, [pc, #292]	; (8003ea4 <main+0x254>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	801a      	strh	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003d82:	2100      	movs	r1, #0
 8003d84:	483d      	ldr	r0, [pc, #244]	; (8003e7c <main+0x22c>)
 8003d86:	f005 f93b 	bl	8009000 <HAL_TIM_PWM_Start>

	//sub_menu=0;

	//DS3231_SetTime(&rtc);
	HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin,GPIO_PIN_SET);
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2120      	movs	r1, #32
 8003d8e:	4842      	ldr	r0, [pc, #264]	; (8003e98 <main+0x248>)
 8003d90:	f002 fe4a 	bl	8006a28 <HAL_GPIO_WritePin>
	//play_tune();
	//play_tune();
	//play_tune();
	//play_tune();
	//play_tune();
	HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_RESET);
 8003d94:	2200      	movs	r2, #0
 8003d96:	2108      	movs	r1, #8
 8003d98:	483f      	ldr	r0, [pc, #252]	; (8003e98 <main+0x248>)
 8003d9a:	f002 fe45 	bl	8006a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003da4:	483b      	ldr	r0, [pc, #236]	; (8003e94 <main+0x244>)
 8003da6:	f002 fe3f 	bl	8006a28 <HAL_GPIO_WritePin>
	W25qxx_Init();
 8003daa:	f001 ffcf 	bl	8005d4c <W25qxx_Init>
		buffer[i]=0;
	}
	read_vars();
	 */

	switch(time_out)
 8003dae:	4b3e      	ldr	r3, [pc, #248]	; (8003ea8 <main+0x258>)
 8003db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d825      	bhi.n	8003e04 <main+0x1b4>
 8003db8:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <main+0x170>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003dd5 	.word	0x08003dd5
 8003dc4:	08003ddf 	.word	0x08003ddf
 8003dc8:	08003de9 	.word	0x08003de9
 8003dcc:	08003df3 	.word	0x08003df3
 8003dd0:	08003dfd 	.word	0x08003dfd
	{
	case 0:
		timeout_time=10000; // in ms
 8003dd4:	4b35      	ldr	r3, [pc, #212]	; (8003eac <main+0x25c>)
 8003dd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dda:	601a      	str	r2, [r3, #0]
		break;
 8003ddc:	e012      	b.n	8003e04 <main+0x1b4>
	case 1:
		timeout_time=20000; // in ms
 8003dde:	4b33      	ldr	r3, [pc, #204]	; (8003eac <main+0x25c>)
 8003de0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003de4:	601a      	str	r2, [r3, #0]
		break;
 8003de6:	e00d      	b.n	8003e04 <main+0x1b4>
	case 2:
		timeout_time=30000; // in ms
 8003de8:	4b30      	ldr	r3, [pc, #192]	; (8003eac <main+0x25c>)
 8003dea:	f247 5230 	movw	r2, #30000	; 0x7530
 8003dee:	601a      	str	r2, [r3, #0]
		break;
 8003df0:	e008      	b.n	8003e04 <main+0x1b4>
	case 3:
		timeout_time=60000; // in ms
 8003df2:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <main+0x25c>)
 8003df4:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003df8:	601a      	str	r2, [r3, #0]
		break;
 8003dfa:	e003      	b.n	8003e04 <main+0x1b4>
	case 4:
		timeout_time=300000; // in ms
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <main+0x25c>)
 8003dfe:	4a2c      	ldr	r2, [pc, #176]	; (8003eb0 <main+0x260>)
 8003e00:	601a      	str	r2, [r3, #0]
		break;
 8003e02:	bf00      	nop
	}
	read_vars();
 8003e04:	f7fd fb3c 	bl	8001480 <read_vars>
	DS3231_GetTime(&rtc);
 8003e08:	482a      	ldr	r0, [pc, #168]	; (8003eb4 <main+0x264>)
 8003e0a:	f001 fa87 	bl	800531c <DS3231_GetTime>
	curr_day=rtc.DaysOfWeek;
 8003e0e:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <main+0x264>)
 8003e10:	78da      	ldrb	r2, [r3, #3]
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <main+0x268>)
 8003e14:	701a      	strb	r2, [r3, #0]
	prev_day=curr_day;
 8003e16:	4b28      	ldr	r3, [pc, #160]	; (8003eb8 <main+0x268>)
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <main+0x26c>)
 8003e1c:	701a      	strb	r2, [r3, #0]
	play_tune();
 8003e1e:	f001 fe5f 	bl	8005ae0 <play_tune>
	//HAL_GPIO_WritePin(BLED_GPIO_Port,BLED_Pin,GPIO_PIN_SET);
	//feed_cat(1000);
	TIM1->CCR1=screen_brightness;
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <main+0x270>)
 8003e24:	881a      	ldrh	r2, [r3, #0]
 8003e26:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <main+0x274>)
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34

	while (1)
	{
		menu_draw(); //takes care of all drawing actions on the screen
 8003e2a:	f7fc fbbd 	bl	80005a8 <menu_draw>
		selection_action();
 8003e2e:	f7fc fc09 	bl	8000644 <selection_action>

		//play_tone("b3",1000);
		//play_tone("c3",1000);
		//play_tone("d3",1000);
		//HAL_GPIO_WritePin(BLED_GPIO_Port,BLED_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8003e32:	2201      	movs	r2, #1
 8003e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e38:	4817      	ldr	r0, [pc, #92]	; (8003e98 <main+0x248>)
 8003e3a:	f002 fdf5 	bl	8006a28 <HAL_GPIO_WritePin>
		//speed=65000;
		//motor_intensity(2);
		//feed_cat(5000);


		if(TIM2->CNT-timeout_old>timeout_time)
 8003e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <main+0x278>)
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	4a18      	ldr	r2, [pc, #96]	; (8003eac <main+0x25c>)
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d93e      	bls.n	8003ed0 <main+0x280>
		{
			//scherm uitdoen
			screen_off=1;
 8003e52:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <main+0x27c>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
			TFT9341_FillScreen(0x0000);
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f000 ff17 	bl	8004c8c <TFT9341_FillScreen>
			TIM1->CCR1=0;
 8003e5e:	4b19      	ldr	r3, [pc, #100]	; (8003ec4 <main+0x274>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34
 8003e64:	e042      	b.n	8003eec <main+0x29c>
 8003e66:	bf00      	nop
 8003e68:	20000a44 	.word	0x20000a44
 8003e6c:	20000b20 	.word	0x20000b20
 8003e70:	20000b78 	.word	0x20000b78
 8003e74:	20000b28 	.word	0x20000b28
 8003e78:	200008cc 	.word	0x200008cc
 8003e7c:	20000b30 	.word	0x20000b30
 8003e80:	20000bd8 	.word	0x20000bd8
 8003e84:	20000a60 	.word	0x20000a60
 8003e88:	2000095c 	.word	0x2000095c
 8003e8c:	200009fc 	.word	0x200009fc
 8003e90:	200009a8 	.word	0x200009a8
 8003e94:	40020000 	.word	0x40020000
 8003e98:	40020400 	.word	0x40020400
 8003e9c:	200008bc 	.word	0x200008bc
 8003ea0:	20000702 	.word	0x20000702
 8003ea4:	200008a4 	.word	0x200008a4
 8003ea8:	20000712 	.word	0x20000712
 8003eac:	200008c4 	.word	0x200008c4
 8003eb0:	000493e0 	.word	0x000493e0
 8003eb4:	20000718 	.word	0x20000718
 8003eb8:	200008ba 	.word	0x200008ba
 8003ebc:	200006fe 	.word	0x200006fe
 8003ec0:	20000706 	.word	0x20000706
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	200008c0 	.word	0x200008c0
 8003ecc:	200008ce 	.word	0x200008ce
		}
		else if(screen_off==1)
 8003ed0:	4b94      	ldr	r3, [pc, #592]	; (8004124 <main+0x4d4>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <main+0x29c>
		{
			TIM1->CCR1=screen_brightness;
 8003ed8:	4b93      	ldr	r3, [pc, #588]	; (8004128 <main+0x4d8>)
 8003eda:	881a      	ldrh	r2, [r3, #0]
 8003edc:	4b93      	ldr	r3, [pc, #588]	; (800412c <main+0x4dc>)
 8003ede:	635a      	str	r2, [r3, #52]	; 0x34
			screen_off=0;
 8003ee0:	4b90      	ldr	r3, [pc, #576]	; (8004124 <main+0x4d4>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
			update=1;
 8003ee6:	4b92      	ldr	r3, [pc, #584]	; (8004130 <main+0x4e0>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	801a      	strh	r2, [r3, #0]
		}



		// check de voertijden elke 10sec
		if(TIM2->CNT-time_check_old>10000 && (sub_menu!=0 || menu!=1 || sub_menu!=2))
 8003eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	4a90      	ldr	r2, [pc, #576]	; (8004134 <main+0x4e4>)
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	f242 7210 	movw	r2, #10000	; 0x2710
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d919      	bls.n	8003f34 <main+0x2e4>
 8003f00:	4b8d      	ldr	r3, [pc, #564]	; (8004138 <main+0x4e8>)
 8003f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <main+0x2ce>
 8003f0a:	4b8c      	ldr	r3, [pc, #560]	; (800413c <main+0x4ec>)
 8003f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d104      	bne.n	8003f1e <main+0x2ce>
 8003f14:	4b88      	ldr	r3, [pc, #544]	; (8004138 <main+0x4e8>)
 8003f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d00a      	beq.n	8003f34 <main+0x2e4>
		{
			DS3231_GetTime(&rtc);
 8003f1e:	4888      	ldr	r0, [pc, #544]	; (8004140 <main+0x4f0>)
 8003f20:	f001 f9fc 	bl	800531c <DS3231_GetTime>
			time_check_old=TIM2->CNT;
 8003f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b81      	ldr	r3, [pc, #516]	; (8004134 <main+0x4e4>)
 8003f2e:	601a      	str	r2, [r3, #0]
			feed_cat_time();
 8003f30:	f7fd fb42 	bl	80015b8 <feed_cat_time>
			sprintf(str,"%d",buffer[i]);
			TFT9341_String(5,5+10*i,str);
		}
		 */

		curr_day=rtc.DaysOfWeek;
 8003f34:	4b82      	ldr	r3, [pc, #520]	; (8004140 <main+0x4f0>)
 8003f36:	78da      	ldrb	r2, [r3, #3]
 8003f38:	4b82      	ldr	r3, [pc, #520]	; (8004144 <main+0x4f4>)
 8003f3a:	701a      	strb	r2, [r3, #0]





		time_now=TIM10->CNT;
 8003f3c:	4b82      	ldr	r3, [pc, #520]	; (8004148 <main+0x4f8>)
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	817b      	strh	r3, [r7, #10]
		time_diff=time_now-time_old;
 8003f42:	897a      	ldrh	r2, [r7, #10]
 8003f44:	89fb      	ldrh	r3, [r7, #14]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	813b      	strh	r3, [r7, #8]

		tone_now=TIM4->CNT;
 8003f4a:	4b80      	ldr	r3, [pc, #512]	; (800414c <main+0x4fc>)
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4b7f      	ldr	r3, [pc, #508]	; (8004150 <main+0x500>)
 8003f52:	601a      	str	r2, [r3, #0]
		tone_diff=tone_now-tone_old;
 8003f54:	4b7e      	ldr	r3, [pc, #504]	; (8004150 <main+0x500>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b7e      	ldr	r3, [pc, #504]	; (8004154 <main+0x504>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	4a7e      	ldr	r2, [pc, #504]	; (8004158 <main+0x508>)
 8003f60:	6013      	str	r3, [r2, #0]
		{
			// keep track of elapsed time for pausing (use tim2)
			// also sleep etc. 
			//play_tune();
		}
		if(button_long_pressed)
 8003f62:	4b7e      	ldr	r3, [pc, #504]	; (800415c <main+0x50c>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <main+0x320>
		{
			//HAL_GPIO_TogglePin(EN_GPIO_Port,EN_Pin);
			button_long_pressed=false;
 8003f6a:	4b7c      	ldr	r3, [pc, #496]	; (800415c <main+0x50c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]


		// 	------------------------
		//	BUTTON handling routine
		//
		if(HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)==GPIO_PIN_RESET)  //ingedrukt
 8003f70:	2101      	movs	r1, #1
 8003f72:	487b      	ldr	r0, [pc, #492]	; (8004160 <main+0x510>)
 8003f74:	f002 fd40 	bl	80069f8 <HAL_GPIO_ReadPin>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d147      	bne.n	800400e <main+0x3be>
		{
			if(SW_state==GPIO_PIN_RESET)
 8003f7e:	7b7b      	ldrb	r3, [r7, #13]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d102      	bne.n	8003f8a <main+0x33a>
			{
				time_old=TIM10->CNT;
 8003f84:	4b70      	ldr	r3, [pc, #448]	; (8004148 <main+0x4f8>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	81fb      	strh	r3, [r7, #14]
			}
			time_diff=TIM10->CNT-time_old;
 8003f8a:	4b6f      	ldr	r3, [pc, #444]	; (8004148 <main+0x4f8>)
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	89fb      	ldrh	r3, [r7, #14]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	813b      	strh	r3, [r7, #8]
			if(time_diff>1000)
 8003f96:	893b      	ldrh	r3, [r7, #8]
 8003f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f9c:	d935      	bls.n	800400a <main+0x3ba>
			{
				TIM3->CNT=0;
 8003f9e:	4b71      	ldr	r3, [pc, #452]	; (8004164 <main+0x514>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2120      	movs	r1, #32
 8003fa8:	486f      	ldr	r0, [pc, #444]	; (8004168 <main+0x518>)
 8003faa:	f002 fd3d 	bl	8006a28 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_SET);
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2108      	movs	r1, #8
 8003fb2:	486d      	ldr	r0, [pc, #436]	; (8004168 <main+0x518>)
 8003fb4:	f002 fd38 	bl	8006a28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_RESET);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fbe:	4868      	ldr	r0, [pc, #416]	; (8004160 <main+0x510>)
 8003fc0:	f002 fd32 	bl	8006a28 <HAL_GPIO_WritePin>
				while(HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)==GPIO_PIN_RESET)
 8003fc4:	e00f      	b.n	8003fe6 <main+0x396>
				{
					if(TIM3->CNT>speed)
 8003fc6:	4b67      	ldr	r3, [pc, #412]	; (8004164 <main+0x514>)
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	4a68      	ldr	r2, [pc, #416]	; (800416c <main+0x51c>)
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d909      	bls.n	8003fe6 <main+0x396>
					{
						TIM3->CNT=0;
 8003fd2:	4b64      	ldr	r3, [pc, #400]	; (8004164 <main+0x514>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24
						motor_intensity(0);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f7fd fb9d 	bl	8001718 <motor_intensity>
						HAL_GPIO_TogglePin(STEP_GPIO_Port,STEP_Pin);
 8003fde:	2110      	movs	r1, #16
 8003fe0:	4861      	ldr	r0, [pc, #388]	; (8004168 <main+0x518>)
 8003fe2:	f002 fd3a 	bl	8006a5a <HAL_GPIO_TogglePin>
				while(HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)==GPIO_PIN_RESET)
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	485d      	ldr	r0, [pc, #372]	; (8004160 <main+0x510>)
 8003fea:	f002 fd05 	bl	80069f8 <HAL_GPIO_ReadPin>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0e8      	beq.n	8003fc6 <main+0x376>
					}
				}
				HAL_GPIO_WritePin(SLEEP_GPIO_Port,SLEEP_Pin,GPIO_PIN_RESET);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2108      	movs	r1, #8
 8003ff8:	485b      	ldr	r0, [pc, #364]	; (8004168 <main+0x518>)
 8003ffa:	f002 fd15 	bl	8006a28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_GPIO_Port,EN_Pin,GPIO_PIN_SET);
 8003ffe:	2201      	movs	r2, #1
 8004000:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004004:	4856      	ldr	r0, [pc, #344]	; (8004160 <main+0x510>)
 8004006:	f002 fd0f 	bl	8006a28 <HAL_GPIO_WritePin>
			//HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
			if(SW_state==GPIO_PIN_RESET)
			{

			}
			SW_state=GPIO_PIN_SET;
 800400a:	2301      	movs	r3, #1
 800400c:	737b      	strb	r3, [r7, #13]

		}
		if(HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)==GPIO_PIN_SET)  //weer losgelaten
 800400e:	2101      	movs	r1, #1
 8004010:	4853      	ldr	r0, [pc, #332]	; (8004160 <main+0x510>)
 8004012:	f002 fcf1 	bl	80069f8 <HAL_GPIO_ReadPin>
 8004016:	4603      	mov	r3, r0
 8004018:	2b01      	cmp	r3, #1
 800401a:	d13c      	bne.n	8004096 <main+0x446>
		{
			time_diff=TIM10->CNT-time_old;
 800401c:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <main+0x4f8>)
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	b29a      	uxth	r2, r3
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	813b      	strh	r3, [r7, #8]
			if(SW_state==GPIO_PIN_SET)
 8004028:	7b7b      	ldrb	r3, [r7, #13]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d131      	bne.n	8004092 <main+0x442>
			{

				//time_old=TIM10->CNT;

				if(time_diff>80 && time_diff<1000 && button_pressed==false)
 800402e:	893b      	ldrh	r3, [r7, #8]
 8004030:	2b50      	cmp	r3, #80	; 0x50
 8004032:	d927      	bls.n	8004084 <main+0x434>
 8004034:	893b      	ldrh	r3, [r7, #8]
 8004036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800403a:	d223      	bcs.n	8004084 <main+0x434>
 800403c:	4b4c      	ldr	r3, [pc, #304]	; (8004170 <main+0x520>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	f083 0301 	eor.w	r3, r3, #1
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01c      	beq.n	8004084 <main+0x434>
				{
					HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 800404a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800404e:	4849      	ldr	r0, [pc, #292]	; (8004174 <main+0x524>)
 8004050:	f002 fd03 	bl	8006a5a <HAL_GPIO_TogglePin>
					button_pressed=true;
 8004054:	4b46      	ldr	r3, [pc, #280]	; (8004170 <main+0x520>)
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]

					if(sound_intensity!=0)
 800405a:	4b47      	ldr	r3, [pc, #284]	; (8004178 <main+0x528>)
 800405c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <main+0x428>
					{
						motor_intensity(sound_intensity);
 8004064:	4b44      	ldr	r3, [pc, #272]	; (8004178 <main+0x528>)
 8004066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fb54 	bl	8001718 <motor_intensity>
						play_tone("b4",35);
 8004070:	2123      	movs	r1, #35	; 0x23
 8004072:	4842      	ldr	r0, [pc, #264]	; (800417c <main+0x52c>)
 8004074:	f001 fc8c 	bl	8005990 <play_tone>
					}

					timeout_old=TIM2->CNT;
 8004078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	461a      	mov	r2, r3
 8004080:	4b3f      	ldr	r3, [pc, #252]	; (8004180 <main+0x530>)
 8004082:	601a      	str	r2, [r3, #0]
				}
				if((time_diff)>1000)
 8004084:	893b      	ldrh	r3, [r7, #8]
 8004086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800408a:	d902      	bls.n	8004092 <main+0x442>
				{
					button_long_pressed=true;
 800408c:	4b33      	ldr	r3, [pc, #204]	; (800415c <main+0x50c>)
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
				}
			}
			//time_old=TIM10->CNT;
			//HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
			//HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
			SW_state=GPIO_PIN_RESET; //één keer achter elkaar
 8004092:	2300      	movs	r3, #0
 8004094:	737b      	strb	r3, [r7, #13]
			feed_number=1;
		}
		 */


		if(time_switch==0 && menu==0 && screen_off==0)
 8004096:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <main+0x534>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	f083 0301 	eor.w	r3, r3, #1
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d075      	beq.n	8004190 <main+0x540>
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <main+0x4ec>)
 80040a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d170      	bne.n	8004190 <main+0x540>
 80040ae:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <main+0x4d4>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	f083 0301 	eor.w	r3, r3, #1
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d069      	beq.n	8004190 <main+0x540>
		{
			if(TIM2->CNT-time_switch_old>1000 && menu==0)
 80040bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	4a31      	ldr	r2, [pc, #196]	; (8004188 <main+0x538>)
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040cc:	f240 8096 	bls.w	80041fc <main+0x5ac>
 80040d0:	4b1a      	ldr	r3, [pc, #104]	; (800413c <main+0x4ec>)
 80040d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 8090 	bne.w	80041fc <main+0x5ac>
			{
				DS3231_GetTime(&rtc);
 80040dc:	4818      	ldr	r0, [pc, #96]	; (8004140 <main+0x4f0>)
 80040de:	f001 f91d 	bl	800531c <DS3231_GetTime>
				time_switch_old=TIM2->CNT;
 80040e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b27      	ldr	r3, [pc, #156]	; (8004188 <main+0x538>)
 80040ec:	601a      	str	r2, [r3, #0]
				time_switch=1;
 80040ee:	4b25      	ldr	r3, [pc, #148]	; (8004184 <main+0x534>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
				TFT9341_SetTextColor(0xFE0A);
 80040f4:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 80040f8:	f000 fe20 	bl	8004d3c <TFT9341_SetTextColor>
				TFT9341_SetFont(&Font20);
 80040fc:	4823      	ldr	r0, [pc, #140]	; (800418c <main+0x53c>)
 80040fe:	f000 fe3d 	bl	8004d7c <TFT9341_SetFont>
				TFT9341_String(235, 15,time_text(rtc.Hour, rtc.Min, 1));
 8004102:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <main+0x4f0>)
 8004104:	791b      	ldrb	r3, [r3, #4]
 8004106:	b21b      	sxth	r3, r3
 8004108:	4a0d      	ldr	r2, [pc, #52]	; (8004140 <main+0x4f0>)
 800410a:	7952      	ldrb	r2, [r2, #5]
 800410c:	b211      	sxth	r1, r2
 800410e:	2201      	movs	r2, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc ff0d 	bl	8000f30 <time_text>
 8004116:	4603      	mov	r3, r0
 8004118:	461a      	mov	r2, r3
 800411a:	210f      	movs	r1, #15
 800411c:	20eb      	movs	r0, #235	; 0xeb
 800411e:	f000 feeb 	bl	8004ef8 <TFT9341_String>
			if(TIM2->CNT-time_switch_old>1000 && menu==0)
 8004122:	e06b      	b.n	80041fc <main+0x5ac>
 8004124:	200008ce 	.word	0x200008ce
 8004128:	20000706 	.word	0x20000706
 800412c:	40010000 	.word	0x40010000
 8004130:	200008b4 	.word	0x200008b4
 8004134:	200008c8 	.word	0x200008c8
 8004138:	20000702 	.word	0x20000702
 800413c:	200008bc 	.word	0x200008bc
 8004140:	20000718 	.word	0x20000718
 8004144:	200008ba 	.word	0x200008ba
 8004148:	40014400 	.word	0x40014400
 800414c:	40000800 	.word	0x40000800
 8004150:	20000a58 	.word	0x20000a58
 8004154:	20000b7c 	.word	0x20000b7c
 8004158:	20000a5c 	.word	0x20000a5c
 800415c:	200008cd 	.word	0x200008cd
 8004160:	40020000 	.word	0x40020000
 8004164:	40000400 	.word	0x40000400
 8004168:	40020400 	.word	0x40020400
 800416c:	20000708 	.word	0x20000708
 8004170:	200008cc 	.word	0x200008cc
 8004174:	40020800 	.word	0x40020800
 8004178:	20000710 	.word	0x20000710
 800417c:	0800a8e0 	.word	0x0800a8e0
 8004180:	200008c0 	.word	0x200008c0
 8004184:	200008be 	.word	0x200008be
 8004188:	20000b2c 	.word	0x20000b2c
 800418c:	20000014 	.word	0x20000014
			}
		}
		else
		{
			if(TIM2->CNT-time_switch_old>1000 && menu==0 && screen_off==0)
 8004190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <main+0x5b8>)
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041a0:	d92d      	bls.n	80041fe <main+0x5ae>
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <main+0x5bc>)
 80041a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d128      	bne.n	80041fe <main+0x5ae>
 80041ac:	4b18      	ldr	r3, [pc, #96]	; (8004210 <main+0x5c0>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	f083 0301 	eor.w	r3, r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d021      	beq.n	80041fe <main+0x5ae>
			{
				time_switch=0;
 80041ba:	4b16      	ldr	r3, [pc, #88]	; (8004214 <main+0x5c4>)
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
				TFT9341_SetTextColor(0xFE0A);
 80041c0:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 80041c4:	f000 fdba 	bl	8004d3c <TFT9341_SetTextColor>
				TFT9341_SetFont(&Font20);
 80041c8:	4813      	ldr	r0, [pc, #76]	; (8004218 <main+0x5c8>)
 80041ca:	f000 fdd7 	bl	8004d7c <TFT9341_SetFont>
				TFT9341_String(235, 15,time_text(rtc.Hour, rtc.Min, 0));
 80041ce:	4b13      	ldr	r3, [pc, #76]	; (800421c <main+0x5cc>)
 80041d0:	791b      	ldrb	r3, [r3, #4]
 80041d2:	b21b      	sxth	r3, r3
 80041d4:	4a11      	ldr	r2, [pc, #68]	; (800421c <main+0x5cc>)
 80041d6:	7952      	ldrb	r2, [r2, #5]
 80041d8:	b211      	sxth	r1, r2
 80041da:	2200      	movs	r2, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc fea7 	bl	8000f30 <time_text>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	210f      	movs	r1, #15
 80041e8:	20eb      	movs	r0, #235	; 0xeb
 80041ea:	f000 fe85 	bl	8004ef8 <TFT9341_String>
				time_switch_old=TIM2->CNT;
 80041ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	461a      	mov	r2, r3
 80041f6:	4b04      	ldr	r3, [pc, #16]	; (8004208 <main+0x5b8>)
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e000      	b.n	80041fe <main+0x5ae>
			if(TIM2->CNT-time_switch_old>1000 && menu==0)
 80041fc:	bf00      	nop
		TFT9341_String(250,180,str);
		 */



		pressed=false;
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <main+0x5d0>)
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
		menu_draw(); //takes care of all drawing actions on the screen
 8004204:	e611      	b.n	8003e2a <main+0x1da>
 8004206:	bf00      	nop
 8004208:	20000b2c 	.word	0x20000b2c
 800420c:	200008bc 	.word	0x200008bc
 8004210:	200008ce 	.word	0x200008ce
 8004214:	200008be 	.word	0x200008be
 8004218:	20000014 	.word	0x20000014
 800421c:	20000718 	.word	0x20000718
 8004220:	20000b28 	.word	0x20000b28

08004224 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b094      	sub	sp, #80	; 0x50
 8004228:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800422a:	f107 0320 	add.w	r3, r7, #32
 800422e:	2230      	movs	r2, #48	; 0x30
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f005 fccc 	bl	8009bd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004238:	f107 030c 	add.w	r3, r7, #12
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004248:	2300      	movs	r3, #0
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	4b27      	ldr	r3, [pc, #156]	; (80042ec <SystemClock_Config+0xc8>)
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	4a26      	ldr	r2, [pc, #152]	; (80042ec <SystemClock_Config+0xc8>)
 8004252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004256:	6413      	str	r3, [r2, #64]	; 0x40
 8004258:	4b24      	ldr	r3, [pc, #144]	; (80042ec <SystemClock_Config+0xc8>)
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004264:	2300      	movs	r3, #0
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <SystemClock_Config+0xcc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <SystemClock_Config+0xcc>)
 800426e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <SystemClock_Config+0xcc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004280:	2302      	movs	r3, #2
 8004282:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004284:	2301      	movs	r3, #1
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004288:	2310      	movs	r3, #16
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800428c:	2302      	movs	r3, #2
 800428e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004290:	2300      	movs	r3, #0
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004294:	2308      	movs	r3, #8
 8004296:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8004298:	2364      	movs	r3, #100	; 0x64
 800429a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800429c:	2302      	movs	r3, #2
 800429e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80042a0:	2304      	movs	r3, #4
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042a4:	f107 0320 	add.w	r3, r7, #32
 80042a8:	4618      	mov	r0, r3
 80042aa:	f003 fb9f 	bl	80079ec <HAL_RCC_OscConfig>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80042b4:	f000 fbb6 	bl	8004a24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042b8:	230f      	movs	r3, #15
 80042ba:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042bc:	2302      	movs	r3, #2
 80042be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80042c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80042c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80042ce:	f107 030c 	add.w	r3, r7, #12
 80042d2:	2103      	movs	r1, #3
 80042d4:	4618      	mov	r0, r3
 80042d6:	f003 fe01 	bl	8007edc <HAL_RCC_ClockConfig>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80042e0:	f000 fba0 	bl	8004a24 <Error_Handler>
	}
}
 80042e4:	bf00      	nop
 80042e6:	3750      	adds	r7, #80	; 0x50
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40007000 	.word	0x40007000

080042f4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80042f8:	4b12      	ldr	r3, [pc, #72]	; (8004344 <MX_I2C1_Init+0x50>)
 80042fa:	4a13      	ldr	r2, [pc, #76]	; (8004348 <MX_I2C1_Init+0x54>)
 80042fc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <MX_I2C1_Init+0x50>)
 8004300:	4a12      	ldr	r2, [pc, #72]	; (800434c <MX_I2C1_Init+0x58>)
 8004302:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <MX_I2C1_Init+0x50>)
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800430a:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <MX_I2C1_Init+0x50>)
 800430c:	2200      	movs	r2, #0
 800430e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <MX_I2C1_Init+0x50>)
 8004312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004316:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <MX_I2C1_Init+0x50>)
 800431a:	2200      	movs	r2, #0
 800431c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <MX_I2C1_Init+0x50>)
 8004320:	2200      	movs	r2, #0
 8004322:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <MX_I2C1_Init+0x50>)
 8004326:	2200      	movs	r2, #0
 8004328:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <MX_I2C1_Init+0x50>)
 800432c:	2200      	movs	r2, #0
 800432e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004330:	4804      	ldr	r0, [pc, #16]	; (8004344 <MX_I2C1_Init+0x50>)
 8004332:	f002 fbc5 	bl	8006ac0 <HAL_I2C_Init>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800433c:	f000 fb72 	bl	8004a24 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8004340:	bf00      	nop
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200009a8 	.word	0x200009a8
 8004348:	40005400 	.word	0x40005400
 800434c:	000186a0 	.word	0x000186a0

08004350 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004354:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <MX_SPI1_Init+0x64>)
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <MX_SPI1_Init+0x68>)
 8004358:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800435a:	4b16      	ldr	r3, [pc, #88]	; (80043b4 <MX_SPI1_Init+0x64>)
 800435c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004360:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <MX_SPI1_Init+0x64>)
 8004364:	2200      	movs	r2, #0
 8004366:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004368:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <MX_SPI1_Init+0x64>)
 800436a:	2200      	movs	r2, #0
 800436c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <MX_SPI1_Init+0x64>)
 8004370:	2200      	movs	r2, #0
 8004372:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <MX_SPI1_Init+0x64>)
 8004376:	2200      	movs	r2, #0
 8004378:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <MX_SPI1_Init+0x64>)
 800437c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004380:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <MX_SPI1_Init+0x64>)
 8004384:	2200      	movs	r2, #0
 8004386:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <MX_SPI1_Init+0x64>)
 800438a:	2200      	movs	r2, #0
 800438c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <MX_SPI1_Init+0x64>)
 8004390:	2200      	movs	r2, #0
 8004392:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004394:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <MX_SPI1_Init+0x64>)
 8004396:	2200      	movs	r2, #0
 8004398:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <MX_SPI1_Init+0x64>)
 800439c:	220a      	movs	r2, #10
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043a0:	4804      	ldr	r0, [pc, #16]	; (80043b4 <MX_SPI1_Init+0x64>)
 80043a2:	f003 ff81 	bl	80082a8 <HAL_SPI_Init>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80043ac:	f000 fb3a 	bl	8004a24 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80043b0:	bf00      	nop
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000b80 	.word	0x20000b80
 80043b8:	40013000 	.word	0x40013000

080043bc <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80043c0:	4b17      	ldr	r3, [pc, #92]	; (8004420 <MX_SPI2_Init+0x64>)
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <MX_SPI2_Init+0x68>)
 80043c4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80043c6:	4b16      	ldr	r3, [pc, #88]	; (8004420 <MX_SPI2_Init+0x64>)
 80043c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043cc:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <MX_SPI2_Init+0x64>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <MX_SPI2_Init+0x64>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043da:	4b11      	ldr	r3, [pc, #68]	; (8004420 <MX_SPI2_Init+0x64>)
 80043dc:	2200      	movs	r2, #0
 80043de:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <MX_SPI2_Init+0x64>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80043e6:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <MX_SPI2_Init+0x64>)
 80043e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ec:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <MX_SPI2_Init+0x64>)
 80043f0:	2210      	movs	r2, #16
 80043f2:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <MX_SPI2_Init+0x64>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <MX_SPI2_Init+0x64>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <MX_SPI2_Init+0x64>)
 8004402:	2200      	movs	r2, #0
 8004404:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <MX_SPI2_Init+0x64>)
 8004408:	220a      	movs	r2, #10
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800440c:	4804      	ldr	r0, [pc, #16]	; (8004420 <MX_SPI2_Init+0x64>)
 800440e:	f003 ff4b 	bl	80082a8 <HAL_SPI_Init>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8004418:	f000 fb04 	bl	8004a24 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800441c:	bf00      	nop
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000904 	.word	0x20000904
 8004424:	40003800 	.word	0x40003800

08004428 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b096      	sub	sp, #88	; 0x58
 800442c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800442e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	605a      	str	r2, [r3, #4]
 8004438:	609a      	str	r2, [r3, #8]
 800443a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800443c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	605a      	str	r2, [r3, #4]
 8004450:	609a      	str	r2, [r3, #8]
 8004452:	60da      	str	r2, [r3, #12]
 8004454:	611a      	str	r2, [r3, #16]
 8004456:	615a      	str	r2, [r3, #20]
 8004458:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800445a:	1d3b      	adds	r3, r7, #4
 800445c:	2220      	movs	r2, #32
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f005 fbb5 	bl	8009bd0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <MX_TIM1_Init+0x13c>)
 8004468:	4a3f      	ldr	r2, [pc, #252]	; (8004568 <MX_TIM1_Init+0x140>)
 800446a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4;
 800446c:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <MX_TIM1_Init+0x13c>)
 800446e:	2204      	movs	r2, #4
 8004470:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004472:	4b3c      	ldr	r3, [pc, #240]	; (8004564 <MX_TIM1_Init+0x13c>)
 8004474:	2200      	movs	r2, #0
 8004476:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8004478:	4b3a      	ldr	r3, [pc, #232]	; (8004564 <MX_TIM1_Init+0x13c>)
 800447a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800447e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004480:	4b38      	ldr	r3, [pc, #224]	; (8004564 <MX_TIM1_Init+0x13c>)
 8004482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004486:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004488:	4b36      	ldr	r3, [pc, #216]	; (8004564 <MX_TIM1_Init+0x13c>)
 800448a:	2200      	movs	r2, #0
 800448c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800448e:	4b35      	ldr	r3, [pc, #212]	; (8004564 <MX_TIM1_Init+0x13c>)
 8004490:	2200      	movs	r2, #0
 8004492:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004494:	4833      	ldr	r0, [pc, #204]	; (8004564 <MX_TIM1_Init+0x13c>)
 8004496:	f004 fcaf 	bl	8008df8 <HAL_TIM_Base_Init>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 80044a0:	f000 fac0 	bl	8004a24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044a8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044ae:	4619      	mov	r1, r3
 80044b0:	482c      	ldr	r0, [pc, #176]	; (8004564 <MX_TIM1_Init+0x13c>)
 80044b2:	f004 ff13 	bl	80092dc <HAL_TIM_ConfigClockSource>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 80044bc:	f000 fab2 	bl	8004a24 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044c0:	4828      	ldr	r0, [pc, #160]	; (8004564 <MX_TIM1_Init+0x13c>)
 80044c2:	f004 fd43 	bl	8008f4c <HAL_TIM_PWM_Init>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 80044cc:	f000 faaa 	bl	8004a24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044d0:	2300      	movs	r3, #0
 80044d2:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044dc:	4619      	mov	r1, r3
 80044de:	4821      	ldr	r0, [pc, #132]	; (8004564 <MX_TIM1_Init+0x13c>)
 80044e0:	f005 fa8c 	bl	80099fc <HAL_TIMEx_MasterConfigSynchronization>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 80044ea:	f000 fa9b 	bl	8004a24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ee:	2360      	movs	r3, #96	; 0x60
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044f6:	2300      	movs	r3, #0
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044fa:	2300      	movs	r3, #0
 80044fc:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800450a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800450e:	2200      	movs	r2, #0
 8004510:	4619      	mov	r1, r3
 8004512:	4814      	ldr	r0, [pc, #80]	; (8004564 <MX_TIM1_Init+0x13c>)
 8004514:	f004 fe24 	bl	8009160 <HAL_TIM_PWM_ConfigChannel>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <MX_TIM1_Init+0xfa>
	{
		Error_Handler();
 800451e:	f000 fa81 	bl	8004a24 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004522:	2300      	movs	r3, #0
 8004524:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800453a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4807      	ldr	r0, [pc, #28]	; (8004564 <MX_TIM1_Init+0x13c>)
 8004546:	f005 fac7 	bl	8009ad8 <HAL_TIMEx_ConfigBreakDeadTime>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <MX_TIM1_Init+0x12c>
	{
		Error_Handler();
 8004550:	f000 fa68 	bl	8004a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8004554:	4803      	ldr	r0, [pc, #12]	; (8004564 <MX_TIM1_Init+0x13c>)
 8004556:	f001 f963 	bl	8005820 <HAL_TIM_MspPostInit>

}
 800455a:	bf00      	nop
 800455c:	3758      	adds	r7, #88	; 0x58
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000b30 	.word	0x20000b30
 8004568:	40010000 	.word	0x40010000

0800456c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004572:	f107 0308 	add.w	r3, r7, #8
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	605a      	str	r2, [r3, #4]
 800457c:	609a      	str	r2, [r3, #8]
 800457e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004580:	463b      	mov	r3, r7
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <MX_TIM2_Init+0x98>)
 800458a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800458e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 50000;
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <MX_TIM2_Init+0x98>)
 8004592:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004596:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004598:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <MX_TIM2_Init+0x98>)
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800459e:	4b19      	ldr	r3, [pc, #100]	; (8004604 <MX_TIM2_Init+0x98>)
 80045a0:	f04f 32ff 	mov.w	r2, #4294967295
 80045a4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a6:	4b17      	ldr	r3, [pc, #92]	; (8004604 <MX_TIM2_Init+0x98>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ac:	4b15      	ldr	r3, [pc, #84]	; (8004604 <MX_TIM2_Init+0x98>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045b2:	4814      	ldr	r0, [pc, #80]	; (8004604 <MX_TIM2_Init+0x98>)
 80045b4:	f004 fc20 	bl	8008df8 <HAL_TIM_Base_Init>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80045be:	f000 fa31 	bl	8004a24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045c8:	f107 0308 	add.w	r3, r7, #8
 80045cc:	4619      	mov	r1, r3
 80045ce:	480d      	ldr	r0, [pc, #52]	; (8004604 <MX_TIM2_Init+0x98>)
 80045d0:	f004 fe84 	bl	80092dc <HAL_TIM_ConfigClockSource>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 80045da:	f000 fa23 	bl	8004a24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045de:	2300      	movs	r3, #0
 80045e0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045e6:	463b      	mov	r3, r7
 80045e8:	4619      	mov	r1, r3
 80045ea:	4806      	ldr	r0, [pc, #24]	; (8004604 <MX_TIM2_Init+0x98>)
 80045ec:	f005 fa06 	bl	80099fc <HAL_TIMEx_MasterConfigSynchronization>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80045f6:	f000 fa15 	bl	8004a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80045fa:	bf00      	nop
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000bd8 	.word	0x20000bd8

08004608 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800460e:	f107 0308 	add.w	r3, r7, #8
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	605a      	str	r2, [r3, #4]
 8004618:	609a      	str	r2, [r3, #8]
 800461a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800461c:	463b      	mov	r3, r7
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <MX_TIM3_Init+0x94>)
 8004626:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <MX_TIM3_Init+0x98>)
 8004628:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 3;
 800462a:	4b1c      	ldr	r3, [pc, #112]	; (800469c <MX_TIM3_Init+0x94>)
 800462c:	2203      	movs	r2, #3
 800462e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004630:	4b1a      	ldr	r3, [pc, #104]	; (800469c <MX_TIM3_Init+0x94>)
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8004636:	4b19      	ldr	r3, [pc, #100]	; (800469c <MX_TIM3_Init+0x94>)
 8004638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800463c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800463e:	4b17      	ldr	r3, [pc, #92]	; (800469c <MX_TIM3_Init+0x94>)
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004644:	4b15      	ldr	r3, [pc, #84]	; (800469c <MX_TIM3_Init+0x94>)
 8004646:	2200      	movs	r2, #0
 8004648:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800464a:	4814      	ldr	r0, [pc, #80]	; (800469c <MX_TIM3_Init+0x94>)
 800464c:	f004 fbd4 	bl	8008df8 <HAL_TIM_Base_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 8004656:	f000 f9e5 	bl	8004a24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800465a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800465e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	4619      	mov	r1, r3
 8004666:	480d      	ldr	r0, [pc, #52]	; (800469c <MX_TIM3_Init+0x94>)
 8004668:	f004 fe38 	bl	80092dc <HAL_TIM_ConfigClockSource>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 8004672:	f000 f9d7 	bl	8004a24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800467a:	2300      	movs	r3, #0
 800467c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800467e:	463b      	mov	r3, r7
 8004680:	4619      	mov	r1, r3
 8004682:	4806      	ldr	r0, [pc, #24]	; (800469c <MX_TIM3_Init+0x94>)
 8004684:	f005 f9ba 	bl	80099fc <HAL_TIMEx_MasterConfigSynchronization>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 800468e:	f000 f9c9 	bl	8004a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8004692:	bf00      	nop
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000a60 	.word	0x20000a60
 80046a0:	40000400 	.word	0x40000400

080046a4 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	609a      	str	r2, [r3, #8]
 80046b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046b8:	463b      	mov	r3, r7
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <MX_TIM4_Init+0x94>)
 80046c2:	4a1e      	ldr	r2, [pc, #120]	; (800473c <MX_TIM4_Init+0x98>)
 80046c4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 12500;
 80046c6:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <MX_TIM4_Init+0x94>)
 80046c8:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80046cc:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ce:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <MX_TIM4_Init+0x94>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <MX_TIM4_Init+0x94>)
 80046d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046da:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046dc:	4b16      	ldr	r3, [pc, #88]	; (8004738 <MX_TIM4_Init+0x94>)
 80046de:	2200      	movs	r2, #0
 80046e0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <MX_TIM4_Init+0x94>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80046e8:	4813      	ldr	r0, [pc, #76]	; (8004738 <MX_TIM4_Init+0x94>)
 80046ea:	f004 fb85 	bl	8008df8 <HAL_TIM_Base_Init>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 80046f4:	f000 f996 	bl	8004a24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046fc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80046fe:	f107 0308 	add.w	r3, r7, #8
 8004702:	4619      	mov	r1, r3
 8004704:	480c      	ldr	r0, [pc, #48]	; (8004738 <MX_TIM4_Init+0x94>)
 8004706:	f004 fde9 	bl	80092dc <HAL_TIM_ConfigClockSource>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8004710:	f000 f988 	bl	8004a24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004714:	2300      	movs	r3, #0
 8004716:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004718:	2300      	movs	r3, #0
 800471a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800471c:	463b      	mov	r3, r7
 800471e:	4619      	mov	r1, r3
 8004720:	4805      	ldr	r0, [pc, #20]	; (8004738 <MX_TIM4_Init+0x94>)
 8004722:	f005 f96b 	bl	80099fc <HAL_TIMEx_MasterConfigSynchronization>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 800472c:	f000 f97a 	bl	8004a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8004730:	bf00      	nop
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	2000095c 	.word	0x2000095c
 800473c:	40000800 	.word	0x40000800

08004740 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8004744:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <MX_TIM10_Init+0x40>)
 8004746:	4a0f      	ldr	r2, [pc, #60]	; (8004784 <MX_TIM10_Init+0x44>)
 8004748:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 65535;
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <MX_TIM10_Init+0x40>)
 800474c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004750:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <MX_TIM10_Init+0x40>)
 8004754:	2200      	movs	r2, #0
 8004756:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <MX_TIM10_Init+0x40>)
 800475a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800475e:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <MX_TIM10_Init+0x40>)
 8004762:	2200      	movs	r2, #0
 8004764:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <MX_TIM10_Init+0x40>)
 8004768:	2200      	movs	r2, #0
 800476a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800476c:	4804      	ldr	r0, [pc, #16]	; (8004780 <MX_TIM10_Init+0x40>)
 800476e:	f004 fb43 	bl	8008df8 <HAL_TIM_Base_Init>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <MX_TIM10_Init+0x3c>
	{
		Error_Handler();
 8004778:	f000 f954 	bl	8004a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 800477c:	bf00      	nop
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200009fc 	.word	0x200009fc
 8004784:	40014400 	.word	0x40014400

08004788 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <MX_TIM11_Init+0x40>)
 800478e:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <MX_TIM11_Init+0x44>)
 8004790:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 8004792:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <MX_TIM11_Init+0x40>)
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <MX_TIM11_Init+0x40>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <MX_TIM11_Init+0x40>)
 80047a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047a4:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80047a6:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <MX_TIM11_Init+0x40>)
 80047a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ac:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <MX_TIM11_Init+0x40>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80047b4:	4804      	ldr	r0, [pc, #16]	; (80047c8 <MX_TIM11_Init+0x40>)
 80047b6:	f004 fb1f 	bl	8008df8 <HAL_TIM_Base_Init>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <MX_TIM11_Init+0x3c>
	{
		Error_Handler();
 80047c0:	f000 f930 	bl	8004a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 80047c4:	bf00      	nop
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000ac0 	.word	0x20000ac0
 80047cc:	40014800 	.word	0x40014800

080047d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	; 0x28
 80047d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d6:	f107 0314 	add.w	r3, r7, #20
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	605a      	str	r2, [r3, #4]
 80047e0:	609a      	str	r2, [r3, #8]
 80047e2:	60da      	str	r2, [r3, #12]
 80047e4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	4b4d      	ldr	r3, [pc, #308]	; (8004920 <MX_GPIO_Init+0x150>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	4a4c      	ldr	r2, [pc, #304]	; (8004920 <MX_GPIO_Init+0x150>)
 80047f0:	f043 0304 	orr.w	r3, r3, #4
 80047f4:	6313      	str	r3, [r2, #48]	; 0x30
 80047f6:	4b4a      	ldr	r3, [pc, #296]	; (8004920 <MX_GPIO_Init+0x150>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	4b46      	ldr	r3, [pc, #280]	; (8004920 <MX_GPIO_Init+0x150>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	4a45      	ldr	r2, [pc, #276]	; (8004920 <MX_GPIO_Init+0x150>)
 800480c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004810:	6313      	str	r3, [r2, #48]	; 0x30
 8004812:	4b43      	ldr	r3, [pc, #268]	; (8004920 <MX_GPIO_Init+0x150>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	4b3f      	ldr	r3, [pc, #252]	; (8004920 <MX_GPIO_Init+0x150>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	4a3e      	ldr	r2, [pc, #248]	; (8004920 <MX_GPIO_Init+0x150>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	6313      	str	r3, [r2, #48]	; 0x30
 800482e:	4b3c      	ldr	r3, [pc, #240]	; (8004920 <MX_GPIO_Init+0x150>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	4b38      	ldr	r3, [pc, #224]	; (8004920 <MX_GPIO_Init+0x150>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	4a37      	ldr	r2, [pc, #220]	; (8004920 <MX_GPIO_Init+0x150>)
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	6313      	str	r3, [r2, #48]	; 0x30
 800484a:	4b35      	ldr	r3, [pc, #212]	; (8004920 <MX_GPIO_Init+0x150>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	607b      	str	r3, [r7, #4]
 8004854:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004856:	2200      	movs	r2, #0
 8004858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800485c:	4831      	ldr	r0, [pc, #196]	; (8004924 <MX_GPIO_Init+0x154>)
 800485e:	f002 f8e3 	bl	8006a28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI1_RESET_Pin|SPI1_RS_Pin|SPI1_CS_Pin|EN_Pin
 8004862:	2200      	movs	r2, #0
 8004864:	f649 611c 	movw	r1, #40476	; 0x9e1c
 8004868:	482f      	ldr	r0, [pc, #188]	; (8004928 <MX_GPIO_Init+0x158>)
 800486a:	f002 f8dd 	bl	8006a28 <HAL_GPIO_WritePin>
			|MS1_Pin|MS2_Pin|MS3_Pin|RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DC_Pin|RESET_Pin|CS_Pin|LED2_Pin
 800486e:	2200      	movs	r2, #0
 8004870:	f242 313f 	movw	r1, #9023	; 0x233f
 8004874:	482d      	ldr	r0, [pc, #180]	; (800492c <MX_GPIO_Init+0x15c>)
 8004876:	f002 f8d7 	bl	8006a28 <HAL_GPIO_WritePin>
			|SLEEP_Pin|STEP_Pin|DIR_Pin|I2C_RST_Pin
			|SPI2_CS_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800487a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800487e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004880:	2301      	movs	r3, #1
 8004882:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004888:	2300      	movs	r3, #0
 800488a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800488c:	f107 0314 	add.w	r3, r7, #20
 8004890:	4619      	mov	r1, r3
 8004892:	4824      	ldr	r0, [pc, #144]	; (8004924 <MX_GPIO_Init+0x154>)
 8004894:	f001 ff2c 	bl	80066f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : B_Pin A_Pin */
	GPIO_InitStruct.Pin = B_Pin|A_Pin;
 8004898:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800489c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800489e:	4b24      	ldr	r3, [pc, #144]	; (8004930 <MX_GPIO_Init+0x160>)
 80048a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048a2:	2301      	movs	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048a6:	f107 0314 	add.w	r3, r7, #20
 80048aa:	4619      	mov	r1, r3
 80048ac:	481d      	ldr	r0, [pc, #116]	; (8004924 <MX_GPIO_Init+0x154>)
 80048ae:	f001 ff1f 	bl	80066f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SW_Pin */
	GPIO_InitStruct.Pin = SW_Pin;
 80048b2:	2301      	movs	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ba:	2301      	movs	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80048be:	f107 0314 	add.w	r3, r7, #20
 80048c2:	4619      	mov	r1, r3
 80048c4:	4818      	ldr	r0, [pc, #96]	; (8004928 <MX_GPIO_Init+0x158>)
 80048c6:	f001 ff13 	bl	80066f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_RESET_Pin SPI1_RS_Pin SPI1_CS_Pin EN_Pin
                           MS1_Pin MS2_Pin MS3_Pin RST_Pin */
	GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI1_RS_Pin|SPI1_CS_Pin|EN_Pin
 80048ca:	f649 631c 	movw	r3, #40476	; 0x9e1c
 80048ce:	617b      	str	r3, [r7, #20]
			|MS1_Pin|MS2_Pin|MS3_Pin|RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048d0:	2301      	movs	r3, #1
 80048d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d8:	2300      	movs	r3, #0
 80048da:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048dc:	f107 0314 	add.w	r3, r7, #20
 80048e0:	4619      	mov	r1, r3
 80048e2:	4811      	ldr	r0, [pc, #68]	; (8004928 <MX_GPIO_Init+0x158>)
 80048e4:	f001 ff04 	bl	80066f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DC_Pin RESET_Pin CS_Pin LED2_Pin
                           SLEEP_Pin STEP_Pin DIR_Pin I2C_RST_Pin
                           SPI2_CS_Pin */
	GPIO_InitStruct.Pin = DC_Pin|RESET_Pin|CS_Pin|LED2_Pin
 80048e8:	f242 333f 	movw	r3, #9023	; 0x233f
 80048ec:	617b      	str	r3, [r7, #20]
			|SLEEP_Pin|STEP_Pin|DIR_Pin|I2C_RST_Pin
			|SPI2_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ee:	2301      	movs	r3, #1
 80048f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f6:	2300      	movs	r3, #0
 80048f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048fa:	f107 0314 	add.w	r3, r7, #20
 80048fe:	4619      	mov	r1, r3
 8004900:	480a      	ldr	r0, [pc, #40]	; (800492c <MX_GPIO_Init+0x15c>)
 8004902:	f001 fef5 	bl	80066f0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004906:	2200      	movs	r2, #0
 8004908:	2100      	movs	r1, #0
 800490a:	2028      	movs	r0, #40	; 0x28
 800490c:	f001 feb9 	bl	8006682 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004910:	2028      	movs	r0, #40	; 0x28
 8004912:	f001 fed2 	bl	80066ba <HAL_NVIC_EnableIRQ>

}
 8004916:	bf00      	nop
 8004918:	3728      	adds	r7, #40	; 0x28
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800
 8004924:	40020800 	.word	0x40020800
 8004928:	40020000 	.word	0x40020000
 800492c:	40020400 	.word	0x40020400
 8004930:	10310000 	.word	0x10310000

08004934 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	80fb      	strh	r3, [r7, #6]
	pressed=true;
 800493e:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]

	static GPIO_PinState A_state,B_state,prev_A=GPIO_PIN_SET,prev_B=GPIO_PIN_SET;


	if(GPIO_Pin == A_Pin)
 8004944:	88fb      	ldrh	r3, [r7, #6]
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494a:	d129      	bne.n	80049a0 <HAL_GPIO_EXTI_Callback+0x6c>
	{
		B_state=HAL_GPIO_ReadPin(B_GPIO_Port,B_Pin);
 800494c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004950:	482d      	ldr	r0, [pc, #180]	; (8004a08 <HAL_GPIO_EXTI_Callback+0xd4>)
 8004952:	f002 f851 	bl	80069f8 <HAL_GPIO_ReadPin>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	4b2c      	ldr	r3, [pc, #176]	; (8004a0c <HAL_GPIO_EXTI_Callback+0xd8>)
 800495c:	701a      	strb	r2, [r3, #0]

		if(B_state!=prev_B)
 800495e:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <HAL_GPIO_EXTI_Callback+0xd8>)
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	4b2b      	ldr	r3, [pc, #172]	; (8004a10 <HAL_GPIO_EXTI_Callback+0xdc>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d01a      	beq.n	80049a0 <HAL_GPIO_EXTI_Callback+0x6c>
		{
			if(B_state==GPIO_PIN_SET)
 800496a:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <HAL_GPIO_EXTI_Callback+0xd8>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d112      	bne.n	8004998 <HAL_GPIO_EXTI_Callback+0x64>
			{
				if(A_state==GPIO_PIN_RESET)
 8004972:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10e      	bne.n	8004998 <HAL_GPIO_EXTI_Callback+0x64>
				{
					selection++;
 800497a:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <HAL_GPIO_EXTI_Callback+0xe4>)
 800497c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004980:	b29b      	uxth	r3, r3
 8004982:	3301      	adds	r3, #1
 8004984:	b29b      	uxth	r3, r3
 8004986:	b21a      	sxth	r2, r3
 8004988:	4b23      	ldr	r3, [pc, #140]	; (8004a18 <HAL_GPIO_EXTI_Callback+0xe4>)
 800498a:	801a      	strh	r2, [r3, #0]
					timeout_old=TIM2->CNT;
 800498c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	461a      	mov	r2, r3
 8004994:	4b21      	ldr	r3, [pc, #132]	; (8004a1c <HAL_GPIO_EXTI_Callback+0xe8>)
 8004996:	601a      	str	r2, [r3, #0]
				}
			}
			prev_B=B_state;
 8004998:	4b1c      	ldr	r3, [pc, #112]	; (8004a0c <HAL_GPIO_EXTI_Callback+0xd8>)
 800499a:	781a      	ldrb	r2, [r3, #0]
 800499c:	4b1c      	ldr	r3, [pc, #112]	; (8004a10 <HAL_GPIO_EXTI_Callback+0xdc>)
 800499e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(GPIO_Pin == B_Pin)
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a6:	d129      	bne.n	80049fc <HAL_GPIO_EXTI_Callback+0xc8>
	{
		A_state=HAL_GPIO_ReadPin(A_GPIO_Port,A_Pin);
 80049a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049ac:	4816      	ldr	r0, [pc, #88]	; (8004a08 <HAL_GPIO_EXTI_Callback+0xd4>)
 80049ae:	f002 f823 	bl	80069f8 <HAL_GPIO_ReadPin>
 80049b2:	4603      	mov	r3, r0
 80049b4:	461a      	mov	r2, r3
 80049b6:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_GPIO_EXTI_Callback+0xe0>)
 80049b8:	701a      	strb	r2, [r3, #0]

		if(A_state!=prev_A)
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <HAL_GPIO_EXTI_Callback+0xe0>)
 80049bc:	781a      	ldrb	r2, [r3, #0]
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <HAL_GPIO_EXTI_Callback+0xec>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d01a      	beq.n	80049fc <HAL_GPIO_EXTI_Callback+0xc8>
		{
			if(A_state==GPIO_PIN_SET)
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_GPIO_EXTI_Callback+0xe0>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d112      	bne.n	80049f4 <HAL_GPIO_EXTI_Callback+0xc0>
			{
				if(B_state==GPIO_PIN_RESET)
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_GPIO_EXTI_Callback+0xd8>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10e      	bne.n	80049f4 <HAL_GPIO_EXTI_Callback+0xc0>
				{
					selection--;
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <HAL_GPIO_EXTI_Callback+0xe4>)
 80049d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	b21a      	sxth	r2, r3
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <HAL_GPIO_EXTI_Callback+0xe4>)
 80049e6:	801a      	strh	r2, [r3, #0]
					timeout_old=TIM2->CNT;
 80049e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_GPIO_EXTI_Callback+0xe8>)
 80049f2:	601a      	str	r2, [r3, #0]
				}
			}
			prev_A=A_state;
 80049f4:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <HAL_GPIO_EXTI_Callback+0xe0>)
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_GPIO_EXTI_Callback+0xec>)
 80049fa:	701a      	strb	r2, [r3, #0]
				TIM1->CNT = 0;
				A++;
			}
    }
	 */
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000b28 	.word	0x20000b28
 8004a08:	40020800 	.word	0x40020800
 8004a0c:	200008cf 	.word	0x200008cf
 8004a10:	2000071f 	.word	0x2000071f
 8004a14:	200008d0 	.word	0x200008d0
 8004a18:	20000aa8 	.word	0x20000aa8
 8004a1c:	200008c0 	.word	0x200008c0
 8004a20:	20000720 	.word	0x20000720

08004a24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a28:	b672      	cpsid	i
}
 8004a2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004a2c:	e7fe      	b.n	8004a2c <Error_Handler+0x8>
	...

08004a30 <TFT9341_SendCommand>:
	sFONT *pFont;
}LCD_DrawPropTypeDef;
LCD_DrawPropTypeDef lcdprop;
//-------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2108      	movs	r1, #8
 8004a3e:	4806      	ldr	r0, [pc, #24]	; (8004a58 <TFT9341_SendCommand+0x28>)
 8004a40:	f001 fff2 	bl	8006a28 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi1, &cmd, 1, 1);
 8004a44:	1df9      	adds	r1, r7, #7
 8004a46:	2301      	movs	r3, #1
 8004a48:	2201      	movs	r2, #1
 8004a4a:	4804      	ldr	r0, [pc, #16]	; (8004a5c <TFT9341_SendCommand+0x2c>)
 8004a4c:	f003 fcb5 	bl	80083ba <HAL_SPI_Transmit>
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40020000 	.word	0x40020000
 8004a5c:	20000b80 	.word	0x20000b80

08004a60 <TFT9341_SendData>:
//-------------------------------------------------------------------
void TFT9341_SendData(uint8_t dt)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	4806      	ldr	r0, [pc, #24]	; (8004a88 <TFT9341_SendData+0x28>)
 8004a70:	f001 ffda 	bl	8006a28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &dt, 1, 1);
 8004a74:	1df9      	adds	r1, r7, #7
 8004a76:	2301      	movs	r3, #1
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4804      	ldr	r0, [pc, #16]	; (8004a8c <TFT9341_SendData+0x2c>)
 8004a7c:	f003 fc9d 	bl	80083ba <HAL_SPI_Transmit>
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40020000 	.word	0x40020000
 8004a8c:	20000b80 	.word	0x20000b80

08004a90 <TFT9341_WriteData>:
//-------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	2108      	movs	r1, #8
 8004a9e:	4811      	ldr	r0, [pc, #68]	; (8004ae4 <TFT9341_WriteData+0x54>)
 8004aa0:	f001 ffc2 	bl	8006a28 <HAL_GPIO_WritePin>
	while(buff_size > 0) {
 8004aa4:	e015      	b.n	8004ad2 <TFT9341_WriteData+0x42>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	bf28      	it	cs
 8004aae:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8004ab2:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 8004ab4:	89fa      	ldrh	r2, [r7, #14]
 8004ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	480a      	ldr	r0, [pc, #40]	; (8004ae8 <TFT9341_WriteData+0x58>)
 8004abe:	f003 fc7c 	bl	80083ba <HAL_SPI_Transmit>
		buff += chunk_size;
 8004ac2:	89fb      	ldrh	r3, [r7, #14]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8004aca:	89fb      	ldrh	r3, [r7, #14]
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	603b      	str	r3, [r7, #0]
	while(buff_size > 0) {
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e6      	bne.n	8004aa6 <TFT9341_WriteData+0x16>
	}
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40020000 	.word	0x40020000
 8004ae8:	20000b80 	.word	0x20000b80

08004aec <TFT9341_reset>:
//-------------------------------------------------------------------
void TFT9341_reset(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8004af0:	2200      	movs	r2, #0
 8004af2:	2104      	movs	r1, #4
 8004af4:	4806      	ldr	r0, [pc, #24]	; (8004b10 <TFT9341_reset+0x24>)
 8004af6:	f001 ff97 	bl	8006a28 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8004afa:	2005      	movs	r0, #5
 8004afc:	f001 fcc2 	bl	8006484 <HAL_Delay>
	RESET_IDLE();
 8004b00:	2201      	movs	r2, #1
 8004b02:	2104      	movs	r1, #4
 8004b04:	4802      	ldr	r0, [pc, #8]	; (8004b10 <TFT9341_reset+0x24>)
 8004b06:	f001 ff8f 	bl	8006a28 <HAL_GPIO_WritePin>
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40020000 	.word	0x40020000

08004b14 <TFT9341_SetAddrWindow>:
//-------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	461a      	mov	r2, r3
 8004b22:	4623      	mov	r3, r4
 8004b24:	80fb      	strh	r3, [r7, #6]
 8004b26:	4603      	mov	r3, r0
 8004b28:	80bb      	strh	r3, [r7, #4]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	807b      	strh	r3, [r7, #2]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 8004b32:	202a      	movs	r0, #42	; 0x2a
 8004b34:	f7ff ff7c 	bl	8004a30 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	733b      	strb	r3, [r7, #12]
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	737b      	strb	r3, [r7, #13]
 8004b48:	887b      	ldrh	r3, [r7, #2]
 8004b4a:	0a1b      	lsrs	r3, r3, #8
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	73bb      	strb	r3, [r7, #14]
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 8004b58:	f107 030c 	add.w	r3, r7, #12
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff ff96 	bl	8004a90 <TFT9341_WriteData>
  }
 
  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 8004b64:	202b      	movs	r0, #43	; 0x2b
 8004b66:	f7ff ff63 	bl	8004a30 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8004b6a:	88bb      	ldrh	r3, [r7, #4]
 8004b6c:	0a1b      	lsrs	r3, r3, #8
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	723b      	strb	r3, [r7, #8]
 8004b74:	88bb      	ldrh	r3, [r7, #4]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	727b      	strb	r3, [r7, #9]
 8004b7a:	883b      	ldrh	r3, [r7, #0]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	72bb      	strb	r3, [r7, #10]
 8004b84:	883b      	ldrh	r3, [r7, #0]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 8004b8a:	f107 0308 	add.w	r3, r7, #8
 8004b8e:	2104      	movs	r1, #4
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff7d 	bl	8004a90 <TFT9341_WriteData>
  }
 
  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 8004b96:	202c      	movs	r0, #44	; 0x2c
 8004b98:	f7ff ff4a 	bl	8004a30 <TFT9341_SendCommand>
}//-------------------------------------------------------------------
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd90      	pop	{r4, r7, pc}

08004ba4 <TFT9341_FillRect>:
void TFT9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4604      	mov	r4, r0
 8004bac:	4608      	mov	r0, r1
 8004bae:	4611      	mov	r1, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4623      	mov	r3, r4
 8004bb4:	80fb      	strh	r3, [r7, #6]
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	80bb      	strh	r3, [r7, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	807b      	strh	r3, [r7, #2]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	803b      	strh	r3, [r7, #0]
  if((x1 >= TFT9341_WIDTH) || (y1 >= TFT9341_HEIGHT) || (x2 >= TFT9341_WIDTH) || (y2 >= TFT9341_HEIGHT)) return;
 8004bc2:	4b2e      	ldr	r3, [pc, #184]	; (8004c7c <TFT9341_FillRect+0xd8>)
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d252      	bcs.n	8004c72 <TFT9341_FillRect+0xce>
 8004bcc:	4b2c      	ldr	r3, [pc, #176]	; (8004c80 <TFT9341_FillRect+0xdc>)
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	88ba      	ldrh	r2, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d24d      	bcs.n	8004c72 <TFT9341_FillRect+0xce>
 8004bd6:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <TFT9341_FillRect+0xd8>)
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	887a      	ldrh	r2, [r7, #2]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d248      	bcs.n	8004c72 <TFT9341_FillRect+0xce>
 8004be0:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <TFT9341_FillRect+0xdc>)
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	883a      	ldrh	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d243      	bcs.n	8004c72 <TFT9341_FillRect+0xce>
	if(x1>x2) swap(x1,x2);
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	887b      	ldrh	r3, [r7, #2]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d905      	bls.n	8004bfe <TFT9341_FillRect+0x5a>
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	827b      	strh	r3, [r7, #18]
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	80fb      	strh	r3, [r7, #6]
 8004bfa:	8a7b      	ldrh	r3, [r7, #18]
 8004bfc:	807b      	strh	r3, [r7, #2]
	if(y1>y2) swap(y1,y2);
 8004bfe:	88ba      	ldrh	r2, [r7, #4]
 8004c00:	883b      	ldrh	r3, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d905      	bls.n	8004c12 <TFT9341_FillRect+0x6e>
 8004c06:	88bb      	ldrh	r3, [r7, #4]
 8004c08:	823b      	strh	r3, [r7, #16]
 8004c0a:	883b      	ldrh	r3, [r7, #0]
 8004c0c:	80bb      	strh	r3, [r7, #4]
 8004c0e:	8a3b      	ldrh	r3, [r7, #16]
 8004c10:	803b      	strh	r3, [r7, #0]
  TFT9341_SetAddrWindow(x1, y1, x2, y2);
 8004c12:	883b      	ldrh	r3, [r7, #0]
 8004c14:	887a      	ldrh	r2, [r7, #2]
 8004c16:	88b9      	ldrh	r1, [r7, #4]
 8004c18:	88f8      	ldrh	r0, [r7, #6]
 8004c1a:	f7ff ff7b 	bl	8004b14 <TFT9341_SetAddrWindow>
  uint8_t data[] = { color >> 8, color & 0xFF };
 8004c1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	733b      	strb	r3, [r7, #12]
 8004c28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	737b      	strb	r3, [r7, #13]
  DC_DATA();
 8004c2e:	2201      	movs	r2, #1
 8004c30:	2108      	movs	r1, #8
 8004c32:	4814      	ldr	r0, [pc, #80]	; (8004c84 <TFT9341_FillRect+0xe0>)
 8004c34:	f001 fef8 	bl	8006a28 <HAL_GPIO_WritePin>
  for(uint32_t i = 0; i < (x2-x1+1)*(y2-y1+1); i++)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e00a      	b.n	8004c54 <TFT9341_FillRect+0xb0>
  {
      HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8004c3e:	f107 010c 	add.w	r1, r7, #12
 8004c42:	f04f 33ff 	mov.w	r3, #4294967295
 8004c46:	2202      	movs	r2, #2
 8004c48:	480f      	ldr	r0, [pc, #60]	; (8004c88 <TFT9341_FillRect+0xe4>)
 8004c4a:	f003 fbb6 	bl	80083ba <HAL_SPI_Transmit>
  for(uint32_t i = 0; i < (x2-x1+1)*(y2-y1+1); i++)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	3301      	adds	r3, #1
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	887a      	ldrh	r2, [r7, #2]
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	8839      	ldrh	r1, [r7, #0]
 8004c5e:	88ba      	ldrh	r2, [r7, #4]
 8004c60:	1a8a      	subs	r2, r1, r2
 8004c62:	3201      	adds	r2, #1
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d3e6      	bcc.n	8004c3e <TFT9341_FillRect+0x9a>
 8004c70:	e000      	b.n	8004c74 <TFT9341_FillRect+0xd0>
  if((x1 >= TFT9341_WIDTH) || (y1 >= TFT9341_HEIGHT) || (x2 >= TFT9341_WIDTH) || (y2 >= TFT9341_HEIGHT)) return;
 8004c72:	bf00      	nop
			//HAL_SPI_Transmit_DMA(&hspi1, data, 2);
  }
}
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd90      	pop	{r4, r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000c30 	.word	0x20000c30
 8004c80:	20000c24 	.word	0x20000c24
 8004c84:	40020000 	.word	0x40020000
 8004c88:	20000b80 	.word	0x20000b80

08004c8c <TFT9341_FillScreen>:
//-------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	4603      	mov	r3, r0
 8004c94:	80fb      	strh	r3, [r7, #6]
  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <TFT9341_FillScreen+0x30>)
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <TFT9341_FillScreen+0x34>)
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b299      	uxth	r1, r3
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	460b      	mov	r3, r1
 8004cac:	2100      	movs	r1, #0
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f7ff ff78 	bl	8004ba4 <TFT9341_FillRect>
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000c30 	.word	0x20000c30
 8004cc0:	20000c24 	.word	0x20000c24

08004cc4 <TFT9341_DrawPixel>:
//-------------------------------------------------------------------
void TFT9341_DrawPixel(int x, int y, uint16_t color)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	db28      	blt.n	8004d2a <TFT9341_DrawPixel+0x66>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	db25      	blt.n	8004d2a <TFT9341_DrawPixel+0x66>
 8004cde:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <TFT9341_DrawPixel+0x70>)
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	da1f      	bge.n	8004d2a <TFT9341_DrawPixel+0x66>
 8004cea:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <TFT9341_DrawPixel+0x74>)
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	da19      	bge.n	8004d2a <TFT9341_DrawPixel+0x66>
	TFT9341_SetAddrWindow(x,y,x,y);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	b298      	uxth	r0, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	b299      	uxth	r1, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f7ff ff05 	bl	8004b14 <TFT9341_SetAddrWindow>
	TFT9341_SendCommand(0x2C);
 8004d0a:	202c      	movs	r0, #44	; 0x2c
 8004d0c:	f7ff fe90 	bl	8004a30 <TFT9341_SendCommand>
	TFT9341_SendData(color>>8);
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fea1 	bl	8004a60 <TFT9341_SendData>
	TFT9341_SendData(color & 0xFF);
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fe9c 	bl	8004a60 <TFT9341_SendData>
 8004d28:	e000      	b.n	8004d2c <TFT9341_DrawPixel+0x68>
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 8004d2a:	bf00      	nop
}
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000c30 	.word	0x20000c30
 8004d38:	20000c24 	.word	0x20000c24

08004d3c <TFT9341_SetTextColor>:
{
	return 565&0x0000FFFF;
}
//-------------------------------------------------------------------
void TFT9341_SetTextColor(uint16_t color)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	80fb      	strh	r3, [r7, #6]
  lcdprop.TextColor=color;
 8004d46:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <TFT9341_SetTextColor+0x1c>)
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	8013      	strh	r3, [r2, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	20000c28 	.word	0x20000c28

08004d5c <TFT9341_SetBackColor>:
//------------------------------------
void TFT9341_SetBackColor(uint16_t color)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	80fb      	strh	r3, [r7, #6]
  lcdprop.BackColor=color;
 8004d66:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <TFT9341_SetBackColor+0x1c>)
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	8053      	strh	r3, [r2, #2]
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000c28 	.word	0x20000c28

08004d7c <TFT9341_SetFont>:
//------------------------------------
void TFT9341_SetFont(sFONT *pFonts)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  lcdprop.pFont=pFonts;
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <TFT9341_SetFont+0x1c>)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6053      	str	r3, [r2, #4]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000c28 	.word	0x20000c28

08004d9c <TFT9341_DrawChar>:
//-------------------------------------------------------------------
void TFT9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	80fb      	strh	r3, [r7, #6]
 8004da6:	460b      	mov	r3, r1
 8004da8:	80bb      	strh	r3, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	70fb      	strb	r3, [r7, #3]
  uint32_t i = 0, j = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
 8004db2:	2300      	movs	r3, #0
 8004db4:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *c_t;
  uint8_t *pchar;
  uint32_t line=0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]
  height = lcdprop.pFont->Height;
 8004dba:	4b4e      	ldr	r3, [pc, #312]	; (8004ef4 <TFT9341_DrawChar+0x158>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	88db      	ldrh	r3, [r3, #6]
 8004dc0:	837b      	strh	r3, [r7, #26]
  width  = lcdprop.pFont->Width;
 8004dc2:	4b4c      	ldr	r3, [pc, #304]	; (8004ef4 <TFT9341_DrawChar+0x158>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	889b      	ldrh	r3, [r3, #4]
 8004dc8:	833b      	strh	r3, [r7, #24]
  offset = 8 *((width + 7)/8) -  width ;
 8004dca:	8b3b      	ldrh	r3, [r7, #24]
 8004dcc:	3307      	adds	r3, #7
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	da00      	bge.n	8004dd4 <TFT9341_DrawChar+0x38>
 8004dd2:	3307      	adds	r3, #7
 8004dd4:	10db      	asrs	r3, r3, #3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	8b3b      	ldrh	r3, [r7, #24]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	75fb      	strb	r3, [r7, #23]
  c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
 8004de4:	4b43      	ldr	r3, [pc, #268]	; (8004ef4 <TFT9341_DrawChar+0x158>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	3b20      	subs	r3, #32
 8004dee:	4941      	ldr	r1, [pc, #260]	; (8004ef4 <TFT9341_DrawChar+0x158>)
 8004df0:	6849      	ldr	r1, [r1, #4]
 8004df2:	88c9      	ldrh	r1, [r1, #6]
 8004df4:	fb01 f103 	mul.w	r1, r1, r3
 8004df8:	4b3e      	ldr	r3, [pc, #248]	; (8004ef4 <TFT9341_DrawChar+0x158>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	889b      	ldrh	r3, [r3, #4]
 8004dfe:	3307      	adds	r3, #7
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	da00      	bge.n	8004e06 <TFT9341_DrawChar+0x6a>
 8004e04:	3307      	adds	r3, #7
 8004e06:	10db      	asrs	r3, r3, #3
 8004e08:	fb03 f301 	mul.w	r3, r3, r1
 8004e0c:	4413      	add	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
  for(i = 0; i < height; i++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
 8004e14:	e065      	b.n	8004ee2 <TFT9341_DrawChar+0x146>
  {
    pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 8004e16:	8b3b      	ldrh	r3, [r7, #24]
 8004e18:	3307      	adds	r3, #7
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da00      	bge.n	8004e20 <TFT9341_DrawChar+0x84>
 8004e1e:	3307      	adds	r3, #7
 8004e20:	10db      	asrs	r3, r3, #3
 8004e22:	461a      	mov	r2, r3
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	fb03 f302 	mul.w	r3, r3, r2
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
    switch(((width + 7)/8))
 8004e30:	8b3b      	ldrh	r3, [r7, #24]
 8004e32:	3307      	adds	r3, #7
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da00      	bge.n	8004e3a <TFT9341_DrawChar+0x9e>
 8004e38:	3307      	adds	r3, #7
 8004e3a:	10db      	asrs	r3, r3, #3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d002      	beq.n	8004e46 <TFT9341_DrawChar+0xaa>
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d004      	beq.n	8004e4e <TFT9341_DrawChar+0xb2>
 8004e44:	e00c      	b.n	8004e60 <TFT9341_DrawChar+0xc4>
    {
      case 1:
          line =  pchar[0];      
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	61fb      	str	r3, [r7, #28]
          break;
 8004e4c:	e016      	b.n	8004e7c <TFT9341_DrawChar+0xe0>
      case 2:
          line =  (pchar[0]<< 8) | pchar[1];
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	3201      	adds	r2, #1
 8004e58:	7812      	ldrb	r2, [r2, #0]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	61fb      	str	r3, [r7, #28]
          break;
 8004e5e:	e00d      	b.n	8004e7c <TFT9341_DrawChar+0xe0>
      case 3:
      default:
        line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	041a      	lsls	r2, r3, #16
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	3202      	adds	r2, #2
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61fb      	str	r3, [r7, #28]
        break;
 8004e7a:	bf00      	nop
    }
    for (j = 0; j < width; j++)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	623b      	str	r3, [r7, #32]
 8004e80:	e025      	b.n	8004ece <TFT9341_DrawChar+0x132>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004e82:	8b3a      	ldrh	r2, [r7, #24]
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	2201      	movs	r2, #1
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <TFT9341_DrawChar+0x118>
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.TextColor);
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	88bb      	ldrh	r3, [r7, #4]
 8004ea8:	4a12      	ldr	r2, [pc, #72]	; (8004ef4 <TFT9341_DrawChar+0x158>)
 8004eaa:	8812      	ldrh	r2, [r2, #0]
 8004eac:	4619      	mov	r1, r3
 8004eae:	f7ff ff09 	bl	8004cc4 <TFT9341_DrawPixel>
 8004eb2:	e009      	b.n	8004ec8 <TFT9341_DrawChar+0x12c>
      }
      else
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.BackColor);
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	4413      	add	r3, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	88bb      	ldrh	r3, [r7, #4]
 8004ebe:	4a0d      	ldr	r2, [pc, #52]	; (8004ef4 <TFT9341_DrawChar+0x158>)
 8004ec0:	8852      	ldrh	r2, [r2, #2]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f7ff fefe 	bl	8004cc4 <TFT9341_DrawPixel>
    for (j = 0; j < width; j++)
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	8b3b      	ldrh	r3, [r7, #24]
 8004ed0:	6a3a      	ldr	r2, [r7, #32]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d3d5      	bcc.n	8004e82 <TFT9341_DrawChar+0xe6>
      } 
    }
    y++;      
 8004ed6:	88bb      	ldrh	r3, [r7, #4]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	3301      	adds	r3, #1
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee2:	8b7b      	ldrh	r3, [r7, #26]
 8004ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d395      	bcc.n	8004e16 <TFT9341_DrawChar+0x7a>
  }
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	3728      	adds	r7, #40	; 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000c28 	.word	0x20000c28

08004ef8 <TFT9341_String>:
//-------------------------------------------------------------------
void TFT9341_String(uint16_t x,uint16_t y, char *str)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	603a      	str	r2, [r7, #0]
 8004f02:	80fb      	strh	r3, [r7, #6]
 8004f04:	460b      	mov	r3, r1
 8004f06:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8004f08:	e00f      	b.n	8004f2a <TFT9341_String+0x32>
  {
    TFT9341_DrawChar(x,y,str[0]);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	88b9      	ldrh	r1, [r7, #4]
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff ff42 	bl	8004d9c <TFT9341_DrawChar>
    x+=lcdprop.pFont->Width;
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <TFT9341_String+0x44>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	889a      	ldrh	r2, [r3, #4]
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	4413      	add	r3, r2
 8004f22:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	603b      	str	r3, [r7, #0]
  while(*str)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1eb      	bne.n	8004f0a <TFT9341_String+0x12>
  }
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20000c28 	.word	0x20000c28

08004f40 <TFT9341_SetRotation>:
//-------------------------------------------------------------------
void TFT9341_SetRotation(uint8_t r)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 8004f4a:	2036      	movs	r0, #54	; 0x36
 8004f4c:	f7ff fd70 	bl	8004a30 <TFT9341_SendCommand>
  switch(r)
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d836      	bhi.n	8004fc4 <TFT9341_SetRotation+0x84>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <TFT9341_SetRotation+0x1c>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f6d 	.word	0x08004f6d
 8004f60:	08004f83 	.word	0x08004f83
 8004f64:	08004f99 	.word	0x08004f99
 8004f68:	08004faf 	.word	0x08004faf
  {
    case 0:
      TFT9341_SendData(0x48);
 8004f6c:	2048      	movs	r0, #72	; 0x48
 8004f6e:	f7ff fd77 	bl	8004a60 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 8004f72:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <TFT9341_SetRotation+0x8c>)
 8004f74:	22f0      	movs	r2, #240	; 0xf0
 8004f76:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8004f78:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <TFT9341_SetRotation+0x90>)
 8004f7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f7e:	801a      	strh	r2, [r3, #0]
      break;
 8004f80:	e020      	b.n	8004fc4 <TFT9341_SetRotation+0x84>
    case 1:
      TFT9341_SendData(0x28);
 8004f82:	2028      	movs	r0, #40	; 0x28
 8004f84:	f7ff fd6c 	bl	8004a60 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 8004f88:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <TFT9341_SetRotation+0x8c>)
 8004f8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f8e:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 8004f90:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <TFT9341_SetRotation+0x90>)
 8004f92:	22f0      	movs	r2, #240	; 0xf0
 8004f94:	801a      	strh	r2, [r3, #0]
      break;
 8004f96:	e015      	b.n	8004fc4 <TFT9341_SetRotation+0x84>
    case 2:
      TFT9341_SendData(0x88);
 8004f98:	2088      	movs	r0, #136	; 0x88
 8004f9a:	f7ff fd61 	bl	8004a60 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <TFT9341_SetRotation+0x8c>)
 8004fa0:	22f0      	movs	r2, #240	; 0xf0
 8004fa2:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <TFT9341_SetRotation+0x90>)
 8004fa6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004faa:	801a      	strh	r2, [r3, #0]
      break;
 8004fac:	e00a      	b.n	8004fc4 <TFT9341_SetRotation+0x84>
    case 3:
      TFT9341_SendData(0xE8);
 8004fae:	20e8      	movs	r0, #232	; 0xe8
 8004fb0:	f7ff fd56 	bl	8004a60 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <TFT9341_SetRotation+0x8c>)
 8004fb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fba:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 8004fbc:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <TFT9341_SetRotation+0x90>)
 8004fbe:	22f0      	movs	r2, #240	; 0xf0
 8004fc0:	801a      	strh	r2, [r3, #0]
      break;
 8004fc2:	bf00      	nop
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000c30 	.word	0x20000c30
 8004fd0:	20000c24 	.word	0x20000c24

08004fd4 <TFT9341_FontsIni>:
//-------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 8004fd8:	4b16      	ldr	r3, [pc, #88]	; (8005034 <TFT9341_FontsIni+0x60>)
 8004fda:	2208      	movs	r2, #8
 8004fdc:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <TFT9341_FontsIni+0x60>)
 8004fe0:	2205      	movs	r2, #5
 8004fe2:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 8004fe4:	4b14      	ldr	r3, [pc, #80]	; (8005038 <TFT9341_FontsIni+0x64>)
 8004fe6:	220c      	movs	r2, #12
 8004fe8:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <TFT9341_FontsIni+0x64>)
 8004fec:	2207      	movs	r2, #7
 8004fee:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 8004ff0:	4b12      	ldr	r3, [pc, #72]	; (800503c <TFT9341_FontsIni+0x68>)
 8004ff2:	2210      	movs	r2, #16
 8004ff4:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <TFT9341_FontsIni+0x68>)
 8004ff8:	220b      	movs	r2, #11
 8004ffa:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <TFT9341_FontsIni+0x6c>)
 8004ffe:	2214      	movs	r2, #20
 8005000:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 8005002:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <TFT9341_FontsIni+0x6c>)
 8005004:	220e      	movs	r2, #14
 8005006:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 8005008:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <TFT9341_FontsIni+0x70>)
 800500a:	2218      	movs	r2, #24
 800500c:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 800500e:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <TFT9341_FontsIni+0x70>)
 8005010:	2211      	movs	r2, #17
 8005012:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <TFT9341_FontsIni+0x74>)
 8005016:	2200      	movs	r2, #0
 8005018:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <TFT9341_FontsIni+0x74>)
 800501c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005020:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <TFT9341_FontsIni+0x74>)
 8005024:	4a05      	ldr	r2, [pc, #20]	; (800503c <TFT9341_FontsIni+0x68>)
 8005026:	605a      	str	r2, [r3, #4]
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20000024 	.word	0x20000024
 8005038:	20000004 	.word	0x20000004
 800503c:	2000000c 	.word	0x2000000c
 8005040:	20000014 	.word	0x20000014
 8005044:	2000001c 	.word	0x2000001c
 8005048:	20000c28 	.word	0x20000c28

0800504c <TFT9341_ini>:
//-------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	460a      	mov	r2, r1
 8005056:	80fb      	strh	r3, [r7, #6]
 8005058:	4613      	mov	r3, r2
 800505a:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 800505c:	2200      	movs	r2, #0
 800505e:	2110      	movs	r1, #16
 8005060:	48a3      	ldr	r0, [pc, #652]	; (80052f0 <TFT9341_ini+0x2a4>)
 8005062:	f001 fce1 	bl	8006a28 <HAL_GPIO_WritePin>
  TFT9341_reset();
 8005066:	f7ff fd41 	bl	8004aec <TFT9341_reset>
  //Software Reset
  TFT9341_SendCommand(0x01);
 800506a:	2001      	movs	r0, #1
 800506c:	f7ff fce0 	bl	8004a30 <TFT9341_SendCommand>
  HAL_Delay(1000);
 8005070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005074:	f001 fa06 	bl	8006484 <HAL_Delay>
  //Power Control A  
  data[0] = 0x39;
 8005078:	2339      	movs	r3, #57	; 0x39
 800507a:	723b      	strb	r3, [r7, #8]
  data[1] = 0x2C;
 800507c:	232c      	movs	r3, #44	; 0x2c
 800507e:	727b      	strb	r3, [r7, #9]
  data[2] = 0x00;
 8005080:	2300      	movs	r3, #0
 8005082:	72bb      	strb	r3, [r7, #10]
  data[3] = 0x34;
 8005084:	2334      	movs	r3, #52	; 0x34
 8005086:	72fb      	strb	r3, [r7, #11]
  data[4] = 0x02;
 8005088:	2302      	movs	r3, #2
 800508a:	733b      	strb	r3, [r7, #12]
  TFT9341_SendCommand(0xCB);
 800508c:	20cb      	movs	r0, #203	; 0xcb
 800508e:	f7ff fccf 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 5);
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	2105      	movs	r1, #5
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fcf9 	bl	8004a90 <TFT9341_WriteData>
  //Power Control B
  data[0] = 0x00;
 800509e:	2300      	movs	r3, #0
 80050a0:	723b      	strb	r3, [r7, #8]
  data[1] = 0xC1;
 80050a2:	23c1      	movs	r3, #193	; 0xc1
 80050a4:	727b      	strb	r3, [r7, #9]
  data[2] = 0x30;
 80050a6:	2330      	movs	r3, #48	; 0x30
 80050a8:	72bb      	strb	r3, [r7, #10]
  TFT9341_SendCommand(0xCF);
 80050aa:	20cf      	movs	r0, #207	; 0xcf
 80050ac:	f7ff fcc0 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 3);
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	2103      	movs	r1, #3
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fcea 	bl	8004a90 <TFT9341_WriteData>
  //Driver timing control A
  data[0] = 0x85;
 80050bc:	2385      	movs	r3, #133	; 0x85
 80050be:	723b      	strb	r3, [r7, #8]
  data[1] = 0x00;
 80050c0:	2300      	movs	r3, #0
 80050c2:	727b      	strb	r3, [r7, #9]
  data[2] = 0x78;
 80050c4:	2378      	movs	r3, #120	; 0x78
 80050c6:	72bb      	strb	r3, [r7, #10]
  TFT9341_SendCommand(0xE8);
 80050c8:	20e8      	movs	r0, #232	; 0xe8
 80050ca:	f7ff fcb1 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 3);
 80050ce:	f107 0308 	add.w	r3, r7, #8
 80050d2:	2103      	movs	r1, #3
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fcdb 	bl	8004a90 <TFT9341_WriteData>
  //Driver timing control B
  data[0] = 0x00;
 80050da:	2300      	movs	r3, #0
 80050dc:	723b      	strb	r3, [r7, #8]
  data[1] = 0x00;
 80050de:	2300      	movs	r3, #0
 80050e0:	727b      	strb	r3, [r7, #9]
  TFT9341_SendCommand(0xEA);
 80050e2:	20ea      	movs	r0, #234	; 0xea
 80050e4:	f7ff fca4 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 2);
 80050e8:	f107 0308 	add.w	r3, r7, #8
 80050ec:	2102      	movs	r1, #2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fcce 	bl	8004a90 <TFT9341_WriteData>
  //Power on Sequence control
  data[0] = 0x64;
 80050f4:	2364      	movs	r3, #100	; 0x64
 80050f6:	723b      	strb	r3, [r7, #8]
  data[1] = 0x03;
 80050f8:	2303      	movs	r3, #3
 80050fa:	727b      	strb	r3, [r7, #9]
  data[2] = 0x12;
 80050fc:	2312      	movs	r3, #18
 80050fe:	72bb      	strb	r3, [r7, #10]
  data[3] = 0x81;
 8005100:	2381      	movs	r3, #129	; 0x81
 8005102:	72fb      	strb	r3, [r7, #11]
  TFT9341_SendCommand(0xED);
 8005104:	20ed      	movs	r0, #237	; 0xed
 8005106:	f7ff fc93 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 4);
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	2104      	movs	r1, #4
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff fcbd 	bl	8004a90 <TFT9341_WriteData>
  //Pump ratio control
  data[0] = 0x20;
 8005116:	2320      	movs	r3, #32
 8005118:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0xF7);
 800511a:	20f7      	movs	r0, #247	; 0xf7
 800511c:	f7ff fc88 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 8005120:	f107 0308 	add.w	r3, r7, #8
 8005124:	2101      	movs	r1, #1
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fcb2 	bl	8004a90 <TFT9341_WriteData>
  //Power Control,VRH[5:0]
  data[0] = 0x10;
 800512c:	2310      	movs	r3, #16
 800512e:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0xC0);
 8005130:	20c0      	movs	r0, #192	; 0xc0
 8005132:	f7ff fc7d 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 8005136:	f107 0308 	add.w	r3, r7, #8
 800513a:	2101      	movs	r1, #1
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff fca7 	bl	8004a90 <TFT9341_WriteData>
  //Power Control,SAP[2:0];BT[3:0]
  data[0] = 0x10;
 8005142:	2310      	movs	r3, #16
 8005144:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0xC1);
 8005146:	20c1      	movs	r0, #193	; 0xc1
 8005148:	f7ff fc72 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 800514c:	f107 0308 	add.w	r3, r7, #8
 8005150:	2101      	movs	r1, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fc9c 	bl	8004a90 <TFT9341_WriteData>
  //VCOM Control 1
  data[0] = 0x3E;
 8005158:	233e      	movs	r3, #62	; 0x3e
 800515a:	723b      	strb	r3, [r7, #8]
  data[1] = 0x28;
 800515c:	2328      	movs	r3, #40	; 0x28
 800515e:	727b      	strb	r3, [r7, #9]
  TFT9341_SendCommand(0xC5);
 8005160:	20c5      	movs	r0, #197	; 0xc5
 8005162:	f7ff fc65 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 2);
 8005166:	f107 0308 	add.w	r3, r7, #8
 800516a:	2102      	movs	r1, #2
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fc8f 	bl	8004a90 <TFT9341_WriteData>
  //VCOM Control 2
  data[0] = 0x86;
 8005172:	2386      	movs	r3, #134	; 0x86
 8005174:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0xC7);
 8005176:	20c7      	movs	r0, #199	; 0xc7
 8005178:	f7ff fc5a 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 800517c:	f107 0308 	add.w	r3, r7, #8
 8005180:	2101      	movs	r1, #1
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fc84 	bl	8004a90 <TFT9341_WriteData>
  //Memory Acsess Control
  data[0] = 0x48;
 8005188:	2348      	movs	r3, #72	; 0x48
 800518a:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0x36);
 800518c:	2036      	movs	r0, #54	; 0x36
 800518e:	f7ff fc4f 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 8005192:	f107 0308 	add.w	r3, r7, #8
 8005196:	2101      	movs	r1, #1
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fc79 	bl	8004a90 <TFT9341_WriteData>
  //Pixel Format Set
  data[0] = 0x55;//16bit
 800519e:	2355      	movs	r3, #85	; 0x55
 80051a0:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0x3A);
 80051a2:	203a      	movs	r0, #58	; 0x3a
 80051a4:	f7ff fc44 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 80051a8:	f107 0308 	add.w	r3, r7, #8
 80051ac:	2101      	movs	r1, #1
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fc6e 	bl	8004a90 <TFT9341_WriteData>
  //Frame Rratio Control, Standard RGB Color
  data[0] = 0x00;
 80051b4:	2300      	movs	r3, #0
 80051b6:	723b      	strb	r3, [r7, #8]
  data[1] = 0x18;
 80051b8:	2318      	movs	r3, #24
 80051ba:	727b      	strb	r3, [r7, #9]
  TFT9341_SendCommand(0xB1);
 80051bc:	20b1      	movs	r0, #177	; 0xb1
 80051be:	f7ff fc37 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 2);
 80051c2:	f107 0308 	add.w	r3, r7, #8
 80051c6:	2102      	movs	r1, #2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fc61 	bl	8004a90 <TFT9341_WriteData>
  //Display Function Control
  data[0] = 0x08;
 80051ce:	2308      	movs	r3, #8
 80051d0:	723b      	strb	r3, [r7, #8]
  data[1] = 0x82;
 80051d2:	2382      	movs	r3, #130	; 0x82
 80051d4:	727b      	strb	r3, [r7, #9]
  data[2] = 0x27;//320 строк
 80051d6:	2327      	movs	r3, #39	; 0x27
 80051d8:	72bb      	strb	r3, [r7, #10]
  TFT9341_SendCommand(0xB6);
 80051da:	20b6      	movs	r0, #182	; 0xb6
 80051dc:	f7ff fc28 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 3);
 80051e0:	f107 0308 	add.w	r3, r7, #8
 80051e4:	2103      	movs	r1, #3
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fc52 	bl	8004a90 <TFT9341_WriteData>
  //Enable 3G (пока не знаю что это за режим)
  data[0] = 0x00;//не включаем
 80051ec:	2300      	movs	r3, #0
 80051ee:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0xF2);
 80051f0:	20f2      	movs	r0, #242	; 0xf2
 80051f2:	f7ff fc1d 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 80051f6:	f107 0308 	add.w	r3, r7, #8
 80051fa:	2101      	movs	r1, #1
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fc47 	bl	8004a90 <TFT9341_WriteData>
  //Gamma set
  data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 8005202:	2301      	movs	r3, #1
 8005204:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0x26);
 8005206:	2026      	movs	r0, #38	; 0x26
 8005208:	f7ff fc12 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 800520c:	f107 0308 	add.w	r3, r7, #8
 8005210:	2101      	movs	r1, #1
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fc3c 	bl	8004a90 <TFT9341_WriteData>
  //Positive Gamma  Correction
  data[0] = 0x0F;
 8005218:	230f      	movs	r3, #15
 800521a:	723b      	strb	r3, [r7, #8]
  data[1] = 0x31;
 800521c:	2331      	movs	r3, #49	; 0x31
 800521e:	727b      	strb	r3, [r7, #9]
  data[2] = 0x2B;
 8005220:	232b      	movs	r3, #43	; 0x2b
 8005222:	72bb      	strb	r3, [r7, #10]
  data[3] = 0x0C;
 8005224:	230c      	movs	r3, #12
 8005226:	72fb      	strb	r3, [r7, #11]
  data[4] = 0x0E;
 8005228:	230e      	movs	r3, #14
 800522a:	733b      	strb	r3, [r7, #12]
  data[5] = 0x08;
 800522c:	2308      	movs	r3, #8
 800522e:	737b      	strb	r3, [r7, #13]
  data[6] = 0x4E;
 8005230:	234e      	movs	r3, #78	; 0x4e
 8005232:	73bb      	strb	r3, [r7, #14]
  data[7] = 0xF1;
 8005234:	23f1      	movs	r3, #241	; 0xf1
 8005236:	73fb      	strb	r3, [r7, #15]
  data[8] = 0x37;
 8005238:	2337      	movs	r3, #55	; 0x37
 800523a:	743b      	strb	r3, [r7, #16]
  data[9] = 0x07;
 800523c:	2307      	movs	r3, #7
 800523e:	747b      	strb	r3, [r7, #17]
  data[10] = 0x10;
 8005240:	2310      	movs	r3, #16
 8005242:	74bb      	strb	r3, [r7, #18]
  data[11] = 0x03;
 8005244:	2303      	movs	r3, #3
 8005246:	74fb      	strb	r3, [r7, #19]
  data[12] = 0x0E;
 8005248:	230e      	movs	r3, #14
 800524a:	753b      	strb	r3, [r7, #20]
  data[13] = 0x09;
 800524c:	2309      	movs	r3, #9
 800524e:	757b      	strb	r3, [r7, #21]
  data[14] = 0x00;
 8005250:	2300      	movs	r3, #0
 8005252:	75bb      	strb	r3, [r7, #22]
  TFT9341_SendCommand(0xE0);
 8005254:	20e0      	movs	r0, #224	; 0xe0
 8005256:	f7ff fbeb 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 15);
 800525a:	f107 0308 	add.w	r3, r7, #8
 800525e:	210f      	movs	r1, #15
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fc15 	bl	8004a90 <TFT9341_WriteData>
  //Negative Gamma  Correction
  data[0] = 0x00;
 8005266:	2300      	movs	r3, #0
 8005268:	723b      	strb	r3, [r7, #8]
  data[1] = 0x0E;
 800526a:	230e      	movs	r3, #14
 800526c:	727b      	strb	r3, [r7, #9]
  data[2] = 0x14;
 800526e:	2314      	movs	r3, #20
 8005270:	72bb      	strb	r3, [r7, #10]
  data[3] = 0x03;
 8005272:	2303      	movs	r3, #3
 8005274:	72fb      	strb	r3, [r7, #11]
  data[4] = 0x11;
 8005276:	2311      	movs	r3, #17
 8005278:	733b      	strb	r3, [r7, #12]
  data[5] = 0x07;
 800527a:	2307      	movs	r3, #7
 800527c:	737b      	strb	r3, [r7, #13]
  data[6] = 0x31;
 800527e:	2331      	movs	r3, #49	; 0x31
 8005280:	73bb      	strb	r3, [r7, #14]
  data[7] = 0xC1;
 8005282:	23c1      	movs	r3, #193	; 0xc1
 8005284:	73fb      	strb	r3, [r7, #15]
  data[8] = 0x48;
 8005286:	2348      	movs	r3, #72	; 0x48
 8005288:	743b      	strb	r3, [r7, #16]
  data[9] = 0x08;
 800528a:	2308      	movs	r3, #8
 800528c:	747b      	strb	r3, [r7, #17]
  data[10] = 0x0F;
 800528e:	230f      	movs	r3, #15
 8005290:	74bb      	strb	r3, [r7, #18]
  data[11] = 0x0C;
 8005292:	230c      	movs	r3, #12
 8005294:	74fb      	strb	r3, [r7, #19]
  data[12] = 0x31;
 8005296:	2331      	movs	r3, #49	; 0x31
 8005298:	753b      	strb	r3, [r7, #20]
  data[13] = 0x36;
 800529a:	2336      	movs	r3, #54	; 0x36
 800529c:	757b      	strb	r3, [r7, #21]
  data[14] = 0x0F;
 800529e:	230f      	movs	r3, #15
 80052a0:	75bb      	strb	r3, [r7, #22]
  TFT9341_SendCommand(0xE1);
 80052a2:	20e1      	movs	r0, #225	; 0xe1
 80052a4:	f7ff fbc4 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 15);
 80052a8:	f107 0308 	add.w	r3, r7, #8
 80052ac:	210f      	movs	r1, #15
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fbee 	bl	8004a90 <TFT9341_WriteData>
  TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 80052b4:	2011      	movs	r0, #17
 80052b6:	f7ff fbbb 	bl	8004a30 <TFT9341_SendCommand>
  HAL_Delay(120);
 80052ba:	2078      	movs	r0, #120	; 0x78
 80052bc:	f001 f8e2 	bl	8006484 <HAL_Delay>
  //Display ON
  data[0] = TFT9341_ROTATION;
 80052c0:	2348      	movs	r3, #72	; 0x48
 80052c2:	723b      	strb	r3, [r7, #8]
  TFT9341_SendCommand(0x29);
 80052c4:	2029      	movs	r0, #41	; 0x29
 80052c6:	f7ff fbb3 	bl	8004a30 <TFT9341_SendCommand>
  TFT9341_WriteData(data, 1);
 80052ca:	f107 0308 	add.w	r3, r7, #8
 80052ce:	2101      	movs	r1, #1
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff fbdd 	bl	8004a90 <TFT9341_WriteData>
  TFT9341_WIDTH = w_size;
 80052d6:	4a07      	ldr	r2, [pc, #28]	; (80052f4 <TFT9341_ini+0x2a8>)
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	8013      	strh	r3, [r2, #0]
  TFT9341_HEIGHT = h_size;
 80052dc:	4a06      	ldr	r2, [pc, #24]	; (80052f8 <TFT9341_ini+0x2ac>)
 80052de:	88bb      	ldrh	r3, [r7, #4]
 80052e0:	8013      	strh	r3, [r2, #0]
  TFT9341_FontsIni();
 80052e2:	f7ff fe77 	bl	8004fd4 <TFT9341_FontsIni>
}
 80052e6:	bf00      	nop
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40020000 	.word	0x40020000
 80052f4:	20000c30 	.word	0x20000c30
 80052f8:	20000c24 	.word	0x20000c24

080052fc <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8005304:	4a04      	ldr	r2, [pc, #16]	; (8005318 <DS3231_Init+0x1c>)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6013      	str	r3, [r2, #0]
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000c34 	.word	0x20000c34

0800531c <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af02      	add	r7, sp, #8
 8005322:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8005324:	2300      	movs	r3, #0
 8005326:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8005328:	2300      	movs	r3, #0
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	f107 030c 	add.w	r3, r7, #12
 8005330:	2100      	movs	r1, #0
 8005332:	460a      	mov	r2, r1
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	460a      	mov	r2, r1
 8005338:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800533a:	4b35      	ldr	r3, [pc, #212]	; (8005410 <DS3231_GetTime+0xf4>)
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	f107 020f 	add.w	r2, r7, #15
 8005342:	f04f 33ff 	mov.w	r3, #4294967295
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	2301      	movs	r3, #1
 800534a:	21d0      	movs	r1, #208	; 0xd0
 800534c:	f001 fcfc 	bl	8006d48 <HAL_I2C_Master_Transmit>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <DS3231_GetTime+0x3e>
 8005356:	2300      	movs	r3, #0
 8005358:	e055      	b.n	8005406 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800535a:	4b2d      	ldr	r3, [pc, #180]	; (8005410 <DS3231_GetTime+0xf4>)
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	f107 0208 	add.w	r2, r7, #8
 8005362:	f04f 33ff 	mov.w	r3, #4294967295
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	2307      	movs	r3, #7
 800536a:	21d0      	movs	r1, #208	; 0xd0
 800536c:	f001 fdea 	bl	8006f44 <HAL_I2C_Master_Receive>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <DS3231_GetTime+0x5e>
 8005376:	2300      	movs	r3, #0
 8005378:	e045      	b.n	8005406 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 800537a:	7a3b      	ldrb	r3, [r7, #8]
 800537c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005380:	b2db      	uxtb	r3, r3
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f892 	bl	80054ac <B2D>
 8005388:	4603      	mov	r3, r0
 800538a:	461a      	mov	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8005390:	7a7b      	ldrb	r3, [r7, #9]
 8005392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005396:	b2db      	uxtb	r3, r3
 8005398:	4618      	mov	r0, r3
 800539a:	f000 f887 	bl	80054ac <B2D>
 800539e:	4603      	mov	r3, r0
 80053a0:	461a      	mov	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 80053a6:	7abb      	ldrb	r3, [r7, #10]
 80053a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f87c 	bl	80054ac <B2D>
 80053b4:	4603      	mov	r3, r0
 80053b6:	461a      	mov	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 80053bc:	7afb      	ldrb	r3, [r7, #11]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 80053c8:	7b3b      	ldrb	r3, [r7, #12]
 80053ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f86b 	bl	80054ac <B2D>
 80053d6:	4603      	mov	r3, r0
 80053d8:	461a      	mov	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 80053de:	7b7b      	ldrb	r3, [r7, #13]
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 f860 	bl	80054ac <B2D>
 80053ec:	4603      	mov	r3, r0
 80053ee:	461a      	mov	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 80053f4:	7bbb      	ldrb	r3, [r7, #14]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f858 	bl	80054ac <B2D>
 80053fc:	4603      	mov	r3, r0
 80053fe:	461a      	mov	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	701a      	strb	r2, [r3, #0]

  return true;
 8005404:	2301      	movs	r3, #1
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000c34 	.word	0x20000c34

08005414 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af02      	add	r7, sp, #8
 800541a:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 800541c:	2300      	movs	r3, #0
 800541e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	733b      	strb	r3, [r7, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	799b      	ldrb	r3, [r3, #6]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 f859 	bl	80054e0 <D2B>
 800542e:	4603      	mov	r3, r0
 8005430:	737b      	strb	r3, [r7, #13]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	795b      	ldrb	r3, [r3, #5]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f852 	bl	80054e0 <D2B>
 800543c:	4603      	mov	r3, r0
 800543e:	73bb      	strb	r3, [r7, #14]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	791b      	ldrb	r3, [r3, #4]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f84b 	bl	80054e0 <D2B>
 800544a:	4603      	mov	r3, r0
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	78db      	ldrb	r3, [r3, #3]
 8005452:	743b      	strb	r3, [r7, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	789b      	ldrb	r3, [r3, #2]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f841 	bl	80054e0 <D2B>
 800545e:	4603      	mov	r3, r0
 8005460:	747b      	strb	r3, [r7, #17]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	785b      	ldrb	r3, [r3, #1]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f83a 	bl	80054e0 <D2B>
 800546c:	4603      	mov	r3, r0
 800546e:	74bb      	strb	r3, [r7, #18]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f833 	bl	80054e0 <D2B>
 800547a:	4603      	mov	r3, r0
 800547c:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <DS3231_SetTime+0x94>)
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	f107 020c 	add.w	r2, r7, #12
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	2308      	movs	r3, #8
 800548e:	21d0      	movs	r1, #208	; 0xd0
 8005490:	f001 fc5a 	bl	8006d48 <HAL_I2C_Master_Transmit>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <DS3231_SetTime+0x8a>
 800549a:	2300      	movs	r3, #0
 800549c:	e000      	b.n	80054a0 <DS3231_SetTime+0x8c>

  return true;
 800549e:	2301      	movs	r3, #1
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000c34 	.word	0x20000c34

080054ac <B2D>:

  return true;
}

static uint8_t B2D(uint8_t bcd)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	0092      	lsls	r2, r2, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	b2db      	uxtb	r3, r3
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <D2B+0x44>)
 80054ee:	fba2 2303 	umull	r2, r3, r2, r3
 80054f2:	08db      	lsrs	r3, r3, #3
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	b258      	sxtb	r0, r3
 80054fa:	79fa      	ldrb	r2, [r7, #7]
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <D2B+0x44>)
 80054fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005502:	08d9      	lsrs	r1, r3, #3
 8005504:	460b      	mov	r3, r1
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	b25b      	sxtb	r3, r3
 8005512:	4303      	orrs	r3, r0
 8005514:	b25b      	sxtb	r3, r3
 8005516:	b2db      	uxtb	r3, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	cccccccd 	.word	0xcccccccd

08005528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	607b      	str	r3, [r7, #4]
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <HAL_MspInit+0x4c>)
 8005534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005536:	4a0f      	ldr	r2, [pc, #60]	; (8005574 <HAL_MspInit+0x4c>)
 8005538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800553c:	6453      	str	r3, [r2, #68]	; 0x44
 800553e:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <HAL_MspInit+0x4c>)
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005546:	607b      	str	r3, [r7, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4b09      	ldr	r3, [pc, #36]	; (8005574 <HAL_MspInit+0x4c>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	4a08      	ldr	r2, [pc, #32]	; (8005574 <HAL_MspInit+0x4c>)
 8005554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005558:	6413      	str	r3, [r2, #64]	; 0x40
 800555a:	4b06      	ldr	r3, [pc, #24]	; (8005574 <HAL_MspInit+0x4c>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40023800 	.word	0x40023800

08005578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	; 0x28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005580:	f107 0314 	add.w	r3, r7, #20
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	605a      	str	r2, [r3, #4]
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a19      	ldr	r2, [pc, #100]	; (80055fc <HAL_I2C_MspInit+0x84>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d12b      	bne.n	80055f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	4b18      	ldr	r3, [pc, #96]	; (8005600 <HAL_I2C_MspInit+0x88>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	4a17      	ldr	r2, [pc, #92]	; (8005600 <HAL_I2C_MspInit+0x88>)
 80055a4:	f043 0302 	orr.w	r3, r3, #2
 80055a8:	6313      	str	r3, [r2, #48]	; 0x30
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <HAL_I2C_MspInit+0x88>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80055b6:	23c0      	movs	r3, #192	; 0xc0
 80055b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055ba:	2312      	movs	r3, #18
 80055bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055be:	2301      	movs	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c2:	2303      	movs	r3, #3
 80055c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80055c6:	2304      	movs	r3, #4
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ca:	f107 0314 	add.w	r3, r7, #20
 80055ce:	4619      	mov	r1, r3
 80055d0:	480c      	ldr	r0, [pc, #48]	; (8005604 <HAL_I2C_MspInit+0x8c>)
 80055d2:	f001 f88d 	bl	80066f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <HAL_I2C_MspInit+0x88>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	4a08      	ldr	r2, [pc, #32]	; (8005600 <HAL_I2C_MspInit+0x88>)
 80055e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055e4:	6413      	str	r3, [r2, #64]	; 0x40
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_I2C_MspInit+0x88>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80055f2:	bf00      	nop
 80055f4:	3728      	adds	r7, #40	; 0x28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40005400 	.word	0x40005400
 8005600:	40023800 	.word	0x40023800
 8005604:	40020400 	.word	0x40020400

08005608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	; 0x30
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005610:	f107 031c 	add.w	r3, r7, #28
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a32      	ldr	r2, [pc, #200]	; (80056f0 <HAL_SPI_MspInit+0xe8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d12c      	bne.n	8005684 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	4a30      	ldr	r2, [pc, #192]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 8005634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005638:	6453      	str	r3, [r2, #68]	; 0x44
 800563a:	4b2e      	ldr	r3, [pc, #184]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 800563c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	4b2a      	ldr	r3, [pc, #168]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	4a29      	ldr	r2, [pc, #164]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6313      	str	r3, [r2, #48]	; 0x30
 8005656:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005662:	23a0      	movs	r3, #160	; 0xa0
 8005664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005666:	2302      	movs	r3, #2
 8005668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566a:	2300      	movs	r3, #0
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800566e:	2303      	movs	r3, #3
 8005670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005672:	2305      	movs	r3, #5
 8005674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005676:	f107 031c 	add.w	r3, r7, #28
 800567a:	4619      	mov	r1, r3
 800567c:	481e      	ldr	r0, [pc, #120]	; (80056f8 <HAL_SPI_MspInit+0xf0>)
 800567e:	f001 f837 	bl	80066f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005682:	e031      	b.n	80056e8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1c      	ldr	r2, [pc, #112]	; (80056fc <HAL_SPI_MspInit+0xf4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d12c      	bne.n	80056e8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	4a17      	ldr	r2, [pc, #92]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 8005698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800569c:	6413      	str	r3, [r2, #64]	; 0x40
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	4a10      	ldr	r2, [pc, #64]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 80056b4:	f043 0302 	orr.w	r3, r3, #2
 80056b8:	6313      	str	r3, [r2, #48]	; 0x30
 80056ba:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <HAL_SPI_MspInit+0xec>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80056c6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80056ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056cc:	2302      	movs	r3, #2
 80056ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d4:	2303      	movs	r3, #3
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80056d8:	2305      	movs	r3, #5
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056dc:	f107 031c 	add.w	r3, r7, #28
 80056e0:	4619      	mov	r1, r3
 80056e2:	4807      	ldr	r0, [pc, #28]	; (8005700 <HAL_SPI_MspInit+0xf8>)
 80056e4:	f001 f804 	bl	80066f0 <HAL_GPIO_Init>
}
 80056e8:	bf00      	nop
 80056ea:	3730      	adds	r7, #48	; 0x30
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40013000 	.word	0x40013000
 80056f4:	40023800 	.word	0x40023800
 80056f8:	40020000 	.word	0x40020000
 80056fc:	40003800 	.word	0x40003800
 8005700:	40020400 	.word	0x40020400

08005704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005704:	b480      	push	{r7}
 8005706:	b089      	sub	sp, #36	; 0x24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a3d      	ldr	r2, [pc, #244]	; (8005808 <HAL_TIM_Base_MspInit+0x104>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d10e      	bne.n	8005734 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	4b3c      	ldr	r3, [pc, #240]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 800571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571e:	4a3b      	ldr	r2, [pc, #236]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	6453      	str	r3, [r2, #68]	; 0x44
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005732:	e062      	b.n	80057fa <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM2)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d10e      	bne.n	800575c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800573e:	2300      	movs	r3, #0
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	4b32      	ldr	r3, [pc, #200]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	4a31      	ldr	r2, [pc, #196]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 8005748:	f043 0301 	orr.w	r3, r3, #1
 800574c:	6413      	str	r3, [r2, #64]	; 0x40
 800574e:	4b2f      	ldr	r3, [pc, #188]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	69bb      	ldr	r3, [r7, #24]
}
 800575a:	e04e      	b.n	80057fa <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM3)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a2b      	ldr	r2, [pc, #172]	; (8005810 <HAL_TIM_Base_MspInit+0x10c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d10e      	bne.n	8005784 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	4b28      	ldr	r3, [pc, #160]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	4a27      	ldr	r2, [pc, #156]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 8005770:	f043 0302 	orr.w	r3, r3, #2
 8005774:	6413      	str	r3, [r2, #64]	; 0x40
 8005776:	4b25      	ldr	r3, [pc, #148]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	697b      	ldr	r3, [r7, #20]
}
 8005782:	e03a      	b.n	80057fa <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM4)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <HAL_TIM_Base_MspInit+0x110>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d10e      	bne.n	80057ac <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	4b1e      	ldr	r3, [pc, #120]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	4a1d      	ldr	r2, [pc, #116]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 8005798:	f043 0304 	orr.w	r3, r3, #4
 800579c:	6413      	str	r3, [r2, #64]	; 0x40
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	693b      	ldr	r3, [r7, #16]
}
 80057aa:	e026      	b.n	80057fa <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM10)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a19      	ldr	r2, [pc, #100]	; (8005818 <HAL_TIM_Base_MspInit+0x114>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10e      	bne.n	80057d4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	4b14      	ldr	r3, [pc, #80]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 80057c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c4:	6453      	str	r3, [r2, #68]	; 0x44
 80057c6:	4b11      	ldr	r3, [pc, #68]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]
}
 80057d2:	e012      	b.n	80057fa <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM11)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a10      	ldr	r2, [pc, #64]	; (800581c <HAL_TIM_Base_MspInit+0x118>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d10d      	bne.n	80057fa <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 80057e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057ec:	6453      	str	r3, [r2, #68]	; 0x44
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <HAL_TIM_Base_MspInit+0x108>)
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f6:	60bb      	str	r3, [r7, #8]
 80057f8:	68bb      	ldr	r3, [r7, #8]
}
 80057fa:	bf00      	nop
 80057fc:	3724      	adds	r7, #36	; 0x24
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000
 800580c:	40023800 	.word	0x40023800
 8005810:	40000400 	.word	0x40000400
 8005814:	40000800 	.word	0x40000800
 8005818:	40014400 	.word	0x40014400
 800581c:	40014800 	.word	0x40014800

08005820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005828:	f107 030c 	add.w	r3, r7, #12
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a12      	ldr	r2, [pc, #72]	; (8005888 <HAL_TIM_MspPostInit+0x68>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d11e      	bne.n	8005880 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005842:	2300      	movs	r3, #0
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	4b11      	ldr	r3, [pc, #68]	; (800588c <HAL_TIM_MspPostInit+0x6c>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	4a10      	ldr	r2, [pc, #64]	; (800588c <HAL_TIM_MspPostInit+0x6c>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	6313      	str	r3, [r2, #48]	; 0x30
 8005852:	4b0e      	ldr	r3, [pc, #56]	; (800588c <HAL_TIM_MspPostInit+0x6c>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	60bb      	str	r3, [r7, #8]
 800585c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = BLED_Pin;
 800585e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005862:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005864:	2302      	movs	r3, #2
 8005866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800586c:	2300      	movs	r3, #0
 800586e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005870:	2301      	movs	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLED_GPIO_Port, &GPIO_InitStruct);
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	4619      	mov	r1, r3
 800587a:	4805      	ldr	r0, [pc, #20]	; (8005890 <HAL_TIM_MspPostInit+0x70>)
 800587c:	f000 ff38 	bl	80066f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005880:	bf00      	nop
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40010000 	.word	0x40010000
 800588c:	40023800 	.word	0x40023800
 8005890:	40020000 	.word	0x40020000

08005894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005898:	e7fe      	b.n	8005898 <NMI_Handler+0x4>

0800589a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800589a:	b480      	push	{r7}
 800589c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800589e:	e7fe      	b.n	800589e <HardFault_Handler+0x4>

080058a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058a4:	e7fe      	b.n	80058a4 <MemManage_Handler+0x4>

080058a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058a6:	b480      	push	{r7}
 80058a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058aa:	e7fe      	b.n	80058aa <BusFault_Handler+0x4>

080058ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058b0:	e7fe      	b.n	80058b0 <UsageFault_Handler+0x4>

080058b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058b2:	b480      	push	{r7}
 80058b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058b6:	bf00      	nop
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058ce:	b480      	push	{r7}
 80058d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058d2:	bf00      	nop
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058e0:	f000 fdb0 	bl	8006444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058e4:	bf00      	nop
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80058ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80058f0:	f001 f8ce 	bl	8006a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80058f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80058f8:	f001 f8ca 	bl	8006a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80058fc:	bf00      	nop
 80058fe:	bd80      	pop	{r7, pc}

08005900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005908:	4a14      	ldr	r2, [pc, #80]	; (800595c <_sbrk+0x5c>)
 800590a:	4b15      	ldr	r3, [pc, #84]	; (8005960 <_sbrk+0x60>)
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005914:	4b13      	ldr	r3, [pc, #76]	; (8005964 <_sbrk+0x64>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d102      	bne.n	8005922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800591c:	4b11      	ldr	r3, [pc, #68]	; (8005964 <_sbrk+0x64>)
 800591e:	4a12      	ldr	r2, [pc, #72]	; (8005968 <_sbrk+0x68>)
 8005920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005922:	4b10      	ldr	r3, [pc, #64]	; (8005964 <_sbrk+0x64>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	429a      	cmp	r2, r3
 800592e:	d207      	bcs.n	8005940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005930:	f004 f924 	bl	8009b7c <__errno>
 8005934:	4603      	mov	r3, r0
 8005936:	220c      	movs	r2, #12
 8005938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800593a:	f04f 33ff 	mov.w	r3, #4294967295
 800593e:	e009      	b.n	8005954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005940:	4b08      	ldr	r3, [pc, #32]	; (8005964 <_sbrk+0x64>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <_sbrk+0x64>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	4a05      	ldr	r2, [pc, #20]	; (8005964 <_sbrk+0x64>)
 8005950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005952:	68fb      	ldr	r3, [r7, #12]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20020000 	.word	0x20020000
 8005960:	00000400 	.word	0x00000400
 8005964:	200008d4 	.word	0x200008d4
 8005968:	20000c88 	.word	0x20000c88

0800596c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005970:	4b06      	ldr	r3, [pc, #24]	; (800598c <SystemInit+0x20>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	4a05      	ldr	r2, [pc, #20]	; (800598c <SystemInit+0x20>)
 8005978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800597c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005980:	bf00      	nop
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	e000ed00 	.word	0xe000ed00

08005990 <play_tone>:
//extern long tone_old,tone_diff,tone_now;
int tone_time_old;
int tone_time_new;
int tone_time_diff;
void play_tone(char note[3],int length)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
	motor_driver(1);
 800599a:	2001      	movs	r0, #1
 800599c:	f7fb fe8e 	bl	80016bc <motor_driver>
	//plays a single instance of the right frequency
	if(timer_reset==false)
 80059a0:	4b44      	ldr	r3, [pc, #272]	; (8005ab4 <play_tone+0x124>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	f083 0301 	eor.w	r3, r3, #1
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d02b      	beq.n	8005a06 <play_tone+0x76>
	{
		TIM3->CNT = 0;
 80059ae:	4b42      	ldr	r3, [pc, #264]	; (8005ab8 <play_tone+0x128>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24
		for(int i=0;i<48;i++)
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e019      	b.n	80059ee <play_tone+0x5e>
		{
			if(strcmp(note,ladder_text[i])==0)
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4613      	mov	r3, r2
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	4413      	add	r3, r2
 80059c2:	4a3e      	ldr	r2, [pc, #248]	; (8005abc <play_tone+0x12c>)
 80059c4:	4413      	add	r3, r2
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7fa fc09 	bl	80001e0 <strcmp>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <play_tone+0x58>
			{
				curr_tone=ladder[i];
 80059d4:	4a3a      	ldr	r2, [pc, #232]	; (8005ac0 <play_tone+0x130>)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80059dc:	4b39      	ldr	r3, [pc, #228]	; (8005ac4 <play_tone+0x134>)
 80059de:	801a      	strh	r2, [r3, #0]
				match=i;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	b21a      	sxth	r2, r3
 80059e4:	4b38      	ldr	r3, [pc, #224]	; (8005ac8 <play_tone+0x138>)
 80059e6:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<48;i++)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b2f      	cmp	r3, #47	; 0x2f
 80059f2:	dde2      	ble.n	80059ba <play_tone+0x2a>
			}
		}
		timer_reset=true;
 80059f4:	4b2f      	ldr	r3, [pc, #188]	; (8005ab4 <play_tone+0x124>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	701a      	strb	r2, [r3, #0]
		tone_time_old=TIM2->CNT;
 80059fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	461a      	mov	r2, r3
 8005a02:	4b32      	ldr	r3, [pc, #200]	; (8005acc <play_tone+0x13c>)
 8005a04:	601a      	str	r2, [r3, #0]
	}
	//if(timer_reset==true)
	tone_time_new=TIM2->CNT;
 8005a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4b30      	ldr	r3, [pc, #192]	; (8005ad0 <play_tone+0x140>)
 8005a10:	601a      	str	r2, [r3, #0]
	tone_time_diff=0;
 8005a12:	4b30      	ldr	r3, [pc, #192]	; (8005ad4 <play_tone+0x144>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
	while(tone_time_diff<length || count!=0)
 8005a18:	e037      	b.n	8005a8a <play_tone+0xfa>
	{
			tone_time_diff=(tone_time_new-tone_time_old);
 8005a1a:	4b2d      	ldr	r3, [pc, #180]	; (8005ad0 <play_tone+0x140>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b2b      	ldr	r3, [pc, #172]	; (8005acc <play_tone+0x13c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <play_tone+0x144>)
 8005a26:	6013      	str	r3, [r2, #0]
			tone_time_new=TIM2->CNT;
 8005a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4b27      	ldr	r3, [pc, #156]	; (8005ad0 <play_tone+0x140>)
 8005a32:	601a      	str	r2, [r3, #0]
			if(TIM3->CNT>curr_tone) //ladder[match]
 8005a34:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <play_tone+0x128>)
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	4a22      	ldr	r2, [pc, #136]	; (8005ac4 <play_tone+0x134>)
 8005a3a:	8812      	ldrh	r2, [r2, #0]
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d924      	bls.n	8005a8a <play_tone+0xfa>
			{

				HAL_GPIO_TogglePin(STEP_GPIO_Port,STEP_Pin);
 8005a40:	2110      	movs	r1, #16
 8005a42:	4825      	ldr	r0, [pc, #148]	; (8005ad8 <play_tone+0x148>)
 8005a44:	f001 f809 	bl	8006a5a <HAL_GPIO_TogglePin>
				TIM3->CNT = 0;
 8005a48:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <play_tone+0x128>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24
				count++;
 8005a4e:	4b23      	ldr	r3, [pc, #140]	; (8005adc <play_tone+0x14c>)
 8005a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3301      	adds	r3, #1
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	b21a      	sxth	r2, r3
 8005a5c:	4b1f      	ldr	r3, [pc, #124]	; (8005adc <play_tone+0x14c>)
 8005a5e:	801a      	strh	r2, [r3, #0]
				//HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin,GPIO_PIN_SET);

			if(count==2)
 8005a60:	4b1e      	ldr	r3, [pc, #120]	; (8005adc <play_tone+0x14c>)
 8005a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d103      	bne.n	8005a72 <play_tone+0xe2>
			{
				HAL_GPIO_TogglePin(DIR_GPIO_Port,DIR_Pin);
 8005a6a:	2120      	movs	r1, #32
 8005a6c:	481a      	ldr	r0, [pc, #104]	; (8005ad8 <play_tone+0x148>)
 8005a6e:	f000 fff4 	bl	8006a5a <HAL_GPIO_TogglePin>
				//count=0;
			}
			if(count==4)
 8005a72:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <play_tone+0x14c>)
 8005a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d106      	bne.n	8005a8a <play_tone+0xfa>
			{
				count=0;
 8005a7c:	4b17      	ldr	r3, [pc, #92]	; (8005adc <play_tone+0x14c>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_TogglePin(DIR_GPIO_Port,DIR_Pin);
 8005a82:	2120      	movs	r1, #32
 8005a84:	4814      	ldr	r0, [pc, #80]	; (8005ad8 <play_tone+0x148>)
 8005a86:	f000 ffe8 	bl	8006a5a <HAL_GPIO_TogglePin>
	while(tone_time_diff<length || count!=0)
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <play_tone+0x144>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	dcc2      	bgt.n	8005a1a <play_tone+0x8a>
 8005a94:	4b11      	ldr	r3, [pc, #68]	; (8005adc <play_tone+0x14c>)
 8005a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1bd      	bne.n	8005a1a <play_tone+0x8a>
	if(tone_time_new-tone_time_old>length)
	{

		//match=-1;
	}
	timer_reset=false;
 8005a9e:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <play_tone+0x124>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
	motor_driver(0);
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	f7fb fe09 	bl	80016bc <motor_driver>
	return;
 8005aaa:	bf00      	nop


}
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200008d8 	.word	0x200008d8
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	20000788 	.word	0x20000788
 8005ac0:	20000728 	.word	0x20000728
 8005ac4:	20000c3c 	.word	0x20000c3c
 8005ac8:	20000818 	.word	0x20000818
 8005acc:	20000c44 	.word	0x20000c44
 8005ad0:	20000c40 	.word	0x20000c40
 8005ad4:	20000c38 	.word	0x20000c38
 8005ad8:	40020400 	.word	0x40020400
 8005adc:	200008da 	.word	0x200008da

08005ae0 <play_tune>:

void play_tune(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
	play_tone("c4",800);
	play_tone("c3",800);
	play_tone("g3",1600);
	*/

	play_tone("d4",200);
 8005ae4:	21c8      	movs	r1, #200	; 0xc8
 8005ae6:	480b      	ldr	r0, [pc, #44]	; (8005b14 <play_tune+0x34>)
 8005ae8:	f7ff ff52 	bl	8005990 <play_tone>
	play_tone("e4",200);
 8005aec:	21c8      	movs	r1, #200	; 0xc8
 8005aee:	480a      	ldr	r0, [pc, #40]	; (8005b18 <play_tune+0x38>)
 8005af0:	f7ff ff4e 	bl	8005990 <play_tone>
	play_tone("c4",200);
 8005af4:	21c8      	movs	r1, #200	; 0xc8
 8005af6:	4809      	ldr	r0, [pc, #36]	; (8005b1c <play_tune+0x3c>)
 8005af8:	f7ff ff4a 	bl	8005990 <play_tone>
	play_tone("c3",200);
 8005afc:	21c8      	movs	r1, #200	; 0xc8
 8005afe:	4808      	ldr	r0, [pc, #32]	; (8005b20 <play_tune+0x40>)
 8005b00:	f7ff ff46 	bl	8005990 <play_tone>
	play_tone("g3",400);
 8005b04:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005b08:	4806      	ldr	r0, [pc, #24]	; (8005b24 <play_tune+0x44>)
 8005b0a:	f7ff ff41 	bl	8005990 <play_tone>
	play_tone("c4",900);
	play_tone("d4",900);
	play_tone("e4",900);
	play_tone("f4",900);
	*/
}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	0800a8e4 	.word	0x0800a8e4
 8005b18:	0800a8e8 	.word	0x0800a8e8
 8005b1c:	0800a8ec 	.word	0x0800a8ec
 8005b20:	0800a8f0 	.word	0x0800a8f0
 8005b24:	0800a8f4 	.word	0x0800a8f4

08005b28 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	4603      	mov	r3, r0
 8005b30:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8005b32:	f107 020f 	add.w	r2, r7, #15
 8005b36:	1df9      	adds	r1, r7, #7
 8005b38:	2364      	movs	r3, #100	; 0x64
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4804      	ldr	r0, [pc, #16]	; (8005b50 <W25qxx_Spi+0x28>)
 8005b40:	f002 fe88 	bl	8008854 <HAL_SPI_TransmitReceive>
	return ret;	
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000904 	.word	0x20000904

08005b54 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	2300      	movs	r3, #0
 8005b68:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b70:	4813      	ldr	r0, [pc, #76]	; (8005bc0 <W25qxx_ReadID+0x6c>)
 8005b72:	f000 ff59 	bl	8006a28 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8005b76:	209f      	movs	r0, #159	; 0x9f
 8005b78:	f7ff ffd6 	bl	8005b28 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005b7c:	20a5      	movs	r0, #165	; 0xa5
 8005b7e:	f7ff ffd3 	bl	8005b28 <W25qxx_Spi>
 8005b82:	4603      	mov	r3, r0
 8005b84:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005b86:	20a5      	movs	r0, #165	; 0xa5
 8005b88:	f7ff ffce 	bl	8005b28 <W25qxx_Spi>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005b90:	20a5      	movs	r0, #165	; 0xa5
 8005b92:	f7ff ffc9 	bl	8005b28 <W25qxx_Spi>
 8005b96:	4603      	mov	r3, r0
 8005b98:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ba0:	4807      	ldr	r0, [pc, #28]	; (8005bc0 <W25qxx_ReadID+0x6c>)
 8005ba2:	f000 ff41 	bl	8006a28 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	041a      	lsls	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
  return Temp;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40020400 	.word	0x40020400

08005bc4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bd0:	4816      	ldr	r0, [pc, #88]	; (8005c2c <W25qxx_ReadUniqID+0x68>)
 8005bd2:	f000 ff29 	bl	8006a28 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8005bd6:	204b      	movs	r0, #75	; 0x4b
 8005bd8:	f7ff ffa6 	bl	8005b28 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	71fb      	strb	r3, [r7, #7]
 8005be0:	e005      	b.n	8005bee <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005be2:	20a5      	movs	r0, #165	; 0xa5
 8005be4:	f7ff ffa0 	bl	8005b28 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	3301      	adds	r3, #1
 8005bec:	71fb      	strb	r3, [r7, #7]
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d9f6      	bls.n	8005be2 <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	71bb      	strb	r3, [r7, #6]
 8005bf8:	e00b      	b.n	8005c12 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005bfa:	79bc      	ldrb	r4, [r7, #6]
 8005bfc:	20a5      	movs	r0, #165	; 0xa5
 8005bfe:	f7ff ff93 	bl	8005b28 <W25qxx_Spi>
 8005c02:	4603      	mov	r3, r0
 8005c04:	461a      	mov	r2, r3
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <W25qxx_ReadUniqID+0x6c>)
 8005c08:	4423      	add	r3, r4
 8005c0a:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8005c0c:	79bb      	ldrb	r3, [r7, #6]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	71bb      	strb	r3, [r7, #6]
 8005c12:	79bb      	ldrb	r3, [r7, #6]
 8005c14:	2b07      	cmp	r3, #7
 8005c16:	d9f0      	bls.n	8005bfa <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c1e:	4803      	ldr	r0, [pc, #12]	; (8005c2c <W25qxx_ReadUniqID+0x68>)
 8005c20:	f000 ff02 	bl	8006a28 <HAL_GPIO_WritePin>
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd90      	pop	{r4, r7, pc}
 8005c2c:	40020400 	.word	0x40020400
 8005c30:	20000c48 	.word	0x20000c48

08005c34 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c3e:	4808      	ldr	r0, [pc, #32]	; (8005c60 <W25qxx_WriteEnable+0x2c>)
 8005c40:	f000 fef2 	bl	8006a28 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8005c44:	2006      	movs	r0, #6
 8005c46:	f7ff ff6f 	bl	8005b28 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c50:	4803      	ldr	r0, [pc, #12]	; (8005c60 <W25qxx_WriteEnable+0x2c>)
 8005c52:	f000 fee9 	bl	8006a28 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8005c56:	2001      	movs	r0, #1
 8005c58:	f000 fc14 	bl	8006484 <HAL_Delay>
}
 8005c5c:	bf00      	nop
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40020400 	.word	0x40020400

08005c64 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005c72:	2200      	movs	r2, #0
 8005c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c78:	481c      	ldr	r0, [pc, #112]	; (8005cec <W25qxx_ReadStatusRegister+0x88>)
 8005c7a:	f000 fed5 	bl	8006a28 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d10c      	bne.n	8005c9e <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8005c84:	2005      	movs	r0, #5
 8005c86:	f7ff ff4f 	bl	8005b28 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8005c8a:	20a5      	movs	r0, #165	; 0xa5
 8005c8c:	f7ff ff4c 	bl	8005b28 <W25qxx_Spi>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8005c94:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <W25qxx_ReadStatusRegister+0x8c>)
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8005c9c:	e01b      	b.n	8005cd6 <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d10c      	bne.n	8005cbe <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8005ca4:	2035      	movs	r0, #53	; 0x35
 8005ca6:	f7ff ff3f 	bl	8005b28 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8005caa:	20a5      	movs	r0, #165	; 0xa5
 8005cac:	f7ff ff3c 	bl	8005b28 <W25qxx_Spi>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8005cb4:	4a0e      	ldr	r2, [pc, #56]	; (8005cf0 <W25qxx_ReadStatusRegister+0x8c>)
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8005cbc:	e00b      	b.n	8005cd6 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8005cbe:	2015      	movs	r0, #21
 8005cc0:	f7ff ff32 	bl	8005b28 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8005cc4:	20a5      	movs	r0, #165	; 0xa5
 8005cc6:	f7ff ff2f 	bl	8005b28 <W25qxx_Spi>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8005cce:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <W25qxx_ReadStatusRegister+0x8c>)
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cdc:	4803      	ldr	r0, [pc, #12]	; (8005cec <W25qxx_ReadStatusRegister+0x88>)
 8005cde:	f000 fea3 	bl	8006a28 <HAL_GPIO_WritePin>
	return status;
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40020400 	.word	0x40020400
 8005cf0:	20000c48 	.word	0x20000c48

08005cf4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	f000 fbc3 	bl	8006484 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d04:	480f      	ldr	r0, [pc, #60]	; (8005d44 <W25qxx_WaitForWriteEnd+0x50>)
 8005d06:	f000 fe8f 	bl	8006a28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8005d0a:	2005      	movs	r0, #5
 8005d0c:	f7ff ff0c 	bl	8005b28 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005d10:	20a5      	movs	r0, #165	; 0xa5
 8005d12:	f7ff ff09 	bl	8005b28 <W25qxx_Spi>
 8005d16:	4603      	mov	r3, r0
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <W25qxx_WaitForWriteEnd+0x54>)
 8005d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8005d20:	2001      	movs	r0, #1
 8005d22:	f000 fbaf 	bl	8006484 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8005d26:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <W25qxx_WaitForWriteEnd+0x54>)
 8005d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1ed      	bne.n	8005d10 <W25qxx_WaitForWriteEnd+0x1c>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005d34:	2201      	movs	r2, #1
 8005d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d3a:	4802      	ldr	r0, [pc, #8]	; (8005d44 <W25qxx_WaitForWriteEnd+0x50>)
 8005d3c:	f000 fe74 	bl	8006a28 <HAL_GPIO_WritePin>
}
 8005d40:	bf00      	nop
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40020400 	.word	0x40020400
 8005d48:	20000c48 	.word	0x20000c48

08005d4c <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
  w25qxx.Lock=1;	
 8005d52:	4b65      	ldr	r3, [pc, #404]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  while(HAL_GetTick()<100)
 8005d5a:	e002      	b.n	8005d62 <W25qxx_Init+0x16>
    W25qxx_Delay(1);
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	f000 fb91 	bl	8006484 <HAL_Delay>
  while(HAL_GetTick()<100)
 8005d62:	f000 fb83 	bl	800646c <HAL_GetTick>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b63      	cmp	r3, #99	; 0x63
 8005d6a:	d9f7      	bls.n	8005d5c <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d72:	485e      	ldr	r0, [pc, #376]	; (8005eec <W25qxx_Init+0x1a0>)
 8005d74:	f000 fe58 	bl	8006a28 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8005d78:	2064      	movs	r0, #100	; 0x64
 8005d7a:	f000 fb83 	bl	8006484 <HAL_Delay>
  uint32_t	id;
  #if (_W25QXX_DEBUG==1)
  printf("w25qxx Init Begin...\r\n");
  #endif
  id=W25qxx_ReadID();
 8005d7e:	f7ff fee9 	bl	8005b54 <W25qxx_ReadID>
 8005d82:	6078      	str	r0, [r7, #4]
	
  #if (_W25QXX_DEBUG==1)
  printf("w25qxx ID:0x%X\r\n", id);
  #endif
  switch(id & 0x000000FF)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	3b11      	subs	r3, #17
 8005d8a:	2b0f      	cmp	r3, #15
 8005d8c:	d86b      	bhi.n	8005e66 <W25qxx_Init+0x11a>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <W25qxx_Init+0x48>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005e59 	.word	0x08005e59
 8005d98:	08005e4b 	.word	0x08005e4b
 8005d9c:	08005e3d 	.word	0x08005e3d
 8005da0:	08005e2f 	.word	0x08005e2f
 8005da4:	08005e21 	.word	0x08005e21
 8005da8:	08005e13 	.word	0x08005e13
 8005dac:	08005e05 	.word	0x08005e05
 8005db0:	08005df5 	.word	0x08005df5
 8005db4:	08005de5 	.word	0x08005de5
 8005db8:	08005e67 	.word	0x08005e67
 8005dbc:	08005e67 	.word	0x08005e67
 8005dc0:	08005e67 	.word	0x08005e67
 8005dc4:	08005e67 	.word	0x08005e67
 8005dc8:	08005e67 	.word	0x08005e67
 8005dcc:	08005e67 	.word	0x08005e67
 8005dd0:	08005dd5 	.word	0x08005dd5
  {
		case 0x20:	// 	w25q512
			w25qxx.ID=W25Q512;
 8005dd4:	4b44      	ldr	r3, [pc, #272]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005dd6:	2205      	movs	r2, #5
 8005dd8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8005dda:	4b43      	ldr	r3, [pc, #268]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005de0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 8005de2:	e046      	b.n	8005e72 <W25qxx_Init+0x126>
		case 0x19:	// 	w25q256
			w25qxx.ID=W25Q256;
 8005de4:	4b40      	ldr	r3, [pc, #256]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005de6:	2204      	movs	r2, #4
 8005de8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8005dea:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 8005df2:	e03e      	b.n	8005e72 <W25qxx_Init+0x126>
		case 0x18:	// 	w25q128
			w25qxx.ID=W25Q128;
 8005df4:	4b3c      	ldr	r3, [pc, #240]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005df6:	2203      	movs	r2, #3
 8005df8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8005dfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e00:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 8005e02:	e036      	b.n	8005e72 <W25qxx_Init+0x126>
		case 0x17:	//	w25q64
			w25qxx.ID=W25Q64;
 8005e04:	4b38      	ldr	r3, [pc, #224]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e06:	2202      	movs	r2, #2
 8005e08:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e0c:	2280      	movs	r2, #128	; 0x80
 8005e0e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8005e10:	e02f      	b.n	8005e72 <W25qxx_Init+0x126>
		case 0x16:	//	w25q32
			w25qxx.ID=W25Q32;
 8005e12:	4b35      	ldr	r3, [pc, #212]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8005e18:	4b33      	ldr	r3, [pc, #204]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e1a:	2240      	movs	r2, #64	; 0x40
 8005e1c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8005e1e:	e028      	b.n	8005e72 <W25qxx_Init+0x126>
		case 0x15:	//	w25q16
			w25qxx.ID=W25Q16;
 8005e20:	4b31      	ldr	r3, [pc, #196]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e22:	2204      	movs	r2, #4
 8005e24:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8005e26:	4b30      	ldr	r3, [pc, #192]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e28:	2220      	movs	r2, #32
 8005e2a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8005e2c:	e021      	b.n	8005e72 <W25qxx_Init+0x126>
		case 0x14:	//	w25q80
			w25qxx.ID=W25Q80;
 8005e2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e30:	2203      	movs	r2, #3
 8005e32:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8005e34:	4b2c      	ldr	r3, [pc, #176]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e36:	2210      	movs	r2, #16
 8005e38:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8005e3a:	e01a      	b.n	8005e72 <W25qxx_Init+0x126>
		case 0x13:	//	w25q40
			w25qxx.ID=W25Q40;
 8005e3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e3e:	2202      	movs	r2, #2
 8005e40:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8005e42:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e44:	2208      	movs	r2, #8
 8005e46:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8005e48:	e013      	b.n	8005e72 <W25qxx_Init+0x126>
		case 0x12:	//	w25q20
			w25qxx.ID=W25Q20;
 8005e4a:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8005e50:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e52:	2204      	movs	r2, #4
 8005e54:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8005e56:	e00c      	b.n	8005e72 <W25qxx_Init+0x126>
		case 0x11:	//	w25q10
			w25qxx.ID=W25Q10;
 8005e58:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8005e5e:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e60:	2202      	movs	r2, #2
 8005e62:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 8005e64:	e005      	b.n	8005e72 <W25qxx_Init+0x126>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 8005e66:	4b20      	ldr	r3, [pc, #128]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e036      	b.n	8005ee0 <W25qxx_Init+0x194>
				
	}		
	w25qxx.PageSize=256;
 8005e72:	4b1d      	ldr	r3, [pc, #116]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e78:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e80:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8005e82:	4b19      	ldr	r3, [pc, #100]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e8a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8005e8c:	4b16      	ldr	r3, [pc, #88]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e92:	6912      	ldr	r2, [r2, #16]
 8005e94:	fb02 f303 	mul.w	r3, r2, r3
 8005e98:	4a13      	ldr	r2, [pc, #76]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005e9a:	8952      	ldrh	r2, [r2, #10]
 8005e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ea0:	4a11      	ldr	r2, [pc, #68]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005ea2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8005ea4:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	4a0f      	ldr	r2, [pc, #60]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005eac:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8005eae:	4b0e      	ldr	r3, [pc, #56]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	4a0d      	ldr	r2, [pc, #52]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005eb4:	6912      	ldr	r2, [r2, #16]
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	0a9b      	lsrs	r3, r3, #10
 8005ebc:	4a0a      	ldr	r2, [pc, #40]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005ebe:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8005ec0:	f7ff fe80 	bl	8005bc4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	f7ff fecd 	bl	8005c64 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8005eca:	2002      	movs	r0, #2
 8005ecc:	f7ff feca 	bl	8005c64 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8005ed0:	2003      	movs	r0, #3
 8005ed2:	f7ff fec7 	bl	8005c64 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8005ed6:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <W25qxx_Init+0x19c>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8005ede:	2301      	movs	r3, #1
}	
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	20000c48 	.word	0x20000c48
 8005eec:	40020400 	.word	0x40020400

08005ef0 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;	
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8005ef8:	e002      	b.n	8005f00 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8005efa:	2001      	movs	r0, #1
 8005efc:	f000 fac2 	bl	8006484 <HAL_Delay>
	while(w25qxx.Lock==1)
 8005f00:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <W25qxx_EraseSector+0xa4>)
 8005f02:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d0f7      	beq.n	8005efa <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 8005f0a:	4b22      	ldr	r3, [pc, #136]	; (8005f94 <W25qxx_EraseSector+0xa4>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 8005f12:	f7ff feef 	bl	8005cf4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8005f16:	4b1f      	ldr	r3, [pc, #124]	; (8005f94 <W25qxx_EraseSector+0xa4>)
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	fb02 f303 	mul.w	r3, r2, r3
 8005f20:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8005f22:	f7ff fe87 	bl	8005c34 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005f26:	2200      	movs	r2, #0
 8005f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f2c:	481a      	ldr	r0, [pc, #104]	; (8005f98 <W25qxx_EraseSector+0xa8>)
 8005f2e:	f000 fd7b 	bl	8006a28 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 8005f32:	2020      	movs	r0, #32
 8005f34:	f7ff fdf8 	bl	8005b28 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8005f38:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <W25qxx_EraseSector+0xa4>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d905      	bls.n	8005f4c <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	0e1b      	lsrs	r3, r3, #24
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fdee 	bl	8005b28 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fde8 	bl	8005b28 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fde2 	bl	8005b28 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff fddd 	bl	8005b28 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f74:	4808      	ldr	r0, [pc, #32]	; (8005f98 <W25qxx_EraseSector+0xa8>)
 8005f76:	f000 fd57 	bl	8006a28 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8005f7a:	f7ff febb 	bl	8005cf4 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f000 fa80 	bl	8006484 <HAL_Delay>
	w25qxx.Lock=0;
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <W25qxx_EraseSector+0xa4>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005f8c:	bf00      	nop
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000c48 	.word	0x20000c48
 8005f98:	40020400 	.word	0x40020400

08005f9c <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 8005fa4:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <W25qxx_SectorToPage+0x28>)
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	fb02 f303 	mul.w	r3, r2, r3
 8005fae:	4a05      	ldr	r2, [pc, #20]	; (8005fc4 <W25qxx_SectorToPage+0x28>)
 8005fb0:	8952      	ldrh	r2, [r2, #10]
 8005fb2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000c48 	.word	0x20000c48

08005fc8 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8005fd6:	e002      	b.n	8005fde <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8005fd8:	2001      	movs	r0, #1
 8005fda:	f000 fa53 	bl	8006484 <HAL_Delay>
	while(w25qxx.Lock==1)
 8005fde:	4b38      	ldr	r3, [pc, #224]	; (80060c0 <W25qxx_WritePage+0xf8>)
 8005fe0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d0f7      	beq.n	8005fd8 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8005fe8:	4b35      	ldr	r3, [pc, #212]	; (80060c0 <W25qxx_WritePage+0xf8>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	4a32      	ldr	r2, [pc, #200]	; (80060c0 <W25qxx_WritePage+0xf8>)
 8005ff8:	8952      	ldrh	r2, [r2, #10]
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d802      	bhi.n	8006004 <W25qxx_WritePage+0x3c>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8006004:	4b2e      	ldr	r3, [pc, #184]	; (80060c0 <W25qxx_WritePage+0xf8>)
 8006006:	895b      	ldrh	r3, [r3, #10]
 8006008:	461a      	mov	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	4413      	add	r3, r2
 8006016:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <W25qxx_WritePage+0xf8>)
 8006018:	8952      	ldrh	r2, [r2, #10]
 800601a:	4293      	cmp	r3, r2
 800601c:	d905      	bls.n	800602a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 800601e:	4b28      	ldr	r3, [pc, #160]	; (80060c0 <W25qxx_WritePage+0xf8>)
 8006020:	895b      	ldrh	r3, [r3, #10]
 8006022:	461a      	mov	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 800602a:	f7ff fe63 	bl	8005cf4 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 800602e:	f7ff fe01 	bl	8005c34 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8006032:	2200      	movs	r2, #0
 8006034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006038:	4822      	ldr	r0, [pc, #136]	; (80060c4 <W25qxx_WritePage+0xfc>)
 800603a:	f000 fcf5 	bl	8006a28 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 800603e:	2002      	movs	r0, #2
 8006040:	f7ff fd72 	bl	8005b28 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8006044:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <W25qxx_WritePage+0xf8>)
 8006046:	895b      	ldrh	r3, [r3, #10]
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	fb03 f302 	mul.w	r3, r3, r2
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	4413      	add	r3, r2
 8006054:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8006056:	4b1a      	ldr	r3, [pc, #104]	; (80060c0 <W25qxx_WritePage+0xf8>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d905      	bls.n	800606a <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	0e1b      	lsrs	r3, r3, #24
 8006062:	b2db      	uxtb	r3, r3
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff fd5f 	bl	8005b28 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	0c1b      	lsrs	r3, r3, #16
 800606e:	b2db      	uxtb	r3, r3
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff fd59 	bl	8005b28 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	0a1b      	lsrs	r3, r3, #8
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff fd53 	bl	8005b28 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fd4e 	bl	8005b28 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	b29a      	uxth	r2, r3
 8006090:	2364      	movs	r3, #100	; 0x64
 8006092:	68f9      	ldr	r1, [r7, #12]
 8006094:	480c      	ldr	r0, [pc, #48]	; (80060c8 <W25qxx_WritePage+0x100>)
 8006096:	f002 f990 	bl	80083ba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800609a:	2201      	movs	r2, #1
 800609c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060a0:	4808      	ldr	r0, [pc, #32]	; (80060c4 <W25qxx_WritePage+0xfc>)
 80060a2:	f000 fcc1 	bl	8006a28 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80060a6:	f7ff fe25 	bl	8005cf4 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 80060aa:	2001      	movs	r0, #1
 80060ac:	f000 f9ea 	bl	8006484 <HAL_Delay>
	w25qxx.Lock=0;
 80060b0:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <W25qxx_WritePage+0xf8>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000c48 	.word	0x20000c48
 80060c4:	40020400 	.word	0x40020400
 80060c8:	20000904 	.word	0x20000904

080060cc <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 80060da:	4b2c      	ldr	r3, [pc, #176]	; (800618c <W25qxx_WriteSector+0xc0>)
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d802      	bhi.n	80060ea <W25qxx_WriteSector+0x1e>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 80060ea:	4b28      	ldr	r3, [pc, #160]	; (800618c <W25qxx_WriteSector+0xc0>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 80060f0:	4b26      	ldr	r3, [pc, #152]	; (800618c <W25qxx_WriteSector+0xc0>)
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d243      	bcs.n	8006182 <W25qxx_WriteSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	441a      	add	r2, r3
 8006100:	4b22      	ldr	r3, [pc, #136]	; (800618c <W25qxx_WriteSector+0xc0>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	429a      	cmp	r2, r3
 8006106:	d905      	bls.n	8006114 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 8006108:	4b20      	ldr	r3, [pc, #128]	; (800618c <W25qxx_WriteSector+0xc0>)
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	e001      	b.n	8006118 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8006118:	68b8      	ldr	r0, [r7, #8]
 800611a:	f7ff ff3f 	bl	8005f9c <W25qxx_SectorToPage>
 800611e:	4602      	mov	r2, r0
 8006120:	4b1a      	ldr	r3, [pc, #104]	; (800618c <W25qxx_WriteSector+0xc0>)
 8006122:	895b      	ldrh	r3, [r3, #10]
 8006124:	4619      	mov	r1, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	fbb3 f3f1 	udiv	r3, r3, r1
 800612c:	4413      	add	r3, r2
 800612e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8006130:	4b16      	ldr	r3, [pc, #88]	; (800618c <W25qxx_WriteSector+0xc0>)
 8006132:	895b      	ldrh	r3, [r3, #10]
 8006134:	461a      	mov	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	fbb3 f1f2 	udiv	r1, r3, r2
 800613c:	fb02 f201 	mul.w	r2, r2, r1
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	69f9      	ldr	r1, [r7, #28]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff ff3c 	bl	8005fc8 <W25qxx_WritePage>
		StartPage++;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	3301      	adds	r3, #1
 8006154:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <W25qxx_WriteSector+0xc0>)
 8006158:	895b      	ldrh	r3, [r3, #10]
 800615a:	461a      	mov	r2, r3
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1a9a      	subs	r2, r3, r2
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	4413      	add	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8006166:	4b09      	ldr	r3, [pc, #36]	; (800618c <W25qxx_WriteSector+0xc0>)
 8006168:	895b      	ldrh	r3, [r3, #10]
 800616a:	461a      	mov	r2, r3
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	dce1      	bgt.n	8006144 <W25qxx_WriteSector+0x78>
 8006180:	e000      	b.n	8006184 <W25qxx_WriteSector+0xb8>
		return;
 8006182:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000c48 	.word	0x20000c48

08006190 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 800619e:	e002      	b.n	80061a6 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80061a0:	2001      	movs	r0, #1
 80061a2:	f000 f96f 	bl	8006484 <HAL_Delay>
	while(w25qxx.Lock==1)
 80061a6:	4b35      	ldr	r3, [pc, #212]	; (800627c <W25qxx_ReadPage+0xec>)
 80061a8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d0f7      	beq.n	80061a0 <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 80061b0:	4b32      	ldr	r3, [pc, #200]	; (800627c <W25qxx_ReadPage+0xec>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 80061b8:	4b30      	ldr	r3, [pc, #192]	; (800627c <W25qxx_ReadPage+0xec>)
 80061ba:	895b      	ldrh	r3, [r3, #10]
 80061bc:	461a      	mov	r2, r3
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d802      	bhi.n	80061ca <W25qxx_ReadPage+0x3a>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 80061ca:	4b2c      	ldr	r3, [pc, #176]	; (800627c <W25qxx_ReadPage+0xec>)
 80061cc:	895b      	ldrh	r3, [r3, #10]
 80061ce:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	4413      	add	r3, r2
 80061d6:	4a29      	ldr	r2, [pc, #164]	; (800627c <W25qxx_ReadPage+0xec>)
 80061d8:	8952      	ldrh	r2, [r2, #10]
 80061da:	4293      	cmp	r3, r2
 80061dc:	d905      	bls.n	80061ea <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80061de:	4b27      	ldr	r3, [pc, #156]	; (800627c <W25qxx_ReadPage+0xec>)
 80061e0:	895b      	ldrh	r3, [r3, #10]
 80061e2:	461a      	mov	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 80061ea:	4b24      	ldr	r3, [pc, #144]	; (800627c <W25qxx_ReadPage+0xec>)
 80061ec:	895b      	ldrh	r3, [r3, #10]
 80061ee:	461a      	mov	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	fb03 f302 	mul.w	r3, r3, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	4413      	add	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80061fc:	2200      	movs	r2, #0
 80061fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006202:	481f      	ldr	r0, [pc, #124]	; (8006280 <W25qxx_ReadPage+0xf0>)
 8006204:	f000 fc10 	bl	8006a28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8006208:	200b      	movs	r0, #11
 800620a:	f7ff fc8d 	bl	8005b28 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 800620e:	4b1b      	ldr	r3, [pc, #108]	; (800627c <W25qxx_ReadPage+0xec>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b03      	cmp	r3, #3
 8006214:	d905      	bls.n	8006222 <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	0e1b      	lsrs	r3, r3, #24
 800621a:	b2db      	uxtb	r3, r3
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fc83 	bl	8005b28 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	0c1b      	lsrs	r3, r3, #16
 8006226:	b2db      	uxtb	r3, r3
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fc7d 	bl	8005b28 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	0a1b      	lsrs	r3, r3, #8
 8006232:	b2db      	uxtb	r3, r3
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fc77 	bl	8005b28 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fc72 	bl	8005b28 <W25qxx_Spi>
	W25qxx_Spi(0);
 8006244:	2000      	movs	r0, #0
 8006246:	f7ff fc6f 	bl	8005b28 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);	
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	b29a      	uxth	r2, r3
 800624e:	2364      	movs	r3, #100	; 0x64
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	480c      	ldr	r0, [pc, #48]	; (8006284 <W25qxx_ReadPage+0xf4>)
 8006254:	f002 f9ed 	bl	8008632 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006258:	2201      	movs	r2, #1
 800625a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800625e:	4808      	ldr	r0, [pc, #32]	; (8006280 <W25qxx_ReadPage+0xf0>)
 8006260:	f000 fbe2 	bl	8006a28 <HAL_GPIO_WritePin>
	}	
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8006264:	2001      	movs	r0, #1
 8006266:	f000 f90d 	bl	8006484 <HAL_Delay>
	w25qxx.Lock=0;
 800626a:	4b04      	ldr	r3, [pc, #16]	; (800627c <W25qxx_ReadPage+0xec>)
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000c48 	.word	0x20000c48
 8006280:	40020400 	.word	0x40020400
 8006284:	20000904 	.word	0x20000904

08006288 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{	
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 8006296:	4b2c      	ldr	r3, [pc, #176]	; (8006348 <W25qxx_ReadSector+0xc0>)
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d802      	bhi.n	80062a6 <W25qxx_ReadSector+0x1e>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 80062a6:	4b28      	ldr	r3, [pc, #160]	; (8006348 <W25qxx_ReadSector+0xc0>)
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 80062ac:	4b26      	ldr	r3, [pc, #152]	; (8006348 <W25qxx_ReadSector+0xc0>)
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d243      	bcs.n	800633e <W25qxx_ReadSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	441a      	add	r2, r3
 80062bc:	4b22      	ldr	r3, [pc, #136]	; (8006348 <W25qxx_ReadSector+0xc0>)
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d905      	bls.n	80062d0 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 80062c4:	4b20      	ldr	r3, [pc, #128]	; (8006348 <W25qxx_ReadSector+0xc0>)
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	e001      	b.n	80062d4 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;	
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 80062d4:	68b8      	ldr	r0, [r7, #8]
 80062d6:	f7ff fe61 	bl	8005f9c <W25qxx_SectorToPage>
 80062da:	4602      	mov	r2, r0
 80062dc:	4b1a      	ldr	r3, [pc, #104]	; (8006348 <W25qxx_ReadSector+0xc0>)
 80062de:	895b      	ldrh	r3, [r3, #10]
 80062e0:	4619      	mov	r1, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80062e8:	4413      	add	r3, r2
 80062ea:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 80062ec:	4b16      	ldr	r3, [pc, #88]	; (8006348 <W25qxx_ReadSector+0xc0>)
 80062ee:	895b      	ldrh	r3, [r3, #10]
 80062f0:	461a      	mov	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80062f8:	fb02 f201 	mul.w	r2, r2, r1
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	69f9      	ldr	r1, [r7, #28]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff ff42 	bl	8006190 <W25qxx_ReadPage>
		StartPage++;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	3301      	adds	r3, #1
 8006310:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8006312:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <W25qxx_ReadSector+0xc0>)
 8006314:	895b      	ldrh	r3, [r3, #10]
 8006316:	461a      	mov	r2, r3
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	1a9a      	subs	r2, r3, r2
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	4413      	add	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <W25qxx_ReadSector+0xc0>)
 8006324:	895b      	ldrh	r3, [r3, #10]
 8006326:	461a      	mov	r2, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	2b00      	cmp	r3, #0
 800633a:	dce1      	bgt.n	8006300 <W25qxx_ReadSector+0x78>
 800633c:	e000      	b.n	8006340 <W25qxx_ReadSector+0xb8>
		return;
 800633e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000c48 	.word	0x20000c48

0800634c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800634c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006350:	480d      	ldr	r0, [pc, #52]	; (8006388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006352:	490e      	ldr	r1, [pc, #56]	; (800638c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006354:	4a0e      	ldr	r2, [pc, #56]	; (8006390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006358:	e002      	b.n	8006360 <LoopCopyDataInit>

0800635a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800635a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800635c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800635e:	3304      	adds	r3, #4

08006360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006364:	d3f9      	bcc.n	800635a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006366:	4a0b      	ldr	r2, [pc, #44]	; (8006394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006368:	4c0b      	ldr	r4, [pc, #44]	; (8006398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800636a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800636c:	e001      	b.n	8006372 <LoopFillZerobss>

0800636e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800636e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006370:	3204      	adds	r2, #4

08006372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006374:	d3fb      	bcc.n	800636e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006376:	f7ff faf9 	bl	800596c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800637a:	f003 fc05 	bl	8009b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800637e:	f7fd fc67 	bl	8003c50 <main>
  bx  lr    
 8006382:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800638c:	20000888 	.word	0x20000888
  ldr r2, =_sidata
 8006390:	0800e630 	.word	0x0800e630
  ldr r2, =_sbss
 8006394:	20000888 	.word	0x20000888
  ldr r4, =_ebss
 8006398:	20000c84 	.word	0x20000c84

0800639c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800639c:	e7fe      	b.n	800639c <ADC_IRQHandler>
	...

080063a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <HAL_Init+0x40>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a0d      	ldr	r2, [pc, #52]	; (80063e0 <HAL_Init+0x40>)
 80063aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_Init+0x40>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a0a      	ldr	r2, [pc, #40]	; (80063e0 <HAL_Init+0x40>)
 80063b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063bc:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <HAL_Init+0x40>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a07      	ldr	r2, [pc, #28]	; (80063e0 <HAL_Init+0x40>)
 80063c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063c8:	2003      	movs	r0, #3
 80063ca:	f000 f94f 	bl	800666c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063ce:	2000      	movs	r0, #0
 80063d0:	f000 f808 	bl	80063e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063d4:	f7ff f8a8 	bl	8005528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40023c00 	.word	0x40023c00

080063e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063ec:	4b12      	ldr	r3, [pc, #72]	; (8006438 <HAL_InitTick+0x54>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4b12      	ldr	r3, [pc, #72]	; (800643c <HAL_InitTick+0x58>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	4619      	mov	r1, r3
 80063f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80063fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f967 	bl	80066d6 <HAL_SYSTICK_Config>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e00e      	b.n	8006430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b0f      	cmp	r3, #15
 8006416:	d80a      	bhi.n	800642e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006418:	2200      	movs	r2, #0
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	f000 f92f 	bl	8006682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006424:	4a06      	ldr	r2, [pc, #24]	; (8006440 <HAL_InitTick+0x5c>)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
}
 8006430:	4618      	mov	r0, r3
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20000724 	.word	0x20000724
 800643c:	20000820 	.word	0x20000820
 8006440:	2000081c 	.word	0x2000081c

08006444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <HAL_IncTick+0x20>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	4b06      	ldr	r3, [pc, #24]	; (8006468 <HAL_IncTick+0x24>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4413      	add	r3, r2
 8006454:	4a04      	ldr	r2, [pc, #16]	; (8006468 <HAL_IncTick+0x24>)
 8006456:	6013      	str	r3, [r2, #0]
}
 8006458:	bf00      	nop
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20000820 	.word	0x20000820
 8006468:	20000c70 	.word	0x20000c70

0800646c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
  return uwTick;
 8006470:	4b03      	ldr	r3, [pc, #12]	; (8006480 <HAL_GetTick+0x14>)
 8006472:	681b      	ldr	r3, [r3, #0]
}
 8006474:	4618      	mov	r0, r3
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000c70 	.word	0x20000c70

08006484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800648c:	f7ff ffee 	bl	800646c <HAL_GetTick>
 8006490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649c:	d005      	beq.n	80064aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <HAL_Delay+0x44>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80064aa:	bf00      	nop
 80064ac:	f7ff ffde 	bl	800646c <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d8f7      	bhi.n	80064ac <HAL_Delay+0x28>
  {
  }
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000820 	.word	0x20000820

080064cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064dc:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <__NVIC_SetPriorityGrouping+0x44>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064e8:	4013      	ands	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064fe:	4a04      	ldr	r2, [pc, #16]	; (8006510 <__NVIC_SetPriorityGrouping+0x44>)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	60d3      	str	r3, [r2, #12]
}
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	e000ed00 	.word	0xe000ed00

08006514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006518:	4b04      	ldr	r3, [pc, #16]	; (800652c <__NVIC_GetPriorityGrouping+0x18>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	0a1b      	lsrs	r3, r3, #8
 800651e:	f003 0307 	and.w	r3, r3, #7
}
 8006522:	4618      	mov	r0, r3
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	e000ed00 	.word	0xe000ed00

08006530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	4603      	mov	r3, r0
 8006538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800653a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653e:	2b00      	cmp	r3, #0
 8006540:	db0b      	blt.n	800655a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	f003 021f 	and.w	r2, r3, #31
 8006548:	4907      	ldr	r1, [pc, #28]	; (8006568 <__NVIC_EnableIRQ+0x38>)
 800654a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	2001      	movs	r0, #1
 8006552:	fa00 f202 	lsl.w	r2, r0, r2
 8006556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	e000e100 	.word	0xe000e100

0800656c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	4603      	mov	r3, r0
 8006574:	6039      	str	r1, [r7, #0]
 8006576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800657c:	2b00      	cmp	r3, #0
 800657e:	db0a      	blt.n	8006596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	490c      	ldr	r1, [pc, #48]	; (80065b8 <__NVIC_SetPriority+0x4c>)
 8006586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658a:	0112      	lsls	r2, r2, #4
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	440b      	add	r3, r1
 8006590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006594:	e00a      	b.n	80065ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4908      	ldr	r1, [pc, #32]	; (80065bc <__NVIC_SetPriority+0x50>)
 800659c:	79fb      	ldrb	r3, [r7, #7]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	3b04      	subs	r3, #4
 80065a4:	0112      	lsls	r2, r2, #4
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	440b      	add	r3, r1
 80065aa:	761a      	strb	r2, [r3, #24]
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	e000e100 	.word	0xe000e100
 80065bc:	e000ed00 	.word	0xe000ed00

080065c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b089      	sub	sp, #36	; 0x24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f1c3 0307 	rsb	r3, r3, #7
 80065da:	2b04      	cmp	r3, #4
 80065dc:	bf28      	it	cs
 80065de:	2304      	movcs	r3, #4
 80065e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3304      	adds	r3, #4
 80065e6:	2b06      	cmp	r3, #6
 80065e8:	d902      	bls.n	80065f0 <NVIC_EncodePriority+0x30>
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	3b03      	subs	r3, #3
 80065ee:	e000      	b.n	80065f2 <NVIC_EncodePriority+0x32>
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065f4:	f04f 32ff 	mov.w	r2, #4294967295
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43da      	mvns	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	401a      	ands	r2, r3
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006608:	f04f 31ff 	mov.w	r1, #4294967295
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	fa01 f303 	lsl.w	r3, r1, r3
 8006612:	43d9      	mvns	r1, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006618:	4313      	orrs	r3, r2
         );
}
 800661a:	4618      	mov	r0, r3
 800661c:	3724      	adds	r7, #36	; 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3b01      	subs	r3, #1
 8006634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006638:	d301      	bcc.n	800663e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800663a:	2301      	movs	r3, #1
 800663c:	e00f      	b.n	800665e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800663e:	4a0a      	ldr	r2, [pc, #40]	; (8006668 <SysTick_Config+0x40>)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3b01      	subs	r3, #1
 8006644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006646:	210f      	movs	r1, #15
 8006648:	f04f 30ff 	mov.w	r0, #4294967295
 800664c:	f7ff ff8e 	bl	800656c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006650:	4b05      	ldr	r3, [pc, #20]	; (8006668 <SysTick_Config+0x40>)
 8006652:	2200      	movs	r2, #0
 8006654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006656:	4b04      	ldr	r3, [pc, #16]	; (8006668 <SysTick_Config+0x40>)
 8006658:	2207      	movs	r2, #7
 800665a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	e000e010 	.word	0xe000e010

0800666c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff ff29 	bl	80064cc <__NVIC_SetPriorityGrouping>
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006682:	b580      	push	{r7, lr}
 8006684:	b086      	sub	sp, #24
 8006686:	af00      	add	r7, sp, #0
 8006688:	4603      	mov	r3, r0
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
 800668e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006690:	2300      	movs	r3, #0
 8006692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006694:	f7ff ff3e 	bl	8006514 <__NVIC_GetPriorityGrouping>
 8006698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	6978      	ldr	r0, [r7, #20]
 80066a0:	f7ff ff8e 	bl	80065c0 <NVIC_EncodePriority>
 80066a4:	4602      	mov	r2, r0
 80066a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff ff5d 	bl	800656c <__NVIC_SetPriority>
}
 80066b2:	bf00      	nop
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	4603      	mov	r3, r0
 80066c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff ff31 	bl	8006530 <__NVIC_EnableIRQ>
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff ffa2 	bl	8006628 <SysTick_Config>
 80066e4:	4603      	mov	r3, r0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b089      	sub	sp, #36	; 0x24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066fe:	2300      	movs	r3, #0
 8006700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
 800670a:	e159      	b.n	80069c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800670c:	2201      	movs	r2, #1
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4013      	ands	r3, r2
 800671e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	429a      	cmp	r2, r3
 8006726:	f040 8148 	bne.w	80069ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b01      	cmp	r3, #1
 8006734:	d005      	beq.n	8006742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800673e:	2b02      	cmp	r3, #2
 8006740:	d130      	bne.n	80067a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	2203      	movs	r2, #3
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	4013      	ands	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	4313      	orrs	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006778:	2201      	movs	r2, #1
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	43db      	mvns	r3, r3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	4013      	ands	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	f003 0201 	and.w	r2, r3, #1
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	4313      	orrs	r3, r2
 800679c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d017      	beq.n	80067e0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	2203      	movs	r2, #3
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	43db      	mvns	r3, r3
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	4013      	ands	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d123      	bne.n	8006834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	08da      	lsrs	r2, r3, #3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3208      	adds	r2, #8
 80067f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	220f      	movs	r2, #15
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	43db      	mvns	r3, r3
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	4013      	ands	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	fa02 f303 	lsl.w	r3, r2, r3
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	4313      	orrs	r3, r2
 8006824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	08da      	lsrs	r2, r3, #3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3208      	adds	r2, #8
 800682e:	69b9      	ldr	r1, [r7, #24]
 8006830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	2203      	movs	r2, #3
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	43db      	mvns	r3, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f003 0203 	and.w	r2, r3, #3
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	4313      	orrs	r3, r2
 8006860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80a2 	beq.w	80069ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	4b57      	ldr	r3, [pc, #348]	; (80069d8 <HAL_GPIO_Init+0x2e8>)
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	4a56      	ldr	r2, [pc, #344]	; (80069d8 <HAL_GPIO_Init+0x2e8>)
 8006880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006884:	6453      	str	r3, [r2, #68]	; 0x44
 8006886:	4b54      	ldr	r3, [pc, #336]	; (80069d8 <HAL_GPIO_Init+0x2e8>)
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006892:	4a52      	ldr	r2, [pc, #328]	; (80069dc <HAL_GPIO_Init+0x2ec>)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	089b      	lsrs	r3, r3, #2
 8006898:	3302      	adds	r3, #2
 800689a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	220f      	movs	r2, #15
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	43db      	mvns	r3, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4013      	ands	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a49      	ldr	r2, [pc, #292]	; (80069e0 <HAL_GPIO_Init+0x2f0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d019      	beq.n	80068f2 <HAL_GPIO_Init+0x202>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a48      	ldr	r2, [pc, #288]	; (80069e4 <HAL_GPIO_Init+0x2f4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_GPIO_Init+0x1fe>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a47      	ldr	r2, [pc, #284]	; (80069e8 <HAL_GPIO_Init+0x2f8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00d      	beq.n	80068ea <HAL_GPIO_Init+0x1fa>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a46      	ldr	r2, [pc, #280]	; (80069ec <HAL_GPIO_Init+0x2fc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d007      	beq.n	80068e6 <HAL_GPIO_Init+0x1f6>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a45      	ldr	r2, [pc, #276]	; (80069f0 <HAL_GPIO_Init+0x300>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d101      	bne.n	80068e2 <HAL_GPIO_Init+0x1f2>
 80068de:	2304      	movs	r3, #4
 80068e0:	e008      	b.n	80068f4 <HAL_GPIO_Init+0x204>
 80068e2:	2307      	movs	r3, #7
 80068e4:	e006      	b.n	80068f4 <HAL_GPIO_Init+0x204>
 80068e6:	2303      	movs	r3, #3
 80068e8:	e004      	b.n	80068f4 <HAL_GPIO_Init+0x204>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e002      	b.n	80068f4 <HAL_GPIO_Init+0x204>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <HAL_GPIO_Init+0x204>
 80068f2:	2300      	movs	r3, #0
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	f002 0203 	and.w	r2, r2, #3
 80068fa:	0092      	lsls	r2, r2, #2
 80068fc:	4093      	lsls	r3, r2
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	4313      	orrs	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006904:	4935      	ldr	r1, [pc, #212]	; (80069dc <HAL_GPIO_Init+0x2ec>)
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	089b      	lsrs	r3, r3, #2
 800690a:	3302      	adds	r3, #2
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006912:	4b38      	ldr	r3, [pc, #224]	; (80069f4 <HAL_GPIO_Init+0x304>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	43db      	mvns	r3, r3
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	4013      	ands	r3, r2
 8006920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006936:	4a2f      	ldr	r2, [pc, #188]	; (80069f4 <HAL_GPIO_Init+0x304>)
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800693c:	4b2d      	ldr	r3, [pc, #180]	; (80069f4 <HAL_GPIO_Init+0x304>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	43db      	mvns	r3, r3
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	4013      	ands	r3, r2
 800694a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006960:	4a24      	ldr	r2, [pc, #144]	; (80069f4 <HAL_GPIO_Init+0x304>)
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006966:	4b23      	ldr	r3, [pc, #140]	; (80069f4 <HAL_GPIO_Init+0x304>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	43db      	mvns	r3, r3
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	4013      	ands	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800698a:	4a1a      	ldr	r2, [pc, #104]	; (80069f4 <HAL_GPIO_Init+0x304>)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006990:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <HAL_GPIO_Init+0x304>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	43db      	mvns	r3, r3
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	4013      	ands	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80069b4:	4a0f      	ldr	r2, [pc, #60]	; (80069f4 <HAL_GPIO_Init+0x304>)
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	3301      	adds	r3, #1
 80069be:	61fb      	str	r3, [r7, #28]
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	2b0f      	cmp	r3, #15
 80069c4:	f67f aea2 	bls.w	800670c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	3724      	adds	r7, #36	; 0x24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	40023800 	.word	0x40023800
 80069dc:	40013800 	.word	0x40013800
 80069e0:	40020000 	.word	0x40020000
 80069e4:	40020400 	.word	0x40020400
 80069e8:	40020800 	.word	0x40020800
 80069ec:	40020c00 	.word	0x40020c00
 80069f0:	40021000 	.word	0x40021000
 80069f4:	40013c00 	.word	0x40013c00

080069f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	887b      	ldrh	r3, [r7, #2]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a10:	2301      	movs	r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
 8006a14:	e001      	b.n	8006a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	807b      	strh	r3, [r7, #2]
 8006a34:	4613      	mov	r3, r2
 8006a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a38:	787b      	ldrb	r3, [r7, #1]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a3e:	887a      	ldrh	r2, [r7, #2]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a44:	e003      	b.n	8006a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a46:	887b      	ldrh	r3, [r7, #2]
 8006a48:	041a      	lsls	r2, r3, #16
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	619a      	str	r2, [r3, #24]
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a6c:	887a      	ldrh	r2, [r7, #2]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4013      	ands	r3, r2
 8006a72:	041a      	lsls	r2, r3, #16
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	43d9      	mvns	r1, r3
 8006a78:	887b      	ldrh	r3, [r7, #2]
 8006a7a:	400b      	ands	r3, r1
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	619a      	str	r2, [r3, #24]
}
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a9a:	4b08      	ldr	r3, [pc, #32]	; (8006abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a9c:	695a      	ldr	r2, [r3, #20]
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d006      	beq.n	8006ab4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006aa6:	4a05      	ldr	r2, [pc, #20]	; (8006abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fd ff40 	bl	8004934 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40013c00 	.word	0x40013c00

08006ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e12b      	b.n	8006d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fe fd46 	bl	8005578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2224      	movs	r2, #36	; 0x24
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0201 	bic.w	r2, r2, #1
 8006b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b24:	f001 fbac 	bl	8008280 <HAL_RCC_GetPCLK1Freq>
 8006b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	4a81      	ldr	r2, [pc, #516]	; (8006d34 <HAL_I2C_Init+0x274>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d807      	bhi.n	8006b44 <HAL_I2C_Init+0x84>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4a80      	ldr	r2, [pc, #512]	; (8006d38 <HAL_I2C_Init+0x278>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	bf94      	ite	ls
 8006b3c:	2301      	movls	r3, #1
 8006b3e:	2300      	movhi	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	e006      	b.n	8006b52 <HAL_I2C_Init+0x92>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4a7d      	ldr	r2, [pc, #500]	; (8006d3c <HAL_I2C_Init+0x27c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	bf94      	ite	ls
 8006b4c:	2301      	movls	r3, #1
 8006b4e:	2300      	movhi	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e0e7      	b.n	8006d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4a78      	ldr	r2, [pc, #480]	; (8006d40 <HAL_I2C_Init+0x280>)
 8006b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b62:	0c9b      	lsrs	r3, r3, #18
 8006b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4a6a      	ldr	r2, [pc, #424]	; (8006d34 <HAL_I2C_Init+0x274>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d802      	bhi.n	8006b94 <HAL_I2C_Init+0xd4>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	3301      	adds	r3, #1
 8006b92:	e009      	b.n	8006ba8 <HAL_I2C_Init+0xe8>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b9a:	fb02 f303 	mul.w	r3, r2, r3
 8006b9e:	4a69      	ldr	r2, [pc, #420]	; (8006d44 <HAL_I2C_Init+0x284>)
 8006ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba4:	099b      	lsrs	r3, r3, #6
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006bba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	495c      	ldr	r1, [pc, #368]	; (8006d34 <HAL_I2C_Init+0x274>)
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	d819      	bhi.n	8006bfc <HAL_I2C_Init+0x13c>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	1e59      	subs	r1, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bd6:	1c59      	adds	r1, r3, #1
 8006bd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006bdc:	400b      	ands	r3, r1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <HAL_I2C_Init+0x138>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	1e59      	subs	r1, r3, #1
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bf6:	e051      	b.n	8006c9c <HAL_I2C_Init+0x1dc>
 8006bf8:	2304      	movs	r3, #4
 8006bfa:	e04f      	b.n	8006c9c <HAL_I2C_Init+0x1dc>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d111      	bne.n	8006c28 <HAL_I2C_Init+0x168>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	1e58      	subs	r0, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6859      	ldr	r1, [r3, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	440b      	add	r3, r1
 8006c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c16:	3301      	adds	r3, #1
 8006c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	bf0c      	ite	eq
 8006c20:	2301      	moveq	r3, #1
 8006c22:	2300      	movne	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	e012      	b.n	8006c4e <HAL_I2C_Init+0x18e>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	1e58      	subs	r0, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6859      	ldr	r1, [r3, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	440b      	add	r3, r1
 8006c36:	0099      	lsls	r1, r3, #2
 8006c38:	440b      	add	r3, r1
 8006c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c3e:	3301      	adds	r3, #1
 8006c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	bf0c      	ite	eq
 8006c48:	2301      	moveq	r3, #1
 8006c4a:	2300      	movne	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <HAL_I2C_Init+0x196>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e022      	b.n	8006c9c <HAL_I2C_Init+0x1dc>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10e      	bne.n	8006c7c <HAL_I2C_Init+0x1bc>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1e58      	subs	r0, r3, #1
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	440b      	add	r3, r1
 8006c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c70:	3301      	adds	r3, #1
 8006c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7a:	e00f      	b.n	8006c9c <HAL_I2C_Init+0x1dc>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	1e58      	subs	r0, r3, #1
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6859      	ldr	r1, [r3, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	0099      	lsls	r1, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c92:	3301      	adds	r3, #1
 8006c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	6809      	ldr	r1, [r1, #0]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69da      	ldr	r2, [r3, #28]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006cca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6911      	ldr	r1, [r2, #16]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	68d2      	ldr	r2, [r2, #12]
 8006cd6:	4311      	orrs	r1, r2
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695a      	ldr	r2, [r3, #20]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	000186a0 	.word	0x000186a0
 8006d38:	001e847f 	.word	0x001e847f
 8006d3c:	003d08ff 	.word	0x003d08ff
 8006d40:	431bde83 	.word	0x431bde83
 8006d44:	10624dd3 	.word	0x10624dd3

08006d48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	461a      	mov	r2, r3
 8006d54:	460b      	mov	r3, r1
 8006d56:	817b      	strh	r3, [r7, #10]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d5c:	f7ff fb86 	bl	800646c <HAL_GetTick>
 8006d60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	f040 80e0 	bne.w	8006f30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	2319      	movs	r3, #25
 8006d76:	2201      	movs	r2, #1
 8006d78:	4970      	ldr	r1, [pc, #448]	; (8006f3c <HAL_I2C_Master_Transmit+0x1f4>)
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 fc58 	bl	8007630 <I2C_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006d86:	2302      	movs	r3, #2
 8006d88:	e0d3      	b.n	8006f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_I2C_Master_Transmit+0x50>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e0cc      	b.n	8006f32 <HAL_I2C_Master_Transmit+0x1ea>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d007      	beq.n	8006dbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2221      	movs	r2, #33	; 0x21
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2210      	movs	r2, #16
 8006dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	893a      	ldrh	r2, [r7, #8]
 8006dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4a50      	ldr	r2, [pc, #320]	; (8006f40 <HAL_I2C_Master_Transmit+0x1f8>)
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006e00:	8979      	ldrh	r1, [r7, #10]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	6a3a      	ldr	r2, [r7, #32]
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fac2 	bl	8007390 <I2C_MasterRequestWrite>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e08d      	b.n	8006f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e16:	2300      	movs	r3, #0
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006e2c:	e066      	b.n	8006efc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	6a39      	ldr	r1, [r7, #32]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 fcd2 	bl	80077dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00d      	beq.n	8006e5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d107      	bne.n	8006e56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e06b      	b.n	8006f32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	781a      	ldrb	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d11b      	bne.n	8006ed0 <HAL_I2C_Master_Transmit+0x188>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d017      	beq.n	8006ed0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	6a39      	ldr	r1, [r7, #32]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fcc2 	bl	800785e <I2C_WaitOnBTFFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00d      	beq.n	8006efc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d107      	bne.n	8006ef8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ef6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e01a      	b.n	8006f32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d194      	bne.n	8006e2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e000      	b.n	8006f32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
  }
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	00100002 	.word	0x00100002
 8006f40:	ffff0000 	.word	0xffff0000

08006f44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08c      	sub	sp, #48	; 0x30
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	607a      	str	r2, [r7, #4]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	460b      	mov	r3, r1
 8006f52:	817b      	strh	r3, [r7, #10]
 8006f54:	4613      	mov	r3, r2
 8006f56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f58:	f7ff fa88 	bl	800646c <HAL_GetTick>
 8006f5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	f040 820b 	bne.w	8007382 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	2319      	movs	r3, #25
 8006f72:	2201      	movs	r2, #1
 8006f74:	497c      	ldr	r1, [pc, #496]	; (8007168 <HAL_I2C_Master_Receive+0x224>)
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 fb5a 	bl	8007630 <I2C_WaitOnFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006f82:	2302      	movs	r3, #2
 8006f84:	e1fe      	b.n	8007384 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_I2C_Master_Receive+0x50>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e1f7      	b.n	8007384 <HAL_I2C_Master_Receive+0x440>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d007      	beq.n	8006fba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2222      	movs	r2, #34	; 0x22
 8006fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	893a      	ldrh	r2, [r7, #8]
 8006fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a5c      	ldr	r2, [pc, #368]	; (800716c <HAL_I2C_Master_Receive+0x228>)
 8006ffa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006ffc:	8979      	ldrh	r1, [r7, #10]
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 fa46 	bl	8007494 <I2C_MasterRequestRead>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e1b8      	b.n	8007384 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007016:	2b00      	cmp	r3, #0
 8007018:	d113      	bne.n	8007042 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800701a:	2300      	movs	r3, #0
 800701c:	623b      	str	r3, [r7, #32]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	623b      	str	r3, [r7, #32]
 800702e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e18c      	b.n	800735c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007046:	2b01      	cmp	r3, #1
 8007048:	d11b      	bne.n	8007082 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800705a:	2300      	movs	r3, #0
 800705c:	61fb      	str	r3, [r7, #28]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	61fb      	str	r3, [r7, #28]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	61fb      	str	r3, [r7, #28]
 800706e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	e16c      	b.n	800735c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007086:	2b02      	cmp	r3, #2
 8007088:	d11b      	bne.n	80070c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007098:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070aa:	2300      	movs	r3, #0
 80070ac:	61bb      	str	r3, [r7, #24]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	61bb      	str	r3, [r7, #24]
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	e14c      	b.n	800735c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80070e8:	e138      	b.n	800735c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	f200 80f1 	bhi.w	80072d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d123      	bne.n	8007144 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 fbed 	bl	80078e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e139      	b.n	8007384 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691a      	ldr	r2, [r3, #16]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007142:	e10b      	b.n	800735c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007148:	2b02      	cmp	r3, #2
 800714a:	d14e      	bne.n	80071ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	2200      	movs	r2, #0
 8007154:	4906      	ldr	r1, [pc, #24]	; (8007170 <HAL_I2C_Master_Receive+0x22c>)
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fa6a 	bl	8007630 <I2C_WaitOnFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d008      	beq.n	8007174 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e10e      	b.n	8007384 <HAL_I2C_Master_Receive+0x440>
 8007166:	bf00      	nop
 8007168:	00100002 	.word	0x00100002
 800716c:	ffff0000 	.word	0xffff0000
 8007170:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691a      	ldr	r2, [r3, #16]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071e8:	e0b8      	b.n	800735c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2200      	movs	r2, #0
 80071f2:	4966      	ldr	r1, [pc, #408]	; (800738c <HAL_I2C_Master_Receive+0x448>)
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 fa1b 	bl	8007630 <I2C_WaitOnFlagUntilTimeout>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e0bf      	b.n	8007384 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007212:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691a      	ldr	r2, [r3, #16]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	2200      	movs	r2, #0
 800724e:	494f      	ldr	r1, [pc, #316]	; (800738c <HAL_I2C_Master_Receive+0x448>)
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f9ed 	bl	8007630 <I2C_WaitOnFlagUntilTimeout>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e091      	b.n	8007384 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800726e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	691a      	ldr	r2, [r3, #16]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072d4:	e042      	b.n	800735c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fb00 	bl	80078e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e04c      	b.n	8007384 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007312:	b29b      	uxth	r3, r3
 8007314:	3b01      	subs	r3, #1
 8007316:	b29a      	uxth	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b04      	cmp	r3, #4
 8007328:	d118      	bne.n	800735c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007360:	2b00      	cmp	r3, #0
 8007362:	f47f aec2 	bne.w	80070ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2220      	movs	r2, #32
 800736a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	e000      	b.n	8007384 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007382:	2302      	movs	r3, #2
  }
}
 8007384:	4618      	mov	r0, r3
 8007386:	3728      	adds	r7, #40	; 0x28
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	00010004 	.word	0x00010004

08007390 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af02      	add	r7, sp, #8
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	460b      	mov	r3, r1
 800739e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d006      	beq.n	80073ba <I2C_MasterRequestWrite+0x2a>
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d003      	beq.n	80073ba <I2C_MasterRequestWrite+0x2a>
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073b8:	d108      	bne.n	80073cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	e00b      	b.n	80073e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d0:	2b12      	cmp	r3, #18
 80073d2:	d107      	bne.n	80073e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f91d 	bl	8007630 <I2C_WaitOnFlagUntilTimeout>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00d      	beq.n	8007418 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800740a:	d103      	bne.n	8007414 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e035      	b.n	8007484 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007420:	d108      	bne.n	8007434 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007422:	897b      	ldrh	r3, [r7, #10]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	461a      	mov	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007430:	611a      	str	r2, [r3, #16]
 8007432:	e01b      	b.n	800746c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007434:	897b      	ldrh	r3, [r7, #10]
 8007436:	11db      	asrs	r3, r3, #7
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f003 0306 	and.w	r3, r3, #6
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f063 030f 	orn	r3, r3, #15
 8007444:	b2da      	uxtb	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	490e      	ldr	r1, [pc, #56]	; (800748c <I2C_MasterRequestWrite+0xfc>)
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f943 	bl	80076de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e010      	b.n	8007484 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007462:	897b      	ldrh	r3, [r7, #10]
 8007464:	b2da      	uxtb	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	4907      	ldr	r1, [pc, #28]	; (8007490 <I2C_MasterRequestWrite+0x100>)
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f933 	bl	80076de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	00010008 	.word	0x00010008
 8007490:	00010002 	.word	0x00010002

08007494 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af02      	add	r7, sp, #8
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	460b      	mov	r3, r1
 80074a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d006      	beq.n	80074ce <I2C_MasterRequestRead+0x3a>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d003      	beq.n	80074ce <I2C_MasterRequestRead+0x3a>
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074cc:	d108      	bne.n	80074e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	e00b      	b.n	80074f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	2b11      	cmp	r3, #17
 80074e6:	d107      	bne.n	80074f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f893 	bl	8007630 <I2C_WaitOnFlagUntilTimeout>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00d      	beq.n	800752c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751e:	d103      	bne.n	8007528 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e079      	b.n	8007620 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007534:	d108      	bne.n	8007548 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007536:	897b      	ldrh	r3, [r7, #10]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f043 0301 	orr.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	611a      	str	r2, [r3, #16]
 8007546:	e05f      	b.n	8007608 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007548:	897b      	ldrh	r3, [r7, #10]
 800754a:	11db      	asrs	r3, r3, #7
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f003 0306 	and.w	r3, r3, #6
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f063 030f 	orn	r3, r3, #15
 8007558:	b2da      	uxtb	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	4930      	ldr	r1, [pc, #192]	; (8007628 <I2C_MasterRequestRead+0x194>)
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 f8b9 	bl	80076de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e054      	b.n	8007620 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007576:	897b      	ldrh	r3, [r7, #10]
 8007578:	b2da      	uxtb	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	4929      	ldr	r1, [pc, #164]	; (800762c <I2C_MasterRequestRead+0x198>)
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f8a9 	bl	80076de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e044      	b.n	8007620 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007596:	2300      	movs	r3, #0
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f831 	bl	8007630 <I2C_WaitOnFlagUntilTimeout>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00d      	beq.n	80075f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e2:	d103      	bne.n	80075ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e017      	b.n	8007620 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80075f0:	897b      	ldrh	r3, [r7, #10]
 80075f2:	11db      	asrs	r3, r3, #7
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	f003 0306 	and.w	r3, r3, #6
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	f063 030e 	orn	r3, r3, #14
 8007600:	b2da      	uxtb	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4907      	ldr	r1, [pc, #28]	; (800762c <I2C_MasterRequestRead+0x198>)
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 f865 	bl	80076de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e000      	b.n	8007620 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	00010008 	.word	0x00010008
 800762c:	00010002 	.word	0x00010002

08007630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	4613      	mov	r3, r2
 800763e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007640:	e025      	b.n	800768e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007648:	d021      	beq.n	800768e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800764a:	f7fe ff0f 	bl	800646c <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d116      	bne.n	800768e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2220      	movs	r2, #32
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767a:	f043 0220 	orr.w	r2, r3, #32
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e023      	b.n	80076d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	0c1b      	lsrs	r3, r3, #16
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b01      	cmp	r3, #1
 8007696:	d10d      	bne.n	80076b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	43da      	mvns	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4013      	ands	r3, r2
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf0c      	ite	eq
 80076aa:	2301      	moveq	r3, #1
 80076ac:	2300      	movne	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	e00c      	b.n	80076ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	43da      	mvns	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4013      	ands	r3, r2
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bf0c      	ite	eq
 80076c6:	2301      	moveq	r3, #1
 80076c8:	2300      	movne	r3, #0
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d0b6      	beq.n	8007642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076ec:	e051      	b.n	8007792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076fc:	d123      	bne.n	8007746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800770c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007716:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2220      	movs	r2, #32
 8007722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	f043 0204 	orr.w	r2, r3, #4
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e046      	b.n	80077d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d021      	beq.n	8007792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774e:	f7fe fe8d 	bl	800646c <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	429a      	cmp	r2, r3
 800775c:	d302      	bcc.n	8007764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d116      	bne.n	8007792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	f043 0220 	orr.w	r2, r3, #32
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e020      	b.n	80077d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	0c1b      	lsrs	r3, r3, #16
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b01      	cmp	r3, #1
 800779a:	d10c      	bne.n	80077b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	43da      	mvns	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4013      	ands	r3, r2
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bf14      	ite	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	2300      	moveq	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	e00b      	b.n	80077ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	43da      	mvns	r2, r3
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4013      	ands	r3, r2
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	bf14      	ite	ne
 80077c8:	2301      	movne	r3, #1
 80077ca:	2300      	moveq	r3, #0
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d18d      	bne.n	80076ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077e8:	e02d      	b.n	8007846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 f8ce 	bl	800798c <I2C_IsAcknowledgeFailed>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e02d      	b.n	8007856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007800:	d021      	beq.n	8007846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007802:	f7fe fe33 	bl	800646c <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	429a      	cmp	r2, r3
 8007810:	d302      	bcc.n	8007818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d116      	bne.n	8007846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	f043 0220 	orr.w	r2, r3, #32
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e007      	b.n	8007856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d1ca      	bne.n	80077ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800786a:	e02d      	b.n	80078c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f88d 	bl	800798c <I2C_IsAcknowledgeFailed>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e02d      	b.n	80078d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d021      	beq.n	80078c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007884:	f7fe fdf2 	bl	800646c <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	429a      	cmp	r2, r3
 8007892:	d302      	bcc.n	800789a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d116      	bne.n	80078c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	f043 0220 	orr.w	r2, r3, #32
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e007      	b.n	80078d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0304 	and.w	r3, r3, #4
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d1ca      	bne.n	800786c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078ec:	e042      	b.n	8007974 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d119      	bne.n	8007930 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0210 	mvn.w	r2, #16
 8007904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e029      	b.n	8007984 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007930:	f7fe fd9c 	bl	800646c <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	429a      	cmp	r2, r3
 800793e:	d302      	bcc.n	8007946 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d116      	bne.n	8007974 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	f043 0220 	orr.w	r2, r3, #32
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e007      	b.n	8007984 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797e:	2b40      	cmp	r3, #64	; 0x40
 8007980:	d1b5      	bne.n	80078ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800799e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a2:	d11b      	bne.n	80079dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	f043 0204 	orr.w	r2, r3, #4
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
	...

080079ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e264      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d075      	beq.n	8007af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a0a:	4ba3      	ldr	r3, [pc, #652]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f003 030c 	and.w	r3, r3, #12
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d00c      	beq.n	8007a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a16:	4ba0      	ldr	r3, [pc, #640]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d112      	bne.n	8007a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a22:	4b9d      	ldr	r3, [pc, #628]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a2e:	d10b      	bne.n	8007a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a30:	4b99      	ldr	r3, [pc, #612]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d05b      	beq.n	8007af4 <HAL_RCC_OscConfig+0x108>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d157      	bne.n	8007af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e23f      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a50:	d106      	bne.n	8007a60 <HAL_RCC_OscConfig+0x74>
 8007a52:	4b91      	ldr	r3, [pc, #580]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a90      	ldr	r2, [pc, #576]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	e01d      	b.n	8007a9c <HAL_RCC_OscConfig+0xb0>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a68:	d10c      	bne.n	8007a84 <HAL_RCC_OscConfig+0x98>
 8007a6a:	4b8b      	ldr	r3, [pc, #556]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a8a      	ldr	r2, [pc, #552]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	4b88      	ldr	r3, [pc, #544]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a87      	ldr	r2, [pc, #540]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e00b      	b.n	8007a9c <HAL_RCC_OscConfig+0xb0>
 8007a84:	4b84      	ldr	r3, [pc, #528]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a83      	ldr	r2, [pc, #524]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	4b81      	ldr	r3, [pc, #516]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a80      	ldr	r2, [pc, #512]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d013      	beq.n	8007acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa4:	f7fe fce2 	bl	800646c <HAL_GetTick>
 8007aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aaa:	e008      	b.n	8007abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aac:	f7fe fcde 	bl	800646c <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b64      	cmp	r3, #100	; 0x64
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e204      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007abe:	4b76      	ldr	r3, [pc, #472]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0f0      	beq.n	8007aac <HAL_RCC_OscConfig+0xc0>
 8007aca:	e014      	b.n	8007af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007acc:	f7fe fcce 	bl	800646c <HAL_GetTick>
 8007ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ad2:	e008      	b.n	8007ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ad4:	f7fe fcca 	bl	800646c <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	2b64      	cmp	r3, #100	; 0x64
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e1f0      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ae6:	4b6c      	ldr	r3, [pc, #432]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1f0      	bne.n	8007ad4 <HAL_RCC_OscConfig+0xe8>
 8007af2:	e000      	b.n	8007af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d063      	beq.n	8007bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b02:	4b65      	ldr	r3, [pc, #404]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 030c 	and.w	r3, r3, #12
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b0e:	4b62      	ldr	r3, [pc, #392]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b16:	2b08      	cmp	r3, #8
 8007b18:	d11c      	bne.n	8007b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b1a:	4b5f      	ldr	r3, [pc, #380]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d116      	bne.n	8007b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b26:	4b5c      	ldr	r3, [pc, #368]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <HAL_RCC_OscConfig+0x152>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d001      	beq.n	8007b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e1c4      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b3e:	4b56      	ldr	r3, [pc, #344]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	4952      	ldr	r1, [pc, #328]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b52:	e03a      	b.n	8007bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d020      	beq.n	8007b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b5c:	4b4f      	ldr	r3, [pc, #316]	; (8007c9c <HAL_RCC_OscConfig+0x2b0>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b62:	f7fe fc83 	bl	800646c <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b68:	e008      	b.n	8007b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b6a:	f7fe fc7f 	bl	800646c <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d901      	bls.n	8007b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e1a5      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b7c:	4b46      	ldr	r3, [pc, #280]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d0f0      	beq.n	8007b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b88:	4b43      	ldr	r3, [pc, #268]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	4940      	ldr	r1, [pc, #256]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	600b      	str	r3, [r1, #0]
 8007b9c:	e015      	b.n	8007bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b9e:	4b3f      	ldr	r3, [pc, #252]	; (8007c9c <HAL_RCC_OscConfig+0x2b0>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba4:	f7fe fc62 	bl	800646c <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bac:	f7fe fc5e 	bl	800646c <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e184      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bbe:	4b36      	ldr	r3, [pc, #216]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1f0      	bne.n	8007bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d030      	beq.n	8007c38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d016      	beq.n	8007c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bde:	4b30      	ldr	r3, [pc, #192]	; (8007ca0 <HAL_RCC_OscConfig+0x2b4>)
 8007be0:	2201      	movs	r2, #1
 8007be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be4:	f7fe fc42 	bl	800646c <HAL_GetTick>
 8007be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bec:	f7fe fc3e 	bl	800646c <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e164      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bfe:	4b26      	ldr	r3, [pc, #152]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f0      	beq.n	8007bec <HAL_RCC_OscConfig+0x200>
 8007c0a:	e015      	b.n	8007c38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c0c:	4b24      	ldr	r3, [pc, #144]	; (8007ca0 <HAL_RCC_OscConfig+0x2b4>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c12:	f7fe fc2b 	bl	800646c <HAL_GetTick>
 8007c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c1a:	f7fe fc27 	bl	800646c <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e14d      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c2c:	4b1a      	ldr	r3, [pc, #104]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1f0      	bne.n	8007c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80a0 	beq.w	8007d86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c4a:	4b13      	ldr	r3, [pc, #76]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10f      	bne.n	8007c76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c56:	2300      	movs	r3, #0
 8007c58:	60bb      	str	r3, [r7, #8]
 8007c5a:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	4a0e      	ldr	r2, [pc, #56]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c64:	6413      	str	r3, [r2, #64]	; 0x40
 8007c66:	4b0c      	ldr	r3, [pc, #48]	; (8007c98 <HAL_RCC_OscConfig+0x2ac>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c6e:	60bb      	str	r3, [r7, #8]
 8007c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c72:	2301      	movs	r3, #1
 8007c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c76:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <HAL_RCC_OscConfig+0x2b8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d121      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c82:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <HAL_RCC_OscConfig+0x2b8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a07      	ldr	r2, [pc, #28]	; (8007ca4 <HAL_RCC_OscConfig+0x2b8>)
 8007c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c8e:	f7fe fbed 	bl	800646c <HAL_GetTick>
 8007c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c94:	e011      	b.n	8007cba <HAL_RCC_OscConfig+0x2ce>
 8007c96:	bf00      	nop
 8007c98:	40023800 	.word	0x40023800
 8007c9c:	42470000 	.word	0x42470000
 8007ca0:	42470e80 	.word	0x42470e80
 8007ca4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ca8:	f7fe fbe0 	bl	800646c <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e106      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cba:	4b85      	ldr	r3, [pc, #532]	; (8007ed0 <HAL_RCC_OscConfig+0x4e4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f0      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d106      	bne.n	8007cdc <HAL_RCC_OscConfig+0x2f0>
 8007cce:	4b81      	ldr	r3, [pc, #516]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd2:	4a80      	ldr	r2, [pc, #512]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007cd4:	f043 0301 	orr.w	r3, r3, #1
 8007cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cda:	e01c      	b.n	8007d16 <HAL_RCC_OscConfig+0x32a>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b05      	cmp	r3, #5
 8007ce2:	d10c      	bne.n	8007cfe <HAL_RCC_OscConfig+0x312>
 8007ce4:	4b7b      	ldr	r3, [pc, #492]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce8:	4a7a      	ldr	r2, [pc, #488]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007cea:	f043 0304 	orr.w	r3, r3, #4
 8007cee:	6713      	str	r3, [r2, #112]	; 0x70
 8007cf0:	4b78      	ldr	r3, [pc, #480]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf4:	4a77      	ldr	r2, [pc, #476]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8007cfc:	e00b      	b.n	8007d16 <HAL_RCC_OscConfig+0x32a>
 8007cfe:	4b75      	ldr	r3, [pc, #468]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d02:	4a74      	ldr	r2, [pc, #464]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d04:	f023 0301 	bic.w	r3, r3, #1
 8007d08:	6713      	str	r3, [r2, #112]	; 0x70
 8007d0a:	4b72      	ldr	r3, [pc, #456]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0e:	4a71      	ldr	r2, [pc, #452]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d10:	f023 0304 	bic.w	r3, r3, #4
 8007d14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d015      	beq.n	8007d4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d1e:	f7fe fba5 	bl	800646c <HAL_GetTick>
 8007d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d24:	e00a      	b.n	8007d3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d26:	f7fe fba1 	bl	800646c <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d901      	bls.n	8007d3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e0c5      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d3c:	4b65      	ldr	r3, [pc, #404]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0ee      	beq.n	8007d26 <HAL_RCC_OscConfig+0x33a>
 8007d48:	e014      	b.n	8007d74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d4a:	f7fe fb8f 	bl	800646c <HAL_GetTick>
 8007d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d50:	e00a      	b.n	8007d68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d52:	f7fe fb8b 	bl	800646c <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e0af      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d68:	4b5a      	ldr	r3, [pc, #360]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1ee      	bne.n	8007d52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d105      	bne.n	8007d86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d7a:	4b56      	ldr	r3, [pc, #344]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	4a55      	ldr	r2, [pc, #340]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 809b 	beq.w	8007ec6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d90:	4b50      	ldr	r3, [pc, #320]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f003 030c 	and.w	r3, r3, #12
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d05c      	beq.n	8007e56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d141      	bne.n	8007e28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007da4:	4b4c      	ldr	r3, [pc, #304]	; (8007ed8 <HAL_RCC_OscConfig+0x4ec>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007daa:	f7fe fb5f 	bl	800646c <HAL_GetTick>
 8007dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007db0:	e008      	b.n	8007dc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007db2:	f7fe fb5b 	bl	800646c <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e081      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dc4:	4b43      	ldr	r3, [pc, #268]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f0      	bne.n	8007db2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	69da      	ldr	r2, [r3, #28]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	019b      	lsls	r3, r3, #6
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	085b      	lsrs	r3, r3, #1
 8007de8:	3b01      	subs	r3, #1
 8007dea:	041b      	lsls	r3, r3, #16
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	061b      	lsls	r3, r3, #24
 8007df4:	4937      	ldr	r1, [pc, #220]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dfa:	4b37      	ldr	r3, [pc, #220]	; (8007ed8 <HAL_RCC_OscConfig+0x4ec>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e00:	f7fe fb34 	bl	800646c <HAL_GetTick>
 8007e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e06:	e008      	b.n	8007e1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e08:	f7fe fb30 	bl	800646c <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d901      	bls.n	8007e1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e056      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e1a:	4b2e      	ldr	r3, [pc, #184]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0f0      	beq.n	8007e08 <HAL_RCC_OscConfig+0x41c>
 8007e26:	e04e      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e28:	4b2b      	ldr	r3, [pc, #172]	; (8007ed8 <HAL_RCC_OscConfig+0x4ec>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e2e:	f7fe fb1d 	bl	800646c <HAL_GetTick>
 8007e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e34:	e008      	b.n	8007e48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e36:	f7fe fb19 	bl	800646c <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d901      	bls.n	8007e48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e03f      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e48:	4b22      	ldr	r3, [pc, #136]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f0      	bne.n	8007e36 <HAL_RCC_OscConfig+0x44a>
 8007e54:	e037      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d101      	bne.n	8007e62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e032      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e62:	4b1c      	ldr	r3, [pc, #112]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d028      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d121      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d11a      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e92:	4013      	ands	r3, r2
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d111      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d107      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d001      	beq.n	8007ec6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40007000 	.word	0x40007000
 8007ed4:	40023800 	.word	0x40023800
 8007ed8:	42470060 	.word	0x42470060

08007edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e0cc      	b.n	800808a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ef0:	4b68      	ldr	r3, [pc, #416]	; (8008094 <HAL_RCC_ClockConfig+0x1b8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d90c      	bls.n	8007f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007efe:	4b65      	ldr	r3, [pc, #404]	; (8008094 <HAL_RCC_ClockConfig+0x1b8>)
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f06:	4b63      	ldr	r3, [pc, #396]	; (8008094 <HAL_RCC_ClockConfig+0x1b8>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d001      	beq.n	8007f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e0b8      	b.n	800808a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d020      	beq.n	8007f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f30:	4b59      	ldr	r3, [pc, #356]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	4a58      	ldr	r2, [pc, #352]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f48:	4b53      	ldr	r3, [pc, #332]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	4a52      	ldr	r2, [pc, #328]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f54:	4b50      	ldr	r3, [pc, #320]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	494d      	ldr	r1, [pc, #308]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d044      	beq.n	8007ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d107      	bne.n	8007f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f7a:	4b47      	ldr	r3, [pc, #284]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d119      	bne.n	8007fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e07f      	b.n	800808a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d003      	beq.n	8007f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d107      	bne.n	8007faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f9a:	4b3f      	ldr	r3, [pc, #252]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d109      	bne.n	8007fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e06f      	b.n	800808a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007faa:	4b3b      	ldr	r3, [pc, #236]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e067      	b.n	800808a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fba:	4b37      	ldr	r3, [pc, #220]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f023 0203 	bic.w	r2, r3, #3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	4934      	ldr	r1, [pc, #208]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fcc:	f7fe fa4e 	bl	800646c <HAL_GetTick>
 8007fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fd2:	e00a      	b.n	8007fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fd4:	f7fe fa4a 	bl	800646c <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d901      	bls.n	8007fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e04f      	b.n	800808a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fea:	4b2b      	ldr	r3, [pc, #172]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 020c 	and.w	r2, r3, #12
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d1eb      	bne.n	8007fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ffc:	4b25      	ldr	r3, [pc, #148]	; (8008094 <HAL_RCC_ClockConfig+0x1b8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	429a      	cmp	r2, r3
 8008008:	d20c      	bcs.n	8008024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800800a:	4b22      	ldr	r3, [pc, #136]	; (8008094 <HAL_RCC_ClockConfig+0x1b8>)
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008012:	4b20      	ldr	r3, [pc, #128]	; (8008094 <HAL_RCC_ClockConfig+0x1b8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d001      	beq.n	8008024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e032      	b.n	800808a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d008      	beq.n	8008042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008030:	4b19      	ldr	r3, [pc, #100]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	4916      	ldr	r1, [pc, #88]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 800803e:	4313      	orrs	r3, r2
 8008040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d009      	beq.n	8008062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800804e:	4b12      	ldr	r3, [pc, #72]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	490e      	ldr	r1, [pc, #56]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 800805e:	4313      	orrs	r3, r2
 8008060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008062:	f000 f821 	bl	80080a8 <HAL_RCC_GetSysClockFreq>
 8008066:	4602      	mov	r2, r0
 8008068:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <HAL_RCC_ClockConfig+0x1bc>)
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	091b      	lsrs	r3, r3, #4
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	490a      	ldr	r1, [pc, #40]	; (800809c <HAL_RCC_ClockConfig+0x1c0>)
 8008074:	5ccb      	ldrb	r3, [r1, r3]
 8008076:	fa22 f303 	lsr.w	r3, r2, r3
 800807a:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <HAL_RCC_ClockConfig+0x1c4>)
 800807c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800807e:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe f9ae 	bl	80063e4 <HAL_InitTick>

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40023c00 	.word	0x40023c00
 8008098:	40023800 	.word	0x40023800
 800809c:	0800e5d4 	.word	0x0800e5d4
 80080a0:	20000724 	.word	0x20000724
 80080a4:	2000081c 	.word	0x2000081c

080080a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	607b      	str	r3, [r7, #4]
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	2300      	movs	r3, #0
 80080ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080c0:	4b67      	ldr	r3, [pc, #412]	; (8008260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f003 030c 	and.w	r3, r3, #12
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	d00d      	beq.n	80080e8 <HAL_RCC_GetSysClockFreq+0x40>
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	f200 80bd 	bhi.w	800824c <HAL_RCC_GetSysClockFreq+0x1a4>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_RCC_GetSysClockFreq+0x34>
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d003      	beq.n	80080e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80080da:	e0b7      	b.n	800824c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080dc:	4b61      	ldr	r3, [pc, #388]	; (8008264 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80080de:	60bb      	str	r3, [r7, #8]
       break;
 80080e0:	e0b7      	b.n	8008252 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080e2:	4b60      	ldr	r3, [pc, #384]	; (8008264 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80080e4:	60bb      	str	r3, [r7, #8]
      break;
 80080e6:	e0b4      	b.n	8008252 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080e8:	4b5d      	ldr	r3, [pc, #372]	; (8008260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080f2:	4b5b      	ldr	r3, [pc, #364]	; (8008260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d04d      	beq.n	800819a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080fe:	4b58      	ldr	r3, [pc, #352]	; (8008260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	099b      	lsrs	r3, r3, #6
 8008104:	461a      	mov	r2, r3
 8008106:	f04f 0300 	mov.w	r3, #0
 800810a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800810e:	f04f 0100 	mov.w	r1, #0
 8008112:	ea02 0800 	and.w	r8, r2, r0
 8008116:	ea03 0901 	and.w	r9, r3, r1
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	014b      	lsls	r3, r1, #5
 8008128:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800812c:	0142      	lsls	r2, r0, #5
 800812e:	4610      	mov	r0, r2
 8008130:	4619      	mov	r1, r3
 8008132:	ebb0 0008 	subs.w	r0, r0, r8
 8008136:	eb61 0109 	sbc.w	r1, r1, r9
 800813a:	f04f 0200 	mov.w	r2, #0
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	018b      	lsls	r3, r1, #6
 8008144:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008148:	0182      	lsls	r2, r0, #6
 800814a:	1a12      	subs	r2, r2, r0
 800814c:	eb63 0301 	sbc.w	r3, r3, r1
 8008150:	f04f 0000 	mov.w	r0, #0
 8008154:	f04f 0100 	mov.w	r1, #0
 8008158:	00d9      	lsls	r1, r3, #3
 800815a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800815e:	00d0      	lsls	r0, r2, #3
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	eb12 0208 	adds.w	r2, r2, r8
 8008168:	eb43 0309 	adc.w	r3, r3, r9
 800816c:	f04f 0000 	mov.w	r0, #0
 8008170:	f04f 0100 	mov.w	r1, #0
 8008174:	0299      	lsls	r1, r3, #10
 8008176:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800817a:	0290      	lsls	r0, r2, #10
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4610      	mov	r0, r2
 8008182:	4619      	mov	r1, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	461a      	mov	r2, r3
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	f7f8 f890 	bl	80002b0 <__aeabi_uldivmod>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4613      	mov	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	e04a      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800819a:	4b31      	ldr	r3, [pc, #196]	; (8008260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	099b      	lsrs	r3, r3, #6
 80081a0:	461a      	mov	r2, r3
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80081aa:	f04f 0100 	mov.w	r1, #0
 80081ae:	ea02 0400 	and.w	r4, r2, r0
 80081b2:	ea03 0501 	and.w	r5, r3, r1
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	014b      	lsls	r3, r1, #5
 80081c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80081c8:	0142      	lsls	r2, r0, #5
 80081ca:	4610      	mov	r0, r2
 80081cc:	4619      	mov	r1, r3
 80081ce:	1b00      	subs	r0, r0, r4
 80081d0:	eb61 0105 	sbc.w	r1, r1, r5
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	018b      	lsls	r3, r1, #6
 80081de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80081e2:	0182      	lsls	r2, r0, #6
 80081e4:	1a12      	subs	r2, r2, r0
 80081e6:	eb63 0301 	sbc.w	r3, r3, r1
 80081ea:	f04f 0000 	mov.w	r0, #0
 80081ee:	f04f 0100 	mov.w	r1, #0
 80081f2:	00d9      	lsls	r1, r3, #3
 80081f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081f8:	00d0      	lsls	r0, r2, #3
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	1912      	adds	r2, r2, r4
 8008200:	eb45 0303 	adc.w	r3, r5, r3
 8008204:	f04f 0000 	mov.w	r0, #0
 8008208:	f04f 0100 	mov.w	r1, #0
 800820c:	0299      	lsls	r1, r3, #10
 800820e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008212:	0290      	lsls	r0, r2, #10
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4610      	mov	r0, r2
 800821a:	4619      	mov	r1, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	461a      	mov	r2, r3
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	f7f8 f844 	bl	80002b0 <__aeabi_uldivmod>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4613      	mov	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008230:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	0c1b      	lsrs	r3, r3, #16
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	3301      	adds	r3, #1
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	fbb2 f3f3 	udiv	r3, r2, r3
 8008248:	60bb      	str	r3, [r7, #8]
      break;
 800824a:	e002      	b.n	8008252 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800824e:	60bb      	str	r3, [r7, #8]
      break;
 8008250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008252:	68bb      	ldr	r3, [r7, #8]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800825e:	bf00      	nop
 8008260:	40023800 	.word	0x40023800
 8008264:	00f42400 	.word	0x00f42400

08008268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800826c:	4b03      	ldr	r3, [pc, #12]	; (800827c <HAL_RCC_GetHCLKFreq+0x14>)
 800826e:	681b      	ldr	r3, [r3, #0]
}
 8008270:	4618      	mov	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	20000724 	.word	0x20000724

08008280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008284:	f7ff fff0 	bl	8008268 <HAL_RCC_GetHCLKFreq>
 8008288:	4602      	mov	r2, r0
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	0a9b      	lsrs	r3, r3, #10
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	4903      	ldr	r1, [pc, #12]	; (80082a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008296:	5ccb      	ldrb	r3, [r1, r3]
 8008298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800829c:	4618      	mov	r0, r3
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	40023800 	.word	0x40023800
 80082a4:	0800e5e4 	.word	0x0800e5e4

080082a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e07b      	b.n	80083b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d108      	bne.n	80082d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082ca:	d009      	beq.n	80082e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	61da      	str	r2, [r3, #28]
 80082d2:	e005      	b.n	80082e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7fd f984 	bl	8005608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008316:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008350:	431a      	orrs	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008364:	ea42 0103 	orr.w	r1, r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	0c1b      	lsrs	r3, r3, #16
 800837e:	f003 0104 	and.w	r1, r3, #4
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	f003 0210 	and.w	r2, r3, #16
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69da      	ldr	r2, [r3, #28]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b088      	sub	sp, #32
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	603b      	str	r3, [r7, #0]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_SPI_Transmit+0x22>
 80083d8:	2302      	movs	r3, #2
 80083da:	e126      	b.n	800862a <HAL_SPI_Transmit+0x270>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083e4:	f7fe f842 	bl	800646c <HAL_GetTick>
 80083e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d002      	beq.n	8008400 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80083fa:	2302      	movs	r3, #2
 80083fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083fe:	e10b      	b.n	8008618 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <HAL_SPI_Transmit+0x52>
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d102      	bne.n	8008412 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008410:	e102      	b.n	8008618 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2203      	movs	r2, #3
 8008416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	88fa      	ldrh	r2, [r7, #6]
 800842a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	88fa      	ldrh	r2, [r7, #6]
 8008430:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008458:	d10f      	bne.n	800847a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008468:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008478:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	2b40      	cmp	r3, #64	; 0x40
 8008486:	d007      	beq.n	8008498 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084a0:	d14b      	bne.n	800853a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <HAL_SPI_Transmit+0xf6>
 80084aa:	8afb      	ldrh	r3, [r7, #22]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d13e      	bne.n	800852e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b4:	881a      	ldrh	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c0:	1c9a      	adds	r2, r3, #2
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80084d4:	e02b      	b.n	800852e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d112      	bne.n	800850a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	881a      	ldrh	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	1c9a      	adds	r2, r3, #2
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084fe:	b29b      	uxth	r3, r3
 8008500:	3b01      	subs	r3, #1
 8008502:	b29a      	uxth	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	86da      	strh	r2, [r3, #54]	; 0x36
 8008508:	e011      	b.n	800852e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800850a:	f7fd ffaf 	bl	800646c <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d803      	bhi.n	8008522 <HAL_SPI_Transmit+0x168>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008520:	d102      	bne.n	8008528 <HAL_SPI_Transmit+0x16e>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800852c:	e074      	b.n	8008618 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1ce      	bne.n	80084d6 <HAL_SPI_Transmit+0x11c>
 8008538:	e04c      	b.n	80085d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <HAL_SPI_Transmit+0x18e>
 8008542:	8afb      	ldrh	r3, [r7, #22]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d140      	bne.n	80085ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	7812      	ldrb	r2, [r2, #0]
 8008554:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800856e:	e02c      	b.n	80085ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b02      	cmp	r3, #2
 800857c:	d113      	bne.n	80085a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	330c      	adds	r3, #12
 8008588:	7812      	ldrb	r2, [r2, #0]
 800858a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800859a:	b29b      	uxth	r3, r3
 800859c:	3b01      	subs	r3, #1
 800859e:	b29a      	uxth	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80085a4:	e011      	b.n	80085ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085a6:	f7fd ff61 	bl	800646c <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d803      	bhi.n	80085be <HAL_SPI_Transmit+0x204>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085bc:	d102      	bne.n	80085c4 <HAL_SPI_Transmit+0x20a>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80085c8:	e026      	b.n	8008618 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1cd      	bne.n	8008570 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 fbcb 	bl	8008d74 <SPI_EndRxTxTransaction>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2220      	movs	r2, #32
 80085e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085f2:	2300      	movs	r3, #0
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	613b      	str	r3, [r7, #16]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	613b      	str	r3, [r7, #16]
 8008606:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	77fb      	strb	r3, [r7, #31]
 8008614:	e000      	b.n	8008618 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008616:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008628:	7ffb      	ldrb	r3, [r7, #31]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b088      	sub	sp, #32
 8008636:	af02      	add	r7, sp, #8
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	603b      	str	r3, [r7, #0]
 800863e:	4613      	mov	r3, r2
 8008640:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800864e:	d112      	bne.n	8008676 <HAL_SPI_Receive+0x44>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10e      	bne.n	8008676 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2204      	movs	r2, #4
 800865c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008660:	88fa      	ldrh	r2, [r7, #6]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	4613      	mov	r3, r2
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 f8f1 	bl	8008854 <HAL_SPI_TransmitReceive>
 8008672:	4603      	mov	r3, r0
 8008674:	e0ea      	b.n	800884c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_SPI_Receive+0x52>
 8008680:	2302      	movs	r3, #2
 8008682:	e0e3      	b.n	800884c <HAL_SPI_Receive+0x21a>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800868c:	f7fd feee 	bl	800646c <HAL_GetTick>
 8008690:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b01      	cmp	r3, #1
 800869c:	d002      	beq.n	80086a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800869e:	2302      	movs	r3, #2
 80086a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086a2:	e0ca      	b.n	800883a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <HAL_SPI_Receive+0x7e>
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086b4:	e0c1      	b.n	800883a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2204      	movs	r2, #4
 80086ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	88fa      	ldrh	r2, [r7, #6]
 80086ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	88fa      	ldrh	r2, [r7, #6]
 80086d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086fc:	d10f      	bne.n	800871e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800870c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800871c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008728:	2b40      	cmp	r3, #64	; 0x40
 800872a:	d007      	beq.n	800873c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800873a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d162      	bne.n	800880a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008744:	e02e      	b.n	80087a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b01      	cmp	r3, #1
 8008752:	d115      	bne.n	8008780 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f103 020c 	add.w	r2, r3, #12
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	7812      	ldrb	r2, [r2, #0]
 8008762:	b2d2      	uxtb	r2, r2
 8008764:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008774:	b29b      	uxth	r3, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800877e:	e011      	b.n	80087a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008780:	f7fd fe74 	bl	800646c <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d803      	bhi.n	8008798 <HAL_SPI_Receive+0x166>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008796:	d102      	bne.n	800879e <HAL_SPI_Receive+0x16c>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d102      	bne.n	80087a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80087a2:	e04a      	b.n	800883a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1cb      	bne.n	8008746 <HAL_SPI_Receive+0x114>
 80087ae:	e031      	b.n	8008814 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d113      	bne.n	80087e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c8:	b292      	uxth	r2, r2
 80087ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	1c9a      	adds	r2, r3, #2
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087da:	b29b      	uxth	r3, r3
 80087dc:	3b01      	subs	r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087e4:	e011      	b.n	800880a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087e6:	f7fd fe41 	bl	800646c <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d803      	bhi.n	80087fe <HAL_SPI_Receive+0x1cc>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fc:	d102      	bne.n	8008804 <HAL_SPI_Receive+0x1d2>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d102      	bne.n	800880a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008808:	e017      	b.n	800883a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800880e:	b29b      	uxth	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1cd      	bne.n	80087b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fa45 	bl	8008ca8 <SPI_EndRxTransaction>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2220      	movs	r2, #32
 8008828:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	75fb      	strb	r3, [r7, #23]
 8008836:	e000      	b.n	800883a <HAL_SPI_Receive+0x208>
  }

error :
 8008838:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b08c      	sub	sp, #48	; 0x30
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008862:	2301      	movs	r3, #1
 8008864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008872:	2b01      	cmp	r3, #1
 8008874:	d101      	bne.n	800887a <HAL_SPI_TransmitReceive+0x26>
 8008876:	2302      	movs	r3, #2
 8008878:	e18a      	b.n	8008b90 <HAL_SPI_TransmitReceive+0x33c>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008882:	f7fd fdf3 	bl	800646c <HAL_GetTick>
 8008886:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800888e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008898:	887b      	ldrh	r3, [r7, #2]
 800889a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800889c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d00f      	beq.n	80088c4 <HAL_SPI_TransmitReceive+0x70>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088aa:	d107      	bne.n	80088bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d103      	bne.n	80088bc <HAL_SPI_TransmitReceive+0x68>
 80088b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	d003      	beq.n	80088c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80088bc:	2302      	movs	r3, #2
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80088c2:	e15b      	b.n	8008b7c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d005      	beq.n	80088d6 <HAL_SPI_TransmitReceive+0x82>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <HAL_SPI_TransmitReceive+0x82>
 80088d0:	887b      	ldrh	r3, [r7, #2]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80088dc:	e14e      	b.n	8008b7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d003      	beq.n	80088f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2205      	movs	r2, #5
 80088ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	887a      	ldrh	r2, [r7, #2]
 8008902:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	887a      	ldrh	r2, [r7, #2]
 8008908:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	887a      	ldrh	r2, [r7, #2]
 8008914:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	887a      	ldrh	r2, [r7, #2]
 800891a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008932:	2b40      	cmp	r3, #64	; 0x40
 8008934:	d007      	beq.n	8008946 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008944:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800894e:	d178      	bne.n	8008a42 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <HAL_SPI_TransmitReceive+0x10a>
 8008958:	8b7b      	ldrh	r3, [r7, #26]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d166      	bne.n	8008a2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	881a      	ldrh	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	1c9a      	adds	r2, r3, #2
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008978:	b29b      	uxth	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008982:	e053      	b.n	8008a2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b02      	cmp	r3, #2
 8008990:	d11b      	bne.n	80089ca <HAL_SPI_TransmitReceive+0x176>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008996:	b29b      	uxth	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d016      	beq.n	80089ca <HAL_SPI_TransmitReceive+0x176>
 800899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d113      	bne.n	80089ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	881a      	ldrh	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b2:	1c9a      	adds	r2, r3, #2
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089bc:	b29b      	uxth	r3, r3
 80089be:	3b01      	subs	r3, #1
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d119      	bne.n	8008a0c <HAL_SPI_TransmitReceive+0x1b8>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089dc:	b29b      	uxth	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d014      	beq.n	8008a0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68da      	ldr	r2, [r3, #12]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	b292      	uxth	r2, r2
 80089ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	1c9a      	adds	r2, r3, #2
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a0c:	f7fd fd2e 	bl	800646c <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d807      	bhi.n	8008a2c <HAL_SPI_TransmitReceive+0x1d8>
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d003      	beq.n	8008a2c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a2a:	e0a7      	b.n	8008b7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1a6      	bne.n	8008984 <HAL_SPI_TransmitReceive+0x130>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1a1      	bne.n	8008984 <HAL_SPI_TransmitReceive+0x130>
 8008a40:	e07c      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <HAL_SPI_TransmitReceive+0x1fc>
 8008a4a:	8b7b      	ldrh	r3, [r7, #26]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d16b      	bne.n	8008b28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	330c      	adds	r3, #12
 8008a5a:	7812      	ldrb	r2, [r2, #0]
 8008a5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a76:	e057      	b.n	8008b28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d11c      	bne.n	8008ac0 <HAL_SPI_TransmitReceive+0x26c>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d017      	beq.n	8008ac0 <HAL_SPI_TransmitReceive+0x26c>
 8008a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d114      	bne.n	8008ac0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	330c      	adds	r3, #12
 8008aa0:	7812      	ldrb	r2, [r2, #0]
 8008aa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d119      	bne.n	8008b02 <HAL_SPI_TransmitReceive+0x2ae>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d014      	beq.n	8008b02 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	b2d2      	uxtb	r2, r2
 8008ae4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008afe:	2301      	movs	r3, #1
 8008b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008b02:	f7fd fcb3 	bl	800646c <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d803      	bhi.n	8008b1a <HAL_SPI_TransmitReceive+0x2c6>
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b18:	d102      	bne.n	8008b20 <HAL_SPI_TransmitReceive+0x2cc>
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d103      	bne.n	8008b28 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b26:	e029      	b.n	8008b7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1a2      	bne.n	8008a78 <HAL_SPI_TransmitReceive+0x224>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d19d      	bne.n	8008a78 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 f917 	bl	8008d74 <SPI_EndRxTxTransaction>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d006      	beq.n	8008b5a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2220      	movs	r2, #32
 8008b56:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008b58:	e010      	b.n	8008b7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10b      	bne.n	8008b7a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	e000      	b.n	8008b7c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3730      	adds	r7, #48	; 0x30
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ba8:	f7fd fc60 	bl	800646c <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	1a9b      	subs	r3, r3, r2
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008bb8:	f7fd fc58 	bl	800646c <HAL_GetTick>
 8008bbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008bbe:	4b39      	ldr	r3, [pc, #228]	; (8008ca4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	015b      	lsls	r3, r3, #5
 8008bc4:	0d1b      	lsrs	r3, r3, #20
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	fb02 f303 	mul.w	r3, r2, r3
 8008bcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bce:	e054      	b.n	8008c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd6:	d050      	beq.n	8008c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008bd8:	f7fd fc48 	bl	800646c <HAL_GetTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	69fa      	ldr	r2, [r7, #28]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d902      	bls.n	8008bee <SPI_WaitFlagStateUntilTimeout+0x56>
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d13d      	bne.n	8008c6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008bfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c06:	d111      	bne.n	8008c2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c10:	d004      	beq.n	8008c1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c1a:	d107      	bne.n	8008c2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c34:	d10f      	bne.n	8008c56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e017      	b.n	8008c9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	4013      	ands	r3, r2
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	bf0c      	ite	eq
 8008c8a:	2301      	moveq	r3, #1
 8008c8c:	2300      	movne	r3, #0
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d19b      	bne.n	8008bd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3720      	adds	r7, #32
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20000724 	.word	0x20000724

08008ca8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af02      	add	r7, sp, #8
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cbc:	d111      	bne.n	8008ce2 <SPI_EndRxTransaction+0x3a>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cc6:	d004      	beq.n	8008cd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cd0:	d107      	bne.n	8008ce2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cea:	d12a      	bne.n	8008d42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cf4:	d012      	beq.n	8008d1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2180      	movs	r1, #128	; 0x80
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f7ff ff49 	bl	8008b98 <SPI_WaitFlagStateUntilTimeout>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d02d      	beq.n	8008d68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d10:	f043 0220 	orr.w	r2, r3, #32
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e026      	b.n	8008d6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2200      	movs	r2, #0
 8008d24:	2101      	movs	r1, #1
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff ff36 	bl	8008b98 <SPI_WaitFlagStateUntilTimeout>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d01a      	beq.n	8008d68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d36:	f043 0220 	orr.w	r2, r3, #32
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e013      	b.n	8008d6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7ff ff23 	bl	8008b98 <SPI_WaitFlagStateUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d007      	beq.n	8008d68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5c:	f043 0220 	orr.w	r2, r3, #32
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e000      	b.n	8008d6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008d80:	4b1b      	ldr	r3, [pc, #108]	; (8008df0 <SPI_EndRxTxTransaction+0x7c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a1b      	ldr	r2, [pc, #108]	; (8008df4 <SPI_EndRxTxTransaction+0x80>)
 8008d86:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8a:	0d5b      	lsrs	r3, r3, #21
 8008d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d90:	fb02 f303 	mul.w	r3, r2, r3
 8008d94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d9e:	d112      	bne.n	8008dc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2200      	movs	r2, #0
 8008da8:	2180      	movs	r1, #128	; 0x80
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff fef4 	bl	8008b98 <SPI_WaitFlagStateUntilTimeout>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d016      	beq.n	8008de4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dba:	f043 0220 	orr.w	r2, r3, #32
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e00f      	b.n	8008de6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00a      	beq.n	8008de2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ddc:	2b80      	cmp	r3, #128	; 0x80
 8008dde:	d0f2      	beq.n	8008dc6 <SPI_EndRxTxTransaction+0x52>
 8008de0:	e000      	b.n	8008de4 <SPI_EndRxTxTransaction+0x70>
        break;
 8008de2:	bf00      	nop
  }

  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20000724 	.word	0x20000724
 8008df4:	165e9f81 	.word	0x165e9f81

08008df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e041      	b.n	8008e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7fc fc70 	bl	8005704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3304      	adds	r3, #4
 8008e34:	4619      	mov	r1, r3
 8008e36:	4610      	mov	r0, r2
 8008e38:	f000 fb14 	bl	8009464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d001      	beq.n	8008eb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e03c      	b.n	8008f2a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a1e      	ldr	r2, [pc, #120]	; (8008f38 <HAL_TIM_Base_Start+0xa0>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d018      	beq.n	8008ef4 <HAL_TIM_Base_Start+0x5c>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eca:	d013      	beq.n	8008ef4 <HAL_TIM_Base_Start+0x5c>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a1a      	ldr	r2, [pc, #104]	; (8008f3c <HAL_TIM_Base_Start+0xa4>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00e      	beq.n	8008ef4 <HAL_TIM_Base_Start+0x5c>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a19      	ldr	r2, [pc, #100]	; (8008f40 <HAL_TIM_Base_Start+0xa8>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d009      	beq.n	8008ef4 <HAL_TIM_Base_Start+0x5c>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a17      	ldr	r2, [pc, #92]	; (8008f44 <HAL_TIM_Base_Start+0xac>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d004      	beq.n	8008ef4 <HAL_TIM_Base_Start+0x5c>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a16      	ldr	r2, [pc, #88]	; (8008f48 <HAL_TIM_Base_Start+0xb0>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d111      	bne.n	8008f18 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f003 0307 	and.w	r3, r3, #7
 8008efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2b06      	cmp	r3, #6
 8008f04:	d010      	beq.n	8008f28 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f042 0201 	orr.w	r2, r2, #1
 8008f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f16:	e007      	b.n	8008f28 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f042 0201 	orr.w	r2, r2, #1
 8008f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	40010000 	.word	0x40010000
 8008f3c:	40000400 	.word	0x40000400
 8008f40:	40000800 	.word	0x40000800
 8008f44:	40000c00 	.word	0x40000c00
 8008f48:	40014000 	.word	0x40014000

08008f4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e041      	b.n	8008fe2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f839 	bl	8008fea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	3304      	adds	r3, #4
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	f000 fa6a 	bl	8009464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
	...

08009000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <HAL_TIM_PWM_Start+0x24>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b01      	cmp	r3, #1
 800901a:	bf14      	ite	ne
 800901c:	2301      	movne	r3, #1
 800901e:	2300      	moveq	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	e022      	b.n	800906a <HAL_TIM_PWM_Start+0x6a>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b04      	cmp	r3, #4
 8009028:	d109      	bne.n	800903e <HAL_TIM_PWM_Start+0x3e>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b01      	cmp	r3, #1
 8009034:	bf14      	ite	ne
 8009036:	2301      	movne	r3, #1
 8009038:	2300      	moveq	r3, #0
 800903a:	b2db      	uxtb	r3, r3
 800903c:	e015      	b.n	800906a <HAL_TIM_PWM_Start+0x6a>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b08      	cmp	r3, #8
 8009042:	d109      	bne.n	8009058 <HAL_TIM_PWM_Start+0x58>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b01      	cmp	r3, #1
 800904e:	bf14      	ite	ne
 8009050:	2301      	movne	r3, #1
 8009052:	2300      	moveq	r3, #0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	e008      	b.n	800906a <HAL_TIM_PWM_Start+0x6a>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b01      	cmp	r3, #1
 8009062:	bf14      	ite	ne
 8009064:	2301      	movne	r3, #1
 8009066:	2300      	moveq	r3, #0
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e068      	b.n	8009144 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d104      	bne.n	8009082 <HAL_TIM_PWM_Start+0x82>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009080:	e013      	b.n	80090aa <HAL_TIM_PWM_Start+0xaa>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b04      	cmp	r3, #4
 8009086:	d104      	bne.n	8009092 <HAL_TIM_PWM_Start+0x92>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009090:	e00b      	b.n	80090aa <HAL_TIM_PWM_Start+0xaa>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d104      	bne.n	80090a2 <HAL_TIM_PWM_Start+0xa2>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090a0:	e003      	b.n	80090aa <HAL_TIM_PWM_Start+0xaa>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2202      	movs	r2, #2
 80090a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2201      	movs	r2, #1
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fc7c 	bl	80099b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a23      	ldr	r2, [pc, #140]	; (800914c <HAL_TIM_PWM_Start+0x14c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d107      	bne.n	80090d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a1d      	ldr	r2, [pc, #116]	; (800914c <HAL_TIM_PWM_Start+0x14c>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d018      	beq.n	800910e <HAL_TIM_PWM_Start+0x10e>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e4:	d013      	beq.n	800910e <HAL_TIM_PWM_Start+0x10e>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a19      	ldr	r2, [pc, #100]	; (8009150 <HAL_TIM_PWM_Start+0x150>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00e      	beq.n	800910e <HAL_TIM_PWM_Start+0x10e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a17      	ldr	r2, [pc, #92]	; (8009154 <HAL_TIM_PWM_Start+0x154>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d009      	beq.n	800910e <HAL_TIM_PWM_Start+0x10e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a16      	ldr	r2, [pc, #88]	; (8009158 <HAL_TIM_PWM_Start+0x158>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d004      	beq.n	800910e <HAL_TIM_PWM_Start+0x10e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a14      	ldr	r2, [pc, #80]	; (800915c <HAL_TIM_PWM_Start+0x15c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d111      	bne.n	8009132 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f003 0307 	and.w	r3, r3, #7
 8009118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b06      	cmp	r3, #6
 800911e:	d010      	beq.n	8009142 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f042 0201 	orr.w	r2, r2, #1
 800912e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009130:	e007      	b.n	8009142 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0201 	orr.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	40010000 	.word	0x40010000
 8009150:	40000400 	.word	0x40000400
 8009154:	40000800 	.word	0x40000800
 8009158:	40000c00 	.word	0x40000c00
 800915c:	40014000 	.word	0x40014000

08009160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009172:	2b01      	cmp	r3, #1
 8009174:	d101      	bne.n	800917a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009176:	2302      	movs	r3, #2
 8009178:	e0ac      	b.n	80092d4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b0c      	cmp	r3, #12
 8009186:	f200 809f 	bhi.w	80092c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800918a:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	080091c5 	.word	0x080091c5
 8009194:	080092c9 	.word	0x080092c9
 8009198:	080092c9 	.word	0x080092c9
 800919c:	080092c9 	.word	0x080092c9
 80091a0:	08009205 	.word	0x08009205
 80091a4:	080092c9 	.word	0x080092c9
 80091a8:	080092c9 	.word	0x080092c9
 80091ac:	080092c9 	.word	0x080092c9
 80091b0:	08009247 	.word	0x08009247
 80091b4:	080092c9 	.word	0x080092c9
 80091b8:	080092c9 	.word	0x080092c9
 80091bc:	080092c9 	.word	0x080092c9
 80091c0:	08009287 	.word	0x08009287
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68b9      	ldr	r1, [r7, #8]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f9ca 	bl	8009564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0208 	orr.w	r2, r2, #8
 80091de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	699a      	ldr	r2, [r3, #24]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0204 	bic.w	r2, r2, #4
 80091ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6999      	ldr	r1, [r3, #24]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	691a      	ldr	r2, [r3, #16]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	619a      	str	r2, [r3, #24]
      break;
 8009202:	e062      	b.n	80092ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68b9      	ldr	r1, [r7, #8]
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fa10 	bl	8009630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	699a      	ldr	r2, [r3, #24]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800921e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	699a      	ldr	r2, [r3, #24]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800922e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6999      	ldr	r1, [r3, #24]
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	021a      	lsls	r2, r3, #8
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	619a      	str	r2, [r3, #24]
      break;
 8009244:	e041      	b.n	80092ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	4618      	mov	r0, r3
 800924e:	f000 fa5b 	bl	8009708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69da      	ldr	r2, [r3, #28]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 0208 	orr.w	r2, r2, #8
 8009260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69da      	ldr	r2, [r3, #28]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f022 0204 	bic.w	r2, r2, #4
 8009270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69d9      	ldr	r1, [r3, #28]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	691a      	ldr	r2, [r3, #16]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	61da      	str	r2, [r3, #28]
      break;
 8009284:	e021      	b.n	80092ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	4618      	mov	r0, r3
 800928e:	f000 faa5 	bl	80097dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69da      	ldr	r2, [r3, #28]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	69da      	ldr	r2, [r3, #28]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69d9      	ldr	r1, [r3, #28]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	021a      	lsls	r2, r3, #8
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	61da      	str	r2, [r3, #28]
      break;
 80092c6:	e000      	b.n	80092ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80092c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d101      	bne.n	80092f4 <HAL_TIM_ConfigClockSource+0x18>
 80092f0:	2302      	movs	r3, #2
 80092f2:	e0b3      	b.n	800945c <HAL_TIM_ConfigClockSource+0x180>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009312:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800931a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800932c:	d03e      	beq.n	80093ac <HAL_TIM_ConfigClockSource+0xd0>
 800932e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009332:	f200 8087 	bhi.w	8009444 <HAL_TIM_ConfigClockSource+0x168>
 8009336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800933a:	f000 8085 	beq.w	8009448 <HAL_TIM_ConfigClockSource+0x16c>
 800933e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009342:	d87f      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x168>
 8009344:	2b70      	cmp	r3, #112	; 0x70
 8009346:	d01a      	beq.n	800937e <HAL_TIM_ConfigClockSource+0xa2>
 8009348:	2b70      	cmp	r3, #112	; 0x70
 800934a:	d87b      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x168>
 800934c:	2b60      	cmp	r3, #96	; 0x60
 800934e:	d050      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x116>
 8009350:	2b60      	cmp	r3, #96	; 0x60
 8009352:	d877      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x168>
 8009354:	2b50      	cmp	r3, #80	; 0x50
 8009356:	d03c      	beq.n	80093d2 <HAL_TIM_ConfigClockSource+0xf6>
 8009358:	2b50      	cmp	r3, #80	; 0x50
 800935a:	d873      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x168>
 800935c:	2b40      	cmp	r3, #64	; 0x40
 800935e:	d058      	beq.n	8009412 <HAL_TIM_ConfigClockSource+0x136>
 8009360:	2b40      	cmp	r3, #64	; 0x40
 8009362:	d86f      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x168>
 8009364:	2b30      	cmp	r3, #48	; 0x30
 8009366:	d064      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x156>
 8009368:	2b30      	cmp	r3, #48	; 0x30
 800936a:	d86b      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x168>
 800936c:	2b20      	cmp	r3, #32
 800936e:	d060      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x156>
 8009370:	2b20      	cmp	r3, #32
 8009372:	d867      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x168>
 8009374:	2b00      	cmp	r3, #0
 8009376:	d05c      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x156>
 8009378:	2b10      	cmp	r3, #16
 800937a:	d05a      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800937c:	e062      	b.n	8009444 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6899      	ldr	r1, [r3, #8]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f000 faef 	bl	8009970 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	609a      	str	r2, [r3, #8]
      break;
 80093aa:	e04e      	b.n	800944a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	6899      	ldr	r1, [r3, #8]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f000 fad8 	bl	8009970 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093ce:	609a      	str	r2, [r3, #8]
      break;
 80093d0:	e03b      	b.n	800944a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	6859      	ldr	r1, [r3, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	461a      	mov	r2, r3
 80093e0:	f000 fa4c 	bl	800987c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2150      	movs	r1, #80	; 0x50
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 faa5 	bl	800993a <TIM_ITRx_SetConfig>
      break;
 80093f0:	e02b      	b.n	800944a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	6859      	ldr	r1, [r3, #4]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	461a      	mov	r2, r3
 8009400:	f000 fa6b 	bl	80098da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2160      	movs	r1, #96	; 0x60
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fa95 	bl	800993a <TIM_ITRx_SetConfig>
      break;
 8009410:	e01b      	b.n	800944a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	6859      	ldr	r1, [r3, #4]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	461a      	mov	r2, r3
 8009420:	f000 fa2c 	bl	800987c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2140      	movs	r1, #64	; 0x40
 800942a:	4618      	mov	r0, r3
 800942c:	f000 fa85 	bl	800993a <TIM_ITRx_SetConfig>
      break;
 8009430:	e00b      	b.n	800944a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4619      	mov	r1, r3
 800943c:	4610      	mov	r0, r2
 800943e:	f000 fa7c 	bl	800993a <TIM_ITRx_SetConfig>
        break;
 8009442:	e002      	b.n	800944a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009444:	bf00      	nop
 8009446:	e000      	b.n	800944a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009448:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a34      	ldr	r2, [pc, #208]	; (8009548 <TIM_Base_SetConfig+0xe4>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00f      	beq.n	800949c <TIM_Base_SetConfig+0x38>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009482:	d00b      	beq.n	800949c <TIM_Base_SetConfig+0x38>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a31      	ldr	r2, [pc, #196]	; (800954c <TIM_Base_SetConfig+0xe8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d007      	beq.n	800949c <TIM_Base_SetConfig+0x38>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a30      	ldr	r2, [pc, #192]	; (8009550 <TIM_Base_SetConfig+0xec>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d003      	beq.n	800949c <TIM_Base_SetConfig+0x38>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a2f      	ldr	r2, [pc, #188]	; (8009554 <TIM_Base_SetConfig+0xf0>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d108      	bne.n	80094ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a25      	ldr	r2, [pc, #148]	; (8009548 <TIM_Base_SetConfig+0xe4>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d01b      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094bc:	d017      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a22      	ldr	r2, [pc, #136]	; (800954c <TIM_Base_SetConfig+0xe8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d013      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a21      	ldr	r2, [pc, #132]	; (8009550 <TIM_Base_SetConfig+0xec>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d00f      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a20      	ldr	r2, [pc, #128]	; (8009554 <TIM_Base_SetConfig+0xf0>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00b      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a1f      	ldr	r2, [pc, #124]	; (8009558 <TIM_Base_SetConfig+0xf4>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d007      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a1e      	ldr	r2, [pc, #120]	; (800955c <TIM_Base_SetConfig+0xf8>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d003      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a1d      	ldr	r2, [pc, #116]	; (8009560 <TIM_Base_SetConfig+0xfc>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d108      	bne.n	8009500 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a08      	ldr	r2, [pc, #32]	; (8009548 <TIM_Base_SetConfig+0xe4>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d103      	bne.n	8009534 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	691a      	ldr	r2, [r3, #16]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	615a      	str	r2, [r3, #20]
}
 800953a:	bf00      	nop
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	40010000 	.word	0x40010000
 800954c:	40000400 	.word	0x40000400
 8009550:	40000800 	.word	0x40000800
 8009554:	40000c00 	.word	0x40000c00
 8009558:	40014000 	.word	0x40014000
 800955c:	40014400 	.word	0x40014400
 8009560:	40014800 	.word	0x40014800

08009564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	f023 0201 	bic.w	r2, r3, #1
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 0303 	bic.w	r3, r3, #3
 800959a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f023 0302 	bic.w	r3, r3, #2
 80095ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a1c      	ldr	r2, [pc, #112]	; (800962c <TIM_OC1_SetConfig+0xc8>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d10c      	bne.n	80095da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f023 0308 	bic.w	r3, r3, #8
 80095c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f023 0304 	bic.w	r3, r3, #4
 80095d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a13      	ldr	r2, [pc, #76]	; (800962c <TIM_OC1_SetConfig+0xc8>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d111      	bne.n	8009606 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	4313      	orrs	r3, r2
 8009604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	621a      	str	r2, [r3, #32]
}
 8009620:	bf00      	nop
 8009622:	371c      	adds	r7, #28
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	40010000 	.word	0x40010000

08009630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	f023 0210 	bic.w	r2, r3, #16
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800965e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f023 0320 	bic.w	r3, r3, #32
 800967a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	011b      	lsls	r3, r3, #4
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	4313      	orrs	r3, r2
 8009686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a1e      	ldr	r2, [pc, #120]	; (8009704 <TIM_OC2_SetConfig+0xd4>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d10d      	bne.n	80096ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	011b      	lsls	r3, r3, #4
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a15      	ldr	r2, [pc, #84]	; (8009704 <TIM_OC2_SetConfig+0xd4>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d113      	bne.n	80096dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	621a      	str	r2, [r3, #32]
}
 80096f6:	bf00      	nop
 80096f8:	371c      	adds	r7, #28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	40010000 	.word	0x40010000

08009708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009708:	b480      	push	{r7}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f023 0303 	bic.w	r3, r3, #3
 800973e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4313      	orrs	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	021b      	lsls	r3, r3, #8
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	4313      	orrs	r3, r2
 800975c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a1d      	ldr	r2, [pc, #116]	; (80097d8 <TIM_OC3_SetConfig+0xd0>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d10d      	bne.n	8009782 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800976c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	021b      	lsls	r3, r3, #8
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	4313      	orrs	r3, r2
 8009778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a14      	ldr	r2, [pc, #80]	; (80097d8 <TIM_OC3_SetConfig+0xd0>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d113      	bne.n	80097b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	011b      	lsls	r3, r3, #4
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	011b      	lsls	r3, r3, #4
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	621a      	str	r2, [r3, #32]
}
 80097cc:	bf00      	nop
 80097ce:	371c      	adds	r7, #28
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	40010000 	.word	0x40010000

080097dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800980a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	021b      	lsls	r3, r3, #8
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	4313      	orrs	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	031b      	lsls	r3, r3, #12
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a10      	ldr	r2, [pc, #64]	; (8009878 <TIM_OC4_SetConfig+0x9c>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d109      	bne.n	8009850 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	019b      	lsls	r3, r3, #6
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	4313      	orrs	r3, r2
 800984e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	621a      	str	r2, [r3, #32]
}
 800986a:	bf00      	nop
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	40010000 	.word	0x40010000

0800987c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	f023 0201 	bic.w	r2, r3, #1
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	011b      	lsls	r3, r3, #4
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f023 030a 	bic.w	r3, r3, #10
 80098b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	621a      	str	r2, [r3, #32]
}
 80098ce:	bf00      	nop
 80098d0:	371c      	adds	r7, #28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098da:	b480      	push	{r7}
 80098dc:	b087      	sub	sp, #28
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	f023 0210 	bic.w	r2, r3, #16
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009904:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	031b      	lsls	r3, r3, #12
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	4313      	orrs	r3, r2
 800990e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009916:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	011b      	lsls	r3, r3, #4
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	4313      	orrs	r3, r2
 8009920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	621a      	str	r2, [r3, #32]
}
 800992e:	bf00      	nop
 8009930:	371c      	adds	r7, #28
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800993a:	b480      	push	{r7}
 800993c:	b085      	sub	sp, #20
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4313      	orrs	r3, r2
 8009958:	f043 0307 	orr.w	r3, r3, #7
 800995c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	609a      	str	r2, [r3, #8]
}
 8009964:	bf00      	nop
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800998a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	021a      	lsls	r2, r3, #8
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	431a      	orrs	r2, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	4313      	orrs	r3, r2
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	4313      	orrs	r3, r2
 800999c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	609a      	str	r2, [r3, #8]
}
 80099a4:	bf00      	nop
 80099a6:	371c      	adds	r7, #28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f003 031f 	and.w	r3, r3, #31
 80099c2:	2201      	movs	r2, #1
 80099c4:	fa02 f303 	lsl.w	r3, r2, r3
 80099c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6a1a      	ldr	r2, [r3, #32]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	43db      	mvns	r3, r3
 80099d2:	401a      	ands	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6a1a      	ldr	r2, [r3, #32]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f003 031f 	and.w	r3, r3, #31
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	fa01 f303 	lsl.w	r3, r1, r3
 80099e8:	431a      	orrs	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	621a      	str	r2, [r3, #32]
}
 80099ee:	bf00      	nop
 80099f0:	371c      	adds	r7, #28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
	...

080099fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d101      	bne.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a10:	2302      	movs	r3, #2
 8009a12:	e050      	b.n	8009ab6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a1c      	ldr	r2, [pc, #112]	; (8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d018      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a60:	d013      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a18      	ldr	r2, [pc, #96]	; (8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d00e      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a16      	ldr	r2, [pc, #88]	; (8009acc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d009      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a15      	ldr	r2, [pc, #84]	; (8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d004      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a13      	ldr	r2, [pc, #76]	; (8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d10c      	bne.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	40010000 	.word	0x40010000
 8009ac8:	40000400 	.word	0x40000400
 8009acc:	40000800 	.word	0x40000800
 8009ad0:	40000c00 	.word	0x40000c00
 8009ad4:	40014000 	.word	0x40014000

08009ad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d101      	bne.n	8009af4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009af0:	2302      	movs	r3, #2
 8009af2:	e03d      	b.n	8009b70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <__errno>:
 8009b7c:	4b01      	ldr	r3, [pc, #4]	; (8009b84 <__errno+0x8>)
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	20000824 	.word	0x20000824

08009b88 <__libc_init_array>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	4d0d      	ldr	r5, [pc, #52]	; (8009bc0 <__libc_init_array+0x38>)
 8009b8c:	4c0d      	ldr	r4, [pc, #52]	; (8009bc4 <__libc_init_array+0x3c>)
 8009b8e:	1b64      	subs	r4, r4, r5
 8009b90:	10a4      	asrs	r4, r4, #2
 8009b92:	2600      	movs	r6, #0
 8009b94:	42a6      	cmp	r6, r4
 8009b96:	d109      	bne.n	8009bac <__libc_init_array+0x24>
 8009b98:	4d0b      	ldr	r5, [pc, #44]	; (8009bc8 <__libc_init_array+0x40>)
 8009b9a:	4c0c      	ldr	r4, [pc, #48]	; (8009bcc <__libc_init_array+0x44>)
 8009b9c:	f000 fc4e 	bl	800a43c <_init>
 8009ba0:	1b64      	subs	r4, r4, r5
 8009ba2:	10a4      	asrs	r4, r4, #2
 8009ba4:	2600      	movs	r6, #0
 8009ba6:	42a6      	cmp	r6, r4
 8009ba8:	d105      	bne.n	8009bb6 <__libc_init_array+0x2e>
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb0:	4798      	blx	r3
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	e7ee      	b.n	8009b94 <__libc_init_array+0xc>
 8009bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bba:	4798      	blx	r3
 8009bbc:	3601      	adds	r6, #1
 8009bbe:	e7f2      	b.n	8009ba6 <__libc_init_array+0x1e>
 8009bc0:	0800e628 	.word	0x0800e628
 8009bc4:	0800e628 	.word	0x0800e628
 8009bc8:	0800e628 	.word	0x0800e628
 8009bcc:	0800e62c 	.word	0x0800e62c

08009bd0 <memset>:
 8009bd0:	4402      	add	r2, r0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d100      	bne.n	8009bda <memset+0xa>
 8009bd8:	4770      	bx	lr
 8009bda:	f803 1b01 	strb.w	r1, [r3], #1
 8009bde:	e7f9      	b.n	8009bd4 <memset+0x4>

08009be0 <siprintf>:
 8009be0:	b40e      	push	{r1, r2, r3}
 8009be2:	b500      	push	{lr}
 8009be4:	b09c      	sub	sp, #112	; 0x70
 8009be6:	ab1d      	add	r3, sp, #116	; 0x74
 8009be8:	9002      	str	r0, [sp, #8]
 8009bea:	9006      	str	r0, [sp, #24]
 8009bec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bf0:	4809      	ldr	r0, [pc, #36]	; (8009c18 <siprintf+0x38>)
 8009bf2:	9107      	str	r1, [sp, #28]
 8009bf4:	9104      	str	r1, [sp, #16]
 8009bf6:	4909      	ldr	r1, [pc, #36]	; (8009c1c <siprintf+0x3c>)
 8009bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bfc:	9105      	str	r1, [sp, #20]
 8009bfe:	6800      	ldr	r0, [r0, #0]
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	a902      	add	r1, sp, #8
 8009c04:	f000 f868 	bl	8009cd8 <_svfiprintf_r>
 8009c08:	9b02      	ldr	r3, [sp, #8]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	701a      	strb	r2, [r3, #0]
 8009c0e:	b01c      	add	sp, #112	; 0x70
 8009c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c14:	b003      	add	sp, #12
 8009c16:	4770      	bx	lr
 8009c18:	20000824 	.word	0x20000824
 8009c1c:	ffff0208 	.word	0xffff0208

08009c20 <__ssputs_r>:
 8009c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c24:	688e      	ldr	r6, [r1, #8]
 8009c26:	429e      	cmp	r6, r3
 8009c28:	4682      	mov	sl, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	4690      	mov	r8, r2
 8009c2e:	461f      	mov	r7, r3
 8009c30:	d838      	bhi.n	8009ca4 <__ssputs_r+0x84>
 8009c32:	898a      	ldrh	r2, [r1, #12]
 8009c34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c38:	d032      	beq.n	8009ca0 <__ssputs_r+0x80>
 8009c3a:	6825      	ldr	r5, [r4, #0]
 8009c3c:	6909      	ldr	r1, [r1, #16]
 8009c3e:	eba5 0901 	sub.w	r9, r5, r1
 8009c42:	6965      	ldr	r5, [r4, #20]
 8009c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	444b      	add	r3, r9
 8009c50:	106d      	asrs	r5, r5, #1
 8009c52:	429d      	cmp	r5, r3
 8009c54:	bf38      	it	cc
 8009c56:	461d      	movcc	r5, r3
 8009c58:	0553      	lsls	r3, r2, #21
 8009c5a:	d531      	bpl.n	8009cc0 <__ssputs_r+0xa0>
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	f000 fb47 	bl	800a2f0 <_malloc_r>
 8009c62:	4606      	mov	r6, r0
 8009c64:	b950      	cbnz	r0, 8009c7c <__ssputs_r+0x5c>
 8009c66:	230c      	movs	r3, #12
 8009c68:	f8ca 3000 	str.w	r3, [sl]
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c72:	81a3      	strh	r3, [r4, #12]
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295
 8009c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7c:	6921      	ldr	r1, [r4, #16]
 8009c7e:	464a      	mov	r2, r9
 8009c80:	f000 fabe 	bl	800a200 <memcpy>
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c8e:	81a3      	strh	r3, [r4, #12]
 8009c90:	6126      	str	r6, [r4, #16]
 8009c92:	6165      	str	r5, [r4, #20]
 8009c94:	444e      	add	r6, r9
 8009c96:	eba5 0509 	sub.w	r5, r5, r9
 8009c9a:	6026      	str	r6, [r4, #0]
 8009c9c:	60a5      	str	r5, [r4, #8]
 8009c9e:	463e      	mov	r6, r7
 8009ca0:	42be      	cmp	r6, r7
 8009ca2:	d900      	bls.n	8009ca6 <__ssputs_r+0x86>
 8009ca4:	463e      	mov	r6, r7
 8009ca6:	4632      	mov	r2, r6
 8009ca8:	6820      	ldr	r0, [r4, #0]
 8009caa:	4641      	mov	r1, r8
 8009cac:	f000 fab6 	bl	800a21c <memmove>
 8009cb0:	68a3      	ldr	r3, [r4, #8]
 8009cb2:	6822      	ldr	r2, [r4, #0]
 8009cb4:	1b9b      	subs	r3, r3, r6
 8009cb6:	4432      	add	r2, r6
 8009cb8:	60a3      	str	r3, [r4, #8]
 8009cba:	6022      	str	r2, [r4, #0]
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	e7db      	b.n	8009c78 <__ssputs_r+0x58>
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	f000 fb6f 	bl	800a3a4 <_realloc_r>
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d1e1      	bne.n	8009c90 <__ssputs_r+0x70>
 8009ccc:	6921      	ldr	r1, [r4, #16]
 8009cce:	4650      	mov	r0, sl
 8009cd0:	f000 fabe 	bl	800a250 <_free_r>
 8009cd4:	e7c7      	b.n	8009c66 <__ssputs_r+0x46>
	...

08009cd8 <_svfiprintf_r>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	4698      	mov	r8, r3
 8009cde:	898b      	ldrh	r3, [r1, #12]
 8009ce0:	061b      	lsls	r3, r3, #24
 8009ce2:	b09d      	sub	sp, #116	; 0x74
 8009ce4:	4607      	mov	r7, r0
 8009ce6:	460d      	mov	r5, r1
 8009ce8:	4614      	mov	r4, r2
 8009cea:	d50e      	bpl.n	8009d0a <_svfiprintf_r+0x32>
 8009cec:	690b      	ldr	r3, [r1, #16]
 8009cee:	b963      	cbnz	r3, 8009d0a <_svfiprintf_r+0x32>
 8009cf0:	2140      	movs	r1, #64	; 0x40
 8009cf2:	f000 fafd 	bl	800a2f0 <_malloc_r>
 8009cf6:	6028      	str	r0, [r5, #0]
 8009cf8:	6128      	str	r0, [r5, #16]
 8009cfa:	b920      	cbnz	r0, 8009d06 <_svfiprintf_r+0x2e>
 8009cfc:	230c      	movs	r3, #12
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	f04f 30ff 	mov.w	r0, #4294967295
 8009d04:	e0d1      	b.n	8009eaa <_svfiprintf_r+0x1d2>
 8009d06:	2340      	movs	r3, #64	; 0x40
 8009d08:	616b      	str	r3, [r5, #20]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d0e:	2320      	movs	r3, #32
 8009d10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d14:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d18:	2330      	movs	r3, #48	; 0x30
 8009d1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ec4 <_svfiprintf_r+0x1ec>
 8009d1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d22:	f04f 0901 	mov.w	r9, #1
 8009d26:	4623      	mov	r3, r4
 8009d28:	469a      	mov	sl, r3
 8009d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d2e:	b10a      	cbz	r2, 8009d34 <_svfiprintf_r+0x5c>
 8009d30:	2a25      	cmp	r2, #37	; 0x25
 8009d32:	d1f9      	bne.n	8009d28 <_svfiprintf_r+0x50>
 8009d34:	ebba 0b04 	subs.w	fp, sl, r4
 8009d38:	d00b      	beq.n	8009d52 <_svfiprintf_r+0x7a>
 8009d3a:	465b      	mov	r3, fp
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	4629      	mov	r1, r5
 8009d40:	4638      	mov	r0, r7
 8009d42:	f7ff ff6d 	bl	8009c20 <__ssputs_r>
 8009d46:	3001      	adds	r0, #1
 8009d48:	f000 80aa 	beq.w	8009ea0 <_svfiprintf_r+0x1c8>
 8009d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d4e:	445a      	add	r2, fp
 8009d50:	9209      	str	r2, [sp, #36]	; 0x24
 8009d52:	f89a 3000 	ldrb.w	r3, [sl]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 80a2 	beq.w	8009ea0 <_svfiprintf_r+0x1c8>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d66:	f10a 0a01 	add.w	sl, sl, #1
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	9307      	str	r3, [sp, #28]
 8009d6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d72:	931a      	str	r3, [sp, #104]	; 0x68
 8009d74:	4654      	mov	r4, sl
 8009d76:	2205      	movs	r2, #5
 8009d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d7c:	4851      	ldr	r0, [pc, #324]	; (8009ec4 <_svfiprintf_r+0x1ec>)
 8009d7e:	f7f6 fa47 	bl	8000210 <memchr>
 8009d82:	9a04      	ldr	r2, [sp, #16]
 8009d84:	b9d8      	cbnz	r0, 8009dbe <_svfiprintf_r+0xe6>
 8009d86:	06d0      	lsls	r0, r2, #27
 8009d88:	bf44      	itt	mi
 8009d8a:	2320      	movmi	r3, #32
 8009d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d90:	0711      	lsls	r1, r2, #28
 8009d92:	bf44      	itt	mi
 8009d94:	232b      	movmi	r3, #43	; 0x2b
 8009d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8009da0:	d015      	beq.n	8009dce <_svfiprintf_r+0xf6>
 8009da2:	9a07      	ldr	r2, [sp, #28]
 8009da4:	4654      	mov	r4, sl
 8009da6:	2000      	movs	r0, #0
 8009da8:	f04f 0c0a 	mov.w	ip, #10
 8009dac:	4621      	mov	r1, r4
 8009dae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db2:	3b30      	subs	r3, #48	; 0x30
 8009db4:	2b09      	cmp	r3, #9
 8009db6:	d94e      	bls.n	8009e56 <_svfiprintf_r+0x17e>
 8009db8:	b1b0      	cbz	r0, 8009de8 <_svfiprintf_r+0x110>
 8009dba:	9207      	str	r2, [sp, #28]
 8009dbc:	e014      	b.n	8009de8 <_svfiprintf_r+0x110>
 8009dbe:	eba0 0308 	sub.w	r3, r0, r8
 8009dc2:	fa09 f303 	lsl.w	r3, r9, r3
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	46a2      	mov	sl, r4
 8009dcc:	e7d2      	b.n	8009d74 <_svfiprintf_r+0x9c>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	1d19      	adds	r1, r3, #4
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	9103      	str	r1, [sp, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	bfbb      	ittet	lt
 8009dda:	425b      	neglt	r3, r3
 8009ddc:	f042 0202 	orrlt.w	r2, r2, #2
 8009de0:	9307      	strge	r3, [sp, #28]
 8009de2:	9307      	strlt	r3, [sp, #28]
 8009de4:	bfb8      	it	lt
 8009de6:	9204      	strlt	r2, [sp, #16]
 8009de8:	7823      	ldrb	r3, [r4, #0]
 8009dea:	2b2e      	cmp	r3, #46	; 0x2e
 8009dec:	d10c      	bne.n	8009e08 <_svfiprintf_r+0x130>
 8009dee:	7863      	ldrb	r3, [r4, #1]
 8009df0:	2b2a      	cmp	r3, #42	; 0x2a
 8009df2:	d135      	bne.n	8009e60 <_svfiprintf_r+0x188>
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	1d1a      	adds	r2, r3, #4
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	9203      	str	r2, [sp, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	bfb8      	it	lt
 8009e00:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e04:	3402      	adds	r4, #2
 8009e06:	9305      	str	r3, [sp, #20]
 8009e08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ed4 <_svfiprintf_r+0x1fc>
 8009e0c:	7821      	ldrb	r1, [r4, #0]
 8009e0e:	2203      	movs	r2, #3
 8009e10:	4650      	mov	r0, sl
 8009e12:	f7f6 f9fd 	bl	8000210 <memchr>
 8009e16:	b140      	cbz	r0, 8009e2a <_svfiprintf_r+0x152>
 8009e18:	2340      	movs	r3, #64	; 0x40
 8009e1a:	eba0 000a 	sub.w	r0, r0, sl
 8009e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e22:	9b04      	ldr	r3, [sp, #16]
 8009e24:	4303      	orrs	r3, r0
 8009e26:	3401      	adds	r4, #1
 8009e28:	9304      	str	r3, [sp, #16]
 8009e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2e:	4826      	ldr	r0, [pc, #152]	; (8009ec8 <_svfiprintf_r+0x1f0>)
 8009e30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e34:	2206      	movs	r2, #6
 8009e36:	f7f6 f9eb 	bl	8000210 <memchr>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d038      	beq.n	8009eb0 <_svfiprintf_r+0x1d8>
 8009e3e:	4b23      	ldr	r3, [pc, #140]	; (8009ecc <_svfiprintf_r+0x1f4>)
 8009e40:	bb1b      	cbnz	r3, 8009e8a <_svfiprintf_r+0x1b2>
 8009e42:	9b03      	ldr	r3, [sp, #12]
 8009e44:	3307      	adds	r3, #7
 8009e46:	f023 0307 	bic.w	r3, r3, #7
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	9303      	str	r3, [sp, #12]
 8009e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e50:	4433      	add	r3, r6
 8009e52:	9309      	str	r3, [sp, #36]	; 0x24
 8009e54:	e767      	b.n	8009d26 <_svfiprintf_r+0x4e>
 8009e56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	e7a5      	b.n	8009dac <_svfiprintf_r+0xd4>
 8009e60:	2300      	movs	r3, #0
 8009e62:	3401      	adds	r4, #1
 8009e64:	9305      	str	r3, [sp, #20]
 8009e66:	4619      	mov	r1, r3
 8009e68:	f04f 0c0a 	mov.w	ip, #10
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e72:	3a30      	subs	r2, #48	; 0x30
 8009e74:	2a09      	cmp	r2, #9
 8009e76:	d903      	bls.n	8009e80 <_svfiprintf_r+0x1a8>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d0c5      	beq.n	8009e08 <_svfiprintf_r+0x130>
 8009e7c:	9105      	str	r1, [sp, #20]
 8009e7e:	e7c3      	b.n	8009e08 <_svfiprintf_r+0x130>
 8009e80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e84:	4604      	mov	r4, r0
 8009e86:	2301      	movs	r3, #1
 8009e88:	e7f0      	b.n	8009e6c <_svfiprintf_r+0x194>
 8009e8a:	ab03      	add	r3, sp, #12
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	462a      	mov	r2, r5
 8009e90:	4b0f      	ldr	r3, [pc, #60]	; (8009ed0 <_svfiprintf_r+0x1f8>)
 8009e92:	a904      	add	r1, sp, #16
 8009e94:	4638      	mov	r0, r7
 8009e96:	f3af 8000 	nop.w
 8009e9a:	1c42      	adds	r2, r0, #1
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	d1d6      	bne.n	8009e4e <_svfiprintf_r+0x176>
 8009ea0:	89ab      	ldrh	r3, [r5, #12]
 8009ea2:	065b      	lsls	r3, r3, #25
 8009ea4:	f53f af2c 	bmi.w	8009d00 <_svfiprintf_r+0x28>
 8009ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eaa:	b01d      	add	sp, #116	; 0x74
 8009eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb0:	ab03      	add	r3, sp, #12
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	462a      	mov	r2, r5
 8009eb6:	4b06      	ldr	r3, [pc, #24]	; (8009ed0 <_svfiprintf_r+0x1f8>)
 8009eb8:	a904      	add	r1, sp, #16
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f000 f87a 	bl	8009fb4 <_printf_i>
 8009ec0:	e7eb      	b.n	8009e9a <_svfiprintf_r+0x1c2>
 8009ec2:	bf00      	nop
 8009ec4:	0800e5ec 	.word	0x0800e5ec
 8009ec8:	0800e5f6 	.word	0x0800e5f6
 8009ecc:	00000000 	.word	0x00000000
 8009ed0:	08009c21 	.word	0x08009c21
 8009ed4:	0800e5f2 	.word	0x0800e5f2

08009ed8 <_printf_common>:
 8009ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009edc:	4616      	mov	r6, r2
 8009ede:	4699      	mov	r9, r3
 8009ee0:	688a      	ldr	r2, [r1, #8]
 8009ee2:	690b      	ldr	r3, [r1, #16]
 8009ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	bfb8      	it	lt
 8009eec:	4613      	movlt	r3, r2
 8009eee:	6033      	str	r3, [r6, #0]
 8009ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	b10a      	cbz	r2, 8009efe <_printf_common+0x26>
 8009efa:	3301      	adds	r3, #1
 8009efc:	6033      	str	r3, [r6, #0]
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	0699      	lsls	r1, r3, #26
 8009f02:	bf42      	ittt	mi
 8009f04:	6833      	ldrmi	r3, [r6, #0]
 8009f06:	3302      	addmi	r3, #2
 8009f08:	6033      	strmi	r3, [r6, #0]
 8009f0a:	6825      	ldr	r5, [r4, #0]
 8009f0c:	f015 0506 	ands.w	r5, r5, #6
 8009f10:	d106      	bne.n	8009f20 <_printf_common+0x48>
 8009f12:	f104 0a19 	add.w	sl, r4, #25
 8009f16:	68e3      	ldr	r3, [r4, #12]
 8009f18:	6832      	ldr	r2, [r6, #0]
 8009f1a:	1a9b      	subs	r3, r3, r2
 8009f1c:	42ab      	cmp	r3, r5
 8009f1e:	dc26      	bgt.n	8009f6e <_printf_common+0x96>
 8009f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f24:	1e13      	subs	r3, r2, #0
 8009f26:	6822      	ldr	r2, [r4, #0]
 8009f28:	bf18      	it	ne
 8009f2a:	2301      	movne	r3, #1
 8009f2c:	0692      	lsls	r2, r2, #26
 8009f2e:	d42b      	bmi.n	8009f88 <_printf_common+0xb0>
 8009f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f34:	4649      	mov	r1, r9
 8009f36:	4638      	mov	r0, r7
 8009f38:	47c0      	blx	r8
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d01e      	beq.n	8009f7c <_printf_common+0xa4>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	68e5      	ldr	r5, [r4, #12]
 8009f42:	6832      	ldr	r2, [r6, #0]
 8009f44:	f003 0306 	and.w	r3, r3, #6
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	bf08      	it	eq
 8009f4c:	1aad      	subeq	r5, r5, r2
 8009f4e:	68a3      	ldr	r3, [r4, #8]
 8009f50:	6922      	ldr	r2, [r4, #16]
 8009f52:	bf0c      	ite	eq
 8009f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f58:	2500      	movne	r5, #0
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	bfc4      	itt	gt
 8009f5e:	1a9b      	subgt	r3, r3, r2
 8009f60:	18ed      	addgt	r5, r5, r3
 8009f62:	2600      	movs	r6, #0
 8009f64:	341a      	adds	r4, #26
 8009f66:	42b5      	cmp	r5, r6
 8009f68:	d11a      	bne.n	8009fa0 <_printf_common+0xc8>
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	e008      	b.n	8009f80 <_printf_common+0xa8>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	4652      	mov	r2, sl
 8009f72:	4649      	mov	r1, r9
 8009f74:	4638      	mov	r0, r7
 8009f76:	47c0      	blx	r8
 8009f78:	3001      	adds	r0, #1
 8009f7a:	d103      	bne.n	8009f84 <_printf_common+0xac>
 8009f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f84:	3501      	adds	r5, #1
 8009f86:	e7c6      	b.n	8009f16 <_printf_common+0x3e>
 8009f88:	18e1      	adds	r1, r4, r3
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	2030      	movs	r0, #48	; 0x30
 8009f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f92:	4422      	add	r2, r4
 8009f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f9c:	3302      	adds	r3, #2
 8009f9e:	e7c7      	b.n	8009f30 <_printf_common+0x58>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	47c0      	blx	r8
 8009faa:	3001      	adds	r0, #1
 8009fac:	d0e6      	beq.n	8009f7c <_printf_common+0xa4>
 8009fae:	3601      	adds	r6, #1
 8009fb0:	e7d9      	b.n	8009f66 <_printf_common+0x8e>
	...

08009fb4 <_printf_i>:
 8009fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb8:	460c      	mov	r4, r1
 8009fba:	4691      	mov	r9, r2
 8009fbc:	7e27      	ldrb	r7, [r4, #24]
 8009fbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009fc0:	2f78      	cmp	r7, #120	; 0x78
 8009fc2:	4680      	mov	r8, r0
 8009fc4:	469a      	mov	sl, r3
 8009fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fca:	d807      	bhi.n	8009fdc <_printf_i+0x28>
 8009fcc:	2f62      	cmp	r7, #98	; 0x62
 8009fce:	d80a      	bhi.n	8009fe6 <_printf_i+0x32>
 8009fd0:	2f00      	cmp	r7, #0
 8009fd2:	f000 80d8 	beq.w	800a186 <_printf_i+0x1d2>
 8009fd6:	2f58      	cmp	r7, #88	; 0x58
 8009fd8:	f000 80a3 	beq.w	800a122 <_printf_i+0x16e>
 8009fdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fe4:	e03a      	b.n	800a05c <_printf_i+0xa8>
 8009fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fea:	2b15      	cmp	r3, #21
 8009fec:	d8f6      	bhi.n	8009fdc <_printf_i+0x28>
 8009fee:	a001      	add	r0, pc, #4	; (adr r0, 8009ff4 <_printf_i+0x40>)
 8009ff0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009ff4:	0800a04d 	.word	0x0800a04d
 8009ff8:	0800a061 	.word	0x0800a061
 8009ffc:	08009fdd 	.word	0x08009fdd
 800a000:	08009fdd 	.word	0x08009fdd
 800a004:	08009fdd 	.word	0x08009fdd
 800a008:	08009fdd 	.word	0x08009fdd
 800a00c:	0800a061 	.word	0x0800a061
 800a010:	08009fdd 	.word	0x08009fdd
 800a014:	08009fdd 	.word	0x08009fdd
 800a018:	08009fdd 	.word	0x08009fdd
 800a01c:	08009fdd 	.word	0x08009fdd
 800a020:	0800a16d 	.word	0x0800a16d
 800a024:	0800a091 	.word	0x0800a091
 800a028:	0800a14f 	.word	0x0800a14f
 800a02c:	08009fdd 	.word	0x08009fdd
 800a030:	08009fdd 	.word	0x08009fdd
 800a034:	0800a18f 	.word	0x0800a18f
 800a038:	08009fdd 	.word	0x08009fdd
 800a03c:	0800a091 	.word	0x0800a091
 800a040:	08009fdd 	.word	0x08009fdd
 800a044:	08009fdd 	.word	0x08009fdd
 800a048:	0800a157 	.word	0x0800a157
 800a04c:	680b      	ldr	r3, [r1, #0]
 800a04e:	1d1a      	adds	r2, r3, #4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	600a      	str	r2, [r1, #0]
 800a054:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a05c:	2301      	movs	r3, #1
 800a05e:	e0a3      	b.n	800a1a8 <_printf_i+0x1f4>
 800a060:	6825      	ldr	r5, [r4, #0]
 800a062:	6808      	ldr	r0, [r1, #0]
 800a064:	062e      	lsls	r6, r5, #24
 800a066:	f100 0304 	add.w	r3, r0, #4
 800a06a:	d50a      	bpl.n	800a082 <_printf_i+0xce>
 800a06c:	6805      	ldr	r5, [r0, #0]
 800a06e:	600b      	str	r3, [r1, #0]
 800a070:	2d00      	cmp	r5, #0
 800a072:	da03      	bge.n	800a07c <_printf_i+0xc8>
 800a074:	232d      	movs	r3, #45	; 0x2d
 800a076:	426d      	negs	r5, r5
 800a078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a07c:	485e      	ldr	r0, [pc, #376]	; (800a1f8 <_printf_i+0x244>)
 800a07e:	230a      	movs	r3, #10
 800a080:	e019      	b.n	800a0b6 <_printf_i+0x102>
 800a082:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a086:	6805      	ldr	r5, [r0, #0]
 800a088:	600b      	str	r3, [r1, #0]
 800a08a:	bf18      	it	ne
 800a08c:	b22d      	sxthne	r5, r5
 800a08e:	e7ef      	b.n	800a070 <_printf_i+0xbc>
 800a090:	680b      	ldr	r3, [r1, #0]
 800a092:	6825      	ldr	r5, [r4, #0]
 800a094:	1d18      	adds	r0, r3, #4
 800a096:	6008      	str	r0, [r1, #0]
 800a098:	0628      	lsls	r0, r5, #24
 800a09a:	d501      	bpl.n	800a0a0 <_printf_i+0xec>
 800a09c:	681d      	ldr	r5, [r3, #0]
 800a09e:	e002      	b.n	800a0a6 <_printf_i+0xf2>
 800a0a0:	0669      	lsls	r1, r5, #25
 800a0a2:	d5fb      	bpl.n	800a09c <_printf_i+0xe8>
 800a0a4:	881d      	ldrh	r5, [r3, #0]
 800a0a6:	4854      	ldr	r0, [pc, #336]	; (800a1f8 <_printf_i+0x244>)
 800a0a8:	2f6f      	cmp	r7, #111	; 0x6f
 800a0aa:	bf0c      	ite	eq
 800a0ac:	2308      	moveq	r3, #8
 800a0ae:	230a      	movne	r3, #10
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0b6:	6866      	ldr	r6, [r4, #4]
 800a0b8:	60a6      	str	r6, [r4, #8]
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	bfa2      	ittt	ge
 800a0be:	6821      	ldrge	r1, [r4, #0]
 800a0c0:	f021 0104 	bicge.w	r1, r1, #4
 800a0c4:	6021      	strge	r1, [r4, #0]
 800a0c6:	b90d      	cbnz	r5, 800a0cc <_printf_i+0x118>
 800a0c8:	2e00      	cmp	r6, #0
 800a0ca:	d04d      	beq.n	800a168 <_printf_i+0x1b4>
 800a0cc:	4616      	mov	r6, r2
 800a0ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0d2:	fb03 5711 	mls	r7, r3, r1, r5
 800a0d6:	5dc7      	ldrb	r7, [r0, r7]
 800a0d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0dc:	462f      	mov	r7, r5
 800a0de:	42bb      	cmp	r3, r7
 800a0e0:	460d      	mov	r5, r1
 800a0e2:	d9f4      	bls.n	800a0ce <_printf_i+0x11a>
 800a0e4:	2b08      	cmp	r3, #8
 800a0e6:	d10b      	bne.n	800a100 <_printf_i+0x14c>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	07df      	lsls	r7, r3, #31
 800a0ec:	d508      	bpl.n	800a100 <_printf_i+0x14c>
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	6861      	ldr	r1, [r4, #4]
 800a0f2:	4299      	cmp	r1, r3
 800a0f4:	bfde      	ittt	le
 800a0f6:	2330      	movle	r3, #48	; 0x30
 800a0f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a100:	1b92      	subs	r2, r2, r6
 800a102:	6122      	str	r2, [r4, #16]
 800a104:	f8cd a000 	str.w	sl, [sp]
 800a108:	464b      	mov	r3, r9
 800a10a:	aa03      	add	r2, sp, #12
 800a10c:	4621      	mov	r1, r4
 800a10e:	4640      	mov	r0, r8
 800a110:	f7ff fee2 	bl	8009ed8 <_printf_common>
 800a114:	3001      	adds	r0, #1
 800a116:	d14c      	bne.n	800a1b2 <_printf_i+0x1fe>
 800a118:	f04f 30ff 	mov.w	r0, #4294967295
 800a11c:	b004      	add	sp, #16
 800a11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a122:	4835      	ldr	r0, [pc, #212]	; (800a1f8 <_printf_i+0x244>)
 800a124:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	680e      	ldr	r6, [r1, #0]
 800a12c:	061f      	lsls	r7, r3, #24
 800a12e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a132:	600e      	str	r6, [r1, #0]
 800a134:	d514      	bpl.n	800a160 <_printf_i+0x1ac>
 800a136:	07d9      	lsls	r1, r3, #31
 800a138:	bf44      	itt	mi
 800a13a:	f043 0320 	orrmi.w	r3, r3, #32
 800a13e:	6023      	strmi	r3, [r4, #0]
 800a140:	b91d      	cbnz	r5, 800a14a <_printf_i+0x196>
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	f023 0320 	bic.w	r3, r3, #32
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	2310      	movs	r3, #16
 800a14c:	e7b0      	b.n	800a0b0 <_printf_i+0xfc>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	f043 0320 	orr.w	r3, r3, #32
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	2378      	movs	r3, #120	; 0x78
 800a158:	4828      	ldr	r0, [pc, #160]	; (800a1fc <_printf_i+0x248>)
 800a15a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a15e:	e7e3      	b.n	800a128 <_printf_i+0x174>
 800a160:	065e      	lsls	r6, r3, #25
 800a162:	bf48      	it	mi
 800a164:	b2ad      	uxthmi	r5, r5
 800a166:	e7e6      	b.n	800a136 <_printf_i+0x182>
 800a168:	4616      	mov	r6, r2
 800a16a:	e7bb      	b.n	800a0e4 <_printf_i+0x130>
 800a16c:	680b      	ldr	r3, [r1, #0]
 800a16e:	6826      	ldr	r6, [r4, #0]
 800a170:	6960      	ldr	r0, [r4, #20]
 800a172:	1d1d      	adds	r5, r3, #4
 800a174:	600d      	str	r5, [r1, #0]
 800a176:	0635      	lsls	r5, r6, #24
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	d501      	bpl.n	800a180 <_printf_i+0x1cc>
 800a17c:	6018      	str	r0, [r3, #0]
 800a17e:	e002      	b.n	800a186 <_printf_i+0x1d2>
 800a180:	0671      	lsls	r1, r6, #25
 800a182:	d5fb      	bpl.n	800a17c <_printf_i+0x1c8>
 800a184:	8018      	strh	r0, [r3, #0]
 800a186:	2300      	movs	r3, #0
 800a188:	6123      	str	r3, [r4, #16]
 800a18a:	4616      	mov	r6, r2
 800a18c:	e7ba      	b.n	800a104 <_printf_i+0x150>
 800a18e:	680b      	ldr	r3, [r1, #0]
 800a190:	1d1a      	adds	r2, r3, #4
 800a192:	600a      	str	r2, [r1, #0]
 800a194:	681e      	ldr	r6, [r3, #0]
 800a196:	6862      	ldr	r2, [r4, #4]
 800a198:	2100      	movs	r1, #0
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7f6 f838 	bl	8000210 <memchr>
 800a1a0:	b108      	cbz	r0, 800a1a6 <_printf_i+0x1f2>
 800a1a2:	1b80      	subs	r0, r0, r6
 800a1a4:	6060      	str	r0, [r4, #4]
 800a1a6:	6863      	ldr	r3, [r4, #4]
 800a1a8:	6123      	str	r3, [r4, #16]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1b0:	e7a8      	b.n	800a104 <_printf_i+0x150>
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	47d0      	blx	sl
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d0ab      	beq.n	800a118 <_printf_i+0x164>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	079b      	lsls	r3, r3, #30
 800a1c4:	d413      	bmi.n	800a1ee <_printf_i+0x23a>
 800a1c6:	68e0      	ldr	r0, [r4, #12]
 800a1c8:	9b03      	ldr	r3, [sp, #12]
 800a1ca:	4298      	cmp	r0, r3
 800a1cc:	bfb8      	it	lt
 800a1ce:	4618      	movlt	r0, r3
 800a1d0:	e7a4      	b.n	800a11c <_printf_i+0x168>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4632      	mov	r2, r6
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	4640      	mov	r0, r8
 800a1da:	47d0      	blx	sl
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d09b      	beq.n	800a118 <_printf_i+0x164>
 800a1e0:	3501      	adds	r5, #1
 800a1e2:	68e3      	ldr	r3, [r4, #12]
 800a1e4:	9903      	ldr	r1, [sp, #12]
 800a1e6:	1a5b      	subs	r3, r3, r1
 800a1e8:	42ab      	cmp	r3, r5
 800a1ea:	dcf2      	bgt.n	800a1d2 <_printf_i+0x21e>
 800a1ec:	e7eb      	b.n	800a1c6 <_printf_i+0x212>
 800a1ee:	2500      	movs	r5, #0
 800a1f0:	f104 0619 	add.w	r6, r4, #25
 800a1f4:	e7f5      	b.n	800a1e2 <_printf_i+0x22e>
 800a1f6:	bf00      	nop
 800a1f8:	0800e5fd 	.word	0x0800e5fd
 800a1fc:	0800e60e 	.word	0x0800e60e

0800a200 <memcpy>:
 800a200:	440a      	add	r2, r1
 800a202:	4291      	cmp	r1, r2
 800a204:	f100 33ff 	add.w	r3, r0, #4294967295
 800a208:	d100      	bne.n	800a20c <memcpy+0xc>
 800a20a:	4770      	bx	lr
 800a20c:	b510      	push	{r4, lr}
 800a20e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a212:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a216:	4291      	cmp	r1, r2
 800a218:	d1f9      	bne.n	800a20e <memcpy+0xe>
 800a21a:	bd10      	pop	{r4, pc}

0800a21c <memmove>:
 800a21c:	4288      	cmp	r0, r1
 800a21e:	b510      	push	{r4, lr}
 800a220:	eb01 0402 	add.w	r4, r1, r2
 800a224:	d902      	bls.n	800a22c <memmove+0x10>
 800a226:	4284      	cmp	r4, r0
 800a228:	4623      	mov	r3, r4
 800a22a:	d807      	bhi.n	800a23c <memmove+0x20>
 800a22c:	1e43      	subs	r3, r0, #1
 800a22e:	42a1      	cmp	r1, r4
 800a230:	d008      	beq.n	800a244 <memmove+0x28>
 800a232:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a23a:	e7f8      	b.n	800a22e <memmove+0x12>
 800a23c:	4402      	add	r2, r0
 800a23e:	4601      	mov	r1, r0
 800a240:	428a      	cmp	r2, r1
 800a242:	d100      	bne.n	800a246 <memmove+0x2a>
 800a244:	bd10      	pop	{r4, pc}
 800a246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a24a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a24e:	e7f7      	b.n	800a240 <memmove+0x24>

0800a250 <_free_r>:
 800a250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a252:	2900      	cmp	r1, #0
 800a254:	d048      	beq.n	800a2e8 <_free_r+0x98>
 800a256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a25a:	9001      	str	r0, [sp, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f1a1 0404 	sub.w	r4, r1, #4
 800a262:	bfb8      	it	lt
 800a264:	18e4      	addlt	r4, r4, r3
 800a266:	f000 f8d3 	bl	800a410 <__malloc_lock>
 800a26a:	4a20      	ldr	r2, [pc, #128]	; (800a2ec <_free_r+0x9c>)
 800a26c:	9801      	ldr	r0, [sp, #4]
 800a26e:	6813      	ldr	r3, [r2, #0]
 800a270:	4615      	mov	r5, r2
 800a272:	b933      	cbnz	r3, 800a282 <_free_r+0x32>
 800a274:	6063      	str	r3, [r4, #4]
 800a276:	6014      	str	r4, [r2, #0]
 800a278:	b003      	add	sp, #12
 800a27a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a27e:	f000 b8cd 	b.w	800a41c <__malloc_unlock>
 800a282:	42a3      	cmp	r3, r4
 800a284:	d90b      	bls.n	800a29e <_free_r+0x4e>
 800a286:	6821      	ldr	r1, [r4, #0]
 800a288:	1862      	adds	r2, r4, r1
 800a28a:	4293      	cmp	r3, r2
 800a28c:	bf04      	itt	eq
 800a28e:	681a      	ldreq	r2, [r3, #0]
 800a290:	685b      	ldreq	r3, [r3, #4]
 800a292:	6063      	str	r3, [r4, #4]
 800a294:	bf04      	itt	eq
 800a296:	1852      	addeq	r2, r2, r1
 800a298:	6022      	streq	r2, [r4, #0]
 800a29a:	602c      	str	r4, [r5, #0]
 800a29c:	e7ec      	b.n	800a278 <_free_r+0x28>
 800a29e:	461a      	mov	r2, r3
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	b10b      	cbz	r3, 800a2a8 <_free_r+0x58>
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d9fa      	bls.n	800a29e <_free_r+0x4e>
 800a2a8:	6811      	ldr	r1, [r2, #0]
 800a2aa:	1855      	adds	r5, r2, r1
 800a2ac:	42a5      	cmp	r5, r4
 800a2ae:	d10b      	bne.n	800a2c8 <_free_r+0x78>
 800a2b0:	6824      	ldr	r4, [r4, #0]
 800a2b2:	4421      	add	r1, r4
 800a2b4:	1854      	adds	r4, r2, r1
 800a2b6:	42a3      	cmp	r3, r4
 800a2b8:	6011      	str	r1, [r2, #0]
 800a2ba:	d1dd      	bne.n	800a278 <_free_r+0x28>
 800a2bc:	681c      	ldr	r4, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	6053      	str	r3, [r2, #4]
 800a2c2:	4421      	add	r1, r4
 800a2c4:	6011      	str	r1, [r2, #0]
 800a2c6:	e7d7      	b.n	800a278 <_free_r+0x28>
 800a2c8:	d902      	bls.n	800a2d0 <_free_r+0x80>
 800a2ca:	230c      	movs	r3, #12
 800a2cc:	6003      	str	r3, [r0, #0]
 800a2ce:	e7d3      	b.n	800a278 <_free_r+0x28>
 800a2d0:	6825      	ldr	r5, [r4, #0]
 800a2d2:	1961      	adds	r1, r4, r5
 800a2d4:	428b      	cmp	r3, r1
 800a2d6:	bf04      	itt	eq
 800a2d8:	6819      	ldreq	r1, [r3, #0]
 800a2da:	685b      	ldreq	r3, [r3, #4]
 800a2dc:	6063      	str	r3, [r4, #4]
 800a2de:	bf04      	itt	eq
 800a2e0:	1949      	addeq	r1, r1, r5
 800a2e2:	6021      	streq	r1, [r4, #0]
 800a2e4:	6054      	str	r4, [r2, #4]
 800a2e6:	e7c7      	b.n	800a278 <_free_r+0x28>
 800a2e8:	b003      	add	sp, #12
 800a2ea:	bd30      	pop	{r4, r5, pc}
 800a2ec:	200008dc 	.word	0x200008dc

0800a2f0 <_malloc_r>:
 800a2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f2:	1ccd      	adds	r5, r1, #3
 800a2f4:	f025 0503 	bic.w	r5, r5, #3
 800a2f8:	3508      	adds	r5, #8
 800a2fa:	2d0c      	cmp	r5, #12
 800a2fc:	bf38      	it	cc
 800a2fe:	250c      	movcc	r5, #12
 800a300:	2d00      	cmp	r5, #0
 800a302:	4606      	mov	r6, r0
 800a304:	db01      	blt.n	800a30a <_malloc_r+0x1a>
 800a306:	42a9      	cmp	r1, r5
 800a308:	d903      	bls.n	800a312 <_malloc_r+0x22>
 800a30a:	230c      	movs	r3, #12
 800a30c:	6033      	str	r3, [r6, #0]
 800a30e:	2000      	movs	r0, #0
 800a310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a312:	f000 f87d 	bl	800a410 <__malloc_lock>
 800a316:	4921      	ldr	r1, [pc, #132]	; (800a39c <_malloc_r+0xac>)
 800a318:	680a      	ldr	r2, [r1, #0]
 800a31a:	4614      	mov	r4, r2
 800a31c:	b99c      	cbnz	r4, 800a346 <_malloc_r+0x56>
 800a31e:	4f20      	ldr	r7, [pc, #128]	; (800a3a0 <_malloc_r+0xb0>)
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	b923      	cbnz	r3, 800a32e <_malloc_r+0x3e>
 800a324:	4621      	mov	r1, r4
 800a326:	4630      	mov	r0, r6
 800a328:	f000 f862 	bl	800a3f0 <_sbrk_r>
 800a32c:	6038      	str	r0, [r7, #0]
 800a32e:	4629      	mov	r1, r5
 800a330:	4630      	mov	r0, r6
 800a332:	f000 f85d 	bl	800a3f0 <_sbrk_r>
 800a336:	1c43      	adds	r3, r0, #1
 800a338:	d123      	bne.n	800a382 <_malloc_r+0x92>
 800a33a:	230c      	movs	r3, #12
 800a33c:	6033      	str	r3, [r6, #0]
 800a33e:	4630      	mov	r0, r6
 800a340:	f000 f86c 	bl	800a41c <__malloc_unlock>
 800a344:	e7e3      	b.n	800a30e <_malloc_r+0x1e>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	1b5b      	subs	r3, r3, r5
 800a34a:	d417      	bmi.n	800a37c <_malloc_r+0x8c>
 800a34c:	2b0b      	cmp	r3, #11
 800a34e:	d903      	bls.n	800a358 <_malloc_r+0x68>
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	441c      	add	r4, r3
 800a354:	6025      	str	r5, [r4, #0]
 800a356:	e004      	b.n	800a362 <_malloc_r+0x72>
 800a358:	6863      	ldr	r3, [r4, #4]
 800a35a:	42a2      	cmp	r2, r4
 800a35c:	bf0c      	ite	eq
 800a35e:	600b      	streq	r3, [r1, #0]
 800a360:	6053      	strne	r3, [r2, #4]
 800a362:	4630      	mov	r0, r6
 800a364:	f000 f85a 	bl	800a41c <__malloc_unlock>
 800a368:	f104 000b 	add.w	r0, r4, #11
 800a36c:	1d23      	adds	r3, r4, #4
 800a36e:	f020 0007 	bic.w	r0, r0, #7
 800a372:	1ac2      	subs	r2, r0, r3
 800a374:	d0cc      	beq.n	800a310 <_malloc_r+0x20>
 800a376:	1a1b      	subs	r3, r3, r0
 800a378:	50a3      	str	r3, [r4, r2]
 800a37a:	e7c9      	b.n	800a310 <_malloc_r+0x20>
 800a37c:	4622      	mov	r2, r4
 800a37e:	6864      	ldr	r4, [r4, #4]
 800a380:	e7cc      	b.n	800a31c <_malloc_r+0x2c>
 800a382:	1cc4      	adds	r4, r0, #3
 800a384:	f024 0403 	bic.w	r4, r4, #3
 800a388:	42a0      	cmp	r0, r4
 800a38a:	d0e3      	beq.n	800a354 <_malloc_r+0x64>
 800a38c:	1a21      	subs	r1, r4, r0
 800a38e:	4630      	mov	r0, r6
 800a390:	f000 f82e 	bl	800a3f0 <_sbrk_r>
 800a394:	3001      	adds	r0, #1
 800a396:	d1dd      	bne.n	800a354 <_malloc_r+0x64>
 800a398:	e7cf      	b.n	800a33a <_malloc_r+0x4a>
 800a39a:	bf00      	nop
 800a39c:	200008dc 	.word	0x200008dc
 800a3a0:	200008e0 	.word	0x200008e0

0800a3a4 <_realloc_r>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	4614      	mov	r4, r2
 800a3aa:	460e      	mov	r6, r1
 800a3ac:	b921      	cbnz	r1, 800a3b8 <_realloc_r+0x14>
 800a3ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	f7ff bf9c 	b.w	800a2f0 <_malloc_r>
 800a3b8:	b922      	cbnz	r2, 800a3c4 <_realloc_r+0x20>
 800a3ba:	f7ff ff49 	bl	800a250 <_free_r>
 800a3be:	4625      	mov	r5, r4
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3c4:	f000 f830 	bl	800a428 <_malloc_usable_size_r>
 800a3c8:	42a0      	cmp	r0, r4
 800a3ca:	d20f      	bcs.n	800a3ec <_realloc_r+0x48>
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	f7ff ff8e 	bl	800a2f0 <_malloc_r>
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d0f2      	beq.n	800a3c0 <_realloc_r+0x1c>
 800a3da:	4631      	mov	r1, r6
 800a3dc:	4622      	mov	r2, r4
 800a3de:	f7ff ff0f 	bl	800a200 <memcpy>
 800a3e2:	4631      	mov	r1, r6
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	f7ff ff33 	bl	800a250 <_free_r>
 800a3ea:	e7e9      	b.n	800a3c0 <_realloc_r+0x1c>
 800a3ec:	4635      	mov	r5, r6
 800a3ee:	e7e7      	b.n	800a3c0 <_realloc_r+0x1c>

0800a3f0 <_sbrk_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4d06      	ldr	r5, [pc, #24]	; (800a40c <_sbrk_r+0x1c>)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	602b      	str	r3, [r5, #0]
 800a3fc:	f7fb fa80 	bl	8005900 <_sbrk>
 800a400:	1c43      	adds	r3, r0, #1
 800a402:	d102      	bne.n	800a40a <_sbrk_r+0x1a>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	b103      	cbz	r3, 800a40a <_sbrk_r+0x1a>
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	bd38      	pop	{r3, r4, r5, pc}
 800a40c:	20000c74 	.word	0x20000c74

0800a410 <__malloc_lock>:
 800a410:	4801      	ldr	r0, [pc, #4]	; (800a418 <__malloc_lock+0x8>)
 800a412:	f000 b811 	b.w	800a438 <__retarget_lock_acquire_recursive>
 800a416:	bf00      	nop
 800a418:	20000c7c 	.word	0x20000c7c

0800a41c <__malloc_unlock>:
 800a41c:	4801      	ldr	r0, [pc, #4]	; (800a424 <__malloc_unlock+0x8>)
 800a41e:	f000 b80c 	b.w	800a43a <__retarget_lock_release_recursive>
 800a422:	bf00      	nop
 800a424:	20000c7c 	.word	0x20000c7c

0800a428 <_malloc_usable_size_r>:
 800a428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a42c:	1f18      	subs	r0, r3, #4
 800a42e:	2b00      	cmp	r3, #0
 800a430:	bfbc      	itt	lt
 800a432:	580b      	ldrlt	r3, [r1, r0]
 800a434:	18c0      	addlt	r0, r0, r3
 800a436:	4770      	bx	lr

0800a438 <__retarget_lock_acquire_recursive>:
 800a438:	4770      	bx	lr

0800a43a <__retarget_lock_release_recursive>:
 800a43a:	4770      	bx	lr

0800a43c <_init>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	bf00      	nop
 800a440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a442:	bc08      	pop	{r3}
 800a444:	469e      	mov	lr, r3
 800a446:	4770      	bx	lr

0800a448 <_fini>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	bf00      	nop
 800a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44e:	bc08      	pop	{r3}
 800a450:	469e      	mov	lr, r3
 800a452:	4770      	bx	lr
